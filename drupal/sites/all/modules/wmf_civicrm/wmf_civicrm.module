<?php

use Civi\WMFException\WMFException;

require_once 'recurring.inc';
require_once 'tracking.inc';

/**
 * @todo - delete or migrate to a setting.
 *
 * @deprecated
 * @return array
 */
function wmf_civicrm_menu() {
  $items = [];

  $items['admin/config/wmf_civicrm/matching_gifts'] = [
    'title' => t('Matching Gifts Employer Data'),
    'description' => t('Set matching gifts employer data config'),
    'page callback' => 'drupal_get_form',
    'page arguments' => ['wmf_civicrm_matching_gifts_form'],
    'access arguments' => ['administer site configuration'],
    'type' => MENU_NORMAL_ITEM,
  ];

  return $items;
}

/**
 * @return array
 * @todo - delete or migrate to a setting.
 *
 * @deprecated
 */
function wmf_civicrm_matching_gifts_form() {
  $form = [];

  $form['matching_gifts_employer_data_file_path'] = [
    '#type' => 'textfield',
    '#title' => 'File path for matching gifts employer data file',
    '#required' => TRUE,
    '#default_value' => variable_get(
      'matching_gifts_employer_data_file_path',
      '/srv/matching_gifts/employers.csv'
    ),
    '#description' => 'File path for matching gifts employer data file',
  ];

  return system_settings_form($form);
}

/**
 * @param $field_names
 * @param $group_name
 *
 * @deprecated - should not be needed with correct api v4 useage.
 *
 * @return array
 * @throws \CRM_Core_Exception
 */
function wmf_civicrm_get_custom_field_map($field_names, $group_name = NULL) {
  static $custom_fields = [];
  foreach ($field_names as $name) {
    if (empty($custom_fields[$name])) {
      $id = CRM_Core_BAO_CustomField::getCustomFieldID($name, $group_name);
      if (!$id) {
        throw new CRM_Core_Exception('id is missing: ' . $name . ' ' . $group_name);
      }
      $custom_fields[$name] = "custom_{$id}";
    }
  }

  return $custom_fields;
}

/**
 * @param $field_name
 * @param null $group_name
 *
 * @return mixed
 * @throws \CRM_Core_Exception
 * @deprecated - try ot use apiv4 instead.
 *
 */
function wmf_civicrm_get_custom_field_name($field_name, $group_name = NULL) {
  $custom_fields = wmf_civicrm_get_custom_field_map([$field_name], $group_name);
  return $custom_fields[$field_name];
}

/**
 * Checks for contact ID and hash match.  If mismatched unset
 * ID and hash so message is treated as a new contact.
 *
 * @todo - I think Message::normalize() already prunes invalid contact IDs so can probably just go.
 * @deprecated
 * @param $msg
 * @param $matchEmail
 *
 * @throws \CRM_Core_Exception
 */
function wmf_civicrm_set_null_id_on_hash_mismatch(&$msg, $matchEmail = FALSE) {
  $existing = civicrm_api3('Contact', 'getSingle', [
    'id' => $msg['contact_id'],
    'return' => ['hash', 'email'],
  ]);

  if (!$existing || $existing['hash'] !== $msg['contact_hash'] ||
    ($existing['email'] !== $msg['email'] && $matchEmail)) {
    $msg['contact_id'] = NULL;
    unset($msg['contact_hash']);
  }
}

/**
 * @todo - in most places this becomes obsolete when Message::normlize() is used.
 * Pulls all records in the wmf_contribution_extras table that match the gateway
 * and gateway transaction id.
 *
 * @deprecated - function should be replaced with an api call,
 * Audit & Queue classes can have their own variant - function is just
 * a basic api call so it is enough to share within the sub-system.
 *
 * @param string $gateway
 * @param string $gateway_txn_id
 *
 * @return mixed array of result rows, or false if none present.
 * TODO: return empty set rather than false.
 * @throws \Civi\WMFException\WMFException
 */
function wmf_civicrm_get_contributions_from_gateway_id($gateway, $gateway_txn_id) {
  // If you only want to know if it exists then call \Civi\WMFHelper\Contribution::exists()
  // @todo, move this function to \Civi\WMFHelper\Contribution, use apiv4
  $gateway = strtolower($gateway);
  $query = "SELECT cx.*, cc.* FROM wmf_contribution_extra cx LEFT JOIN civicrm_contribution cc
		ON cc.id = cx.entity_id
		WHERE gateway = %1 AND gateway_txn_id = %2";

  $dao = CRM_Core_DAO::executeQuery($query, [
    1 => [$gateway, 'String'],
    2 => [$gateway_txn_id, 'String'],
  ]);
  $result = [];
  while ($dao->fetch()) {
    $result[] = $dao->toArray();
  }
  // FIXME: pick wart
  if (empty($result)) {
    return FALSE;
  }
  return $result;
}

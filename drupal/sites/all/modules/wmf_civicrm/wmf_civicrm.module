<?php

use Civi\Api4\Contact;
use Civi\Api4\CustomField;
use Civi\Api4\WMFContact;
use Civi\WMFQueueMessage\DonationMessage;
use Civi\WMFStatistic\ImportStatsCollector;
use Civi\WMFException\WMFException;
use Civi\WMFHelper\ContributionRecur;
use Civi\WMFHelper\Database;
use SmashPig\Core\Helpers\CurrencyRoundingHelper;
use SmashPig\Core\UtcDate;
use SmashPig\PaymentData\ReferenceData\CurrencyRates;
use SmashPig\Core\DataStores\QueueWrapper;

require_once 'recurring.inc';
require_once 'tracking.inc';
require_once 'wmf_civicrm.hooks.php';

function wmf_civicrm_menu() {
  $items = [];

  $items['admin/config/wmf_civicrm/matching_gifts'] = [
    'title' => t('Matching Gifts Employer Data'),
    'description' => t('Set matching gifts employer data config'),
    'page callback' => 'drupal_get_form',
    'page arguments' => ['wmf_civicrm_matching_gifts_form'],
    'access arguments' => ['administer site configuration'],
    'type' => MENU_NORMAL_ITEM,
  ];

  return $items;
}

function wmf_civicrm_matching_gifts_form() {
  $form = [];

  $form['matching_gifts_employer_data_file_path'] = [
    '#type' => 'textfield',
    '#title' => 'File path for matching gifts employer data file',
    '#required' => TRUE,
    '#default_value' => variable_get(
      'matching_gifts_employer_data_file_path',
      '/srv/matching_gifts/employers.csv'
    ),
    '#description' => 'File path for matching gifts employer data file',
  ];

  $form['matching_gifts_employer_data_update_email'] = [
    '#type' => 'textfield',
    '#title' => 'Email address to send updates to',
    '#required' => TRUE,
    '#default_value' => variable_get(
      'matching_gifts_employer_data_update_email', 'fr-tech@wikimedia.org'
    ),
    '#description' => 'Email address to send matching gifts employer data updates to',
  ];

  return system_settings_form($form);
}

/**
 * Ensure the specified option value exists.
 *
 * @param string $group_name
 * @param string $value
 */
function wmf_civicrm_ensure_option_value_exists($group_name, $value) {
  $params = [
    'option_group_id' => $group_name,
    'name' => $value,
    'label' => $value,
    'value' => $value,
    'is_active' => 1,
  ];
  $existingValues = civicrm_api3('OptionValue', 'get', [
    'option_group_id' => $params['option_group_id'],
    'value' => $params['value'],
    'sequential' => 1,
  ]);
  $createRequired = FALSE;
  if ($existingValues['count'] == 0) {
    $createRequired = TRUE;
  }
  elseif (!$existingValues['values'][0]['is_active']) {
    $params['id'] = $existingValues['values'][0]['id'];
    $createRequired = TRUE;
  }
  if ($createRequired) {
    civicrm_api3('OptionValue', 'create', $params);
    // It won't take much to rebuild this & we don't know the entity.
    // This should be rare.
    wmf_civicrm_flush_cached_options();
  }
}

function wmf_civicrm_get_custom_values($entity_id, $names, $group_name = NULL) {
  $names = (array) $names;
  $params['entityID'] = $entity_id;
  foreach ($names as $name) {
    $field = wmf_civicrm_get_custom_field_name($name, $group_name);
    #var_export( "Custom field mapping: {$name} -> {$field}" );
    $params[$field] = 1;
    $field_map[$field] = $name;
  }
  $result = CRM_Core_BAO_CustomValueTable::getValues($params);
  $ret = [];
  foreach ($result as $field => $value) {
    if (array_key_exists($field, $field_map)) {
      $ret[$field_map[$field]] = $value;
    }
  }
  return $ret;
}

/**
 * @param $entity_id
 * @param $map
 * @param null $group_name
 *
 * @throws \Civi\WMFException\WMFException
 * @deprecated
 *
 * Phase this out as it is does some unecessary queries.
 *
 */
function wmf_civicrm_set_custom_field_values($entity_id, $map, $group_name = NULL) {
  $params = [
    'entityID' => $entity_id,
  ];
  $custom_fields =
    wmf_civicrm_get_custom_field_map(array_keys($map), $group_name);
  foreach ($map as $field_name => $value) {
    $params[$custom_fields[$field_name]] = $value;
  }
  $result = CRM_Core_BAO_CustomValueTable::setValues($params);
  if (!empty($result['is_error'])) {
    throw new WMFException(WMFException::CIVI_CONFIG,
      t('Failed to set custom values: id !id, error: !err', [
        '!id' => $entity_id,
        '!err' => $result['error_message'],
      ])
    );
  }
}

function wmf_civicrm_get_custom_field_map($field_names, $group_name = NULL) {
  static $custom_fields = [];
  foreach ($field_names as $name) {
    if (empty($custom_fields[$name])) {
      $id = CRM_Core_BAO_CustomField::getCustomFieldID($name, $group_name);
      if (!$id) {
        throw new CRM_Core_Exception('id is missing: ' . $name . ' ' . $group_name);
      }
      $custom_fields[$name] = "custom_{$id}";
    }
  }

  return $custom_fields;
}

/**
 * @param $field_name
 * @param null $group_name
 *
 * @return mixed
 * @throws \CRM_Core_Exception
 * @deprecated - try ot use apiv4 instead.
 *
 */
function wmf_civicrm_get_custom_field_name($field_name, $group_name = NULL) {
  $custom_fields = wmf_civicrm_get_custom_field_map([$field_name], $group_name);
  return $custom_fields[$field_name];
}

/**
 * Try to import a transaction message into CiviCRM, otherwise
 * throw an exception.
 *
 * @param array $msg
 *
 * @return array Contribution as inserted
 *
 * @throws \CRM_Core_Exception
 * @throws \Civi\WMFException\WMFException|\Statistics\Exception\StatisticsCollectorException
 */
function wmf_civicrm_contribution_message_import(array &$msg): array {
  $message = DonationMessage::getWMFMessage($msg);
  $isRecurring = $message->isRecurring();
  $importTimerName = getImportTimerName($isRecurring);
  _get_import_timer()->startImportTimer($importTimerName);

  civicrm_initialize();
  $msg = _verify_message_and_stage($message);
  $message->validate();

  $createRecurringToken = FALSE;
  // Associate with existing recurring records
  if ($message->isRecurring()) {
    if (!$message->getContributionRecurID()) {
      if (!empty($msg['recurring_payment_token'])) {
        $token_record = _get_recurring_payment_token($msg);
        if ($token_record) {
          \Civi::log('wmf')->info('queue2civicrm_import: Found matching recurring payment token: {token}', ['token' => $msg['recurring_payment_token']]);
          $msg['contact_id'] = $token_record['contact_id'];
          $msg['payment_token_id'] = $token_record['id'];
          $msg['payment_processor_id'] = $token_record['payment_processor_id'];
        }
        else {
          // When there is a token on the $msg but not in the db
          $createRecurringToken = TRUE;
        }
      }
    }
    else {
      // If parent record is mistakenly marked as Completed, Cancelled, or Failed, reactivate it
      if (ContributionRecur::gatewayManagesOwnRecurringSchedule($msg['gateway'])) {
        ContributionRecur::reactivateIfInactive([
          'contribution_status_id' => $message->getExistingContributionRecurValue('contribution_status_id'),
          'id' => $message->getContributionRecurID(),
        ]);
      }
      if ($message->isFundraiseUp()) {
        check_recur_modification_and_queue([
          'amount' => $message->getExistingContributionRecurValue('amount'),
          'currency' => $message->getExistingContributionRecurValue('currency'),
        ], $msg);
      }
    }
  }
  if ($msg['contact_id'] && isset($msg['contact_hash'])) {
    wmf_civicrm_set_null_id_on_hash_mismatch($msg, TRUE);
  }

  if (!$msg['contact_id']) {
    $msg = _create_contact($msg);
  }
  else {
    $save = new Civi\Api4\Action\WMFContact\Save('WMFContact', 'save');
    $save->handleUpdate($msg);
  }

  // Create recurring token if it isn't already there
  // Audit files bring in recurrings that we have the token for but were never created
  if ($createRecurringToken) {
    $token_record = wmf_civicrm_recur_payment_token_create($msg['contact_id'], $msg['gateway'], $msg['recurring_payment_token'], $msg['user_ip']);
    \Civi::log('wmf')->info('queue2civicrm_import: No payment token found. Creating : {token}', ['token' => $token_record['id']]);
    $msg['payment_token_id'] = $token_record['id'];
    $msg['payment_processor_id'] = $token_record['payment_processor_id'];
  }

  // Make new recurring record if necessary
  $initial_recurring = ($msg['recurring'] && !$msg['contribution_recur_id']);
  if ($initial_recurring) {
    $recurring_transaction_id = "";
    if ($msg['subscr_id']) {
      $recurring_transaction_id = $msg['subscr_id'];
    }

    if (!empty($msg['recurring_payment_token'])) {
      $recurring_transaction_id = $msg['gateway_txn_id'];
    }

    \Civi::log('wmf')->info('queue2civicrm_import: Attempting to insert new recurring subscription: {recurring_transaction_id}', ['recurring_transaction_id' => $recurring_transaction_id]);
    _message_contribution_recur_insert($msg, $recurring_transaction_id);
    $recur_record = wmf_civicrm_get_gateway_subscription($msg['gateway'], $recurring_transaction_id);
    $msg['contribution_recur_id'] = $recur_record->id;
  }

  // Look up soft credit contact.
  if (!empty($msg['soft_credit_to'])) {
    $soft_credit_contact = civicrm_api3('Contact', 'Get', [
      'organization_name' => $msg['soft_credit_to'],
      'contact_type' => 'Organization',
      'sequential' => 1,
      'return' => 'id',
    ]);
    if ($soft_credit_contact['count'] !== 1) {
      throw new WMFException(
        WMFException::INVALID_MESSAGE,
        "Bad soft credit target, [${msg['soft_credit_to']}]"
      );
    }
    # FIXME: awkward to have the two fields.
    $msg['soft_credit_to_id'] = $soft_credit_contact['id'];
  }

  // Set no_thank_you to recurring if its the 2nd+ of any recurring payments
  if (!$initial_recurring && $msg['contribution_recur_id']) {
    //check for previous recurring payments
    $recurring_check = civicrm_api3('Contribution', 'getcount', [
      'contribution_recur_id' => $msg['contribution_recur_id'],
    ]);

    //If there's at least 1, set no_thank_you to recurring
    if ($recurring_check >= 1) {
      $msg['no_thank_you'] = 'recurring';
    }
  }

  // Insert the contribution record.
  $contribution = _message_contribution_insert($msg);

  if (wmf_civicrm_should_update_contribution_tracking($msg, $initial_recurring)) {
    // Map the tracking record to the CiviCRM contribution
    // @FIXME what do we do if this returns false?  nothing at the moment...
    wmf_civicrm_message_update_contribution_tracking($msg, $contribution);
  }

  if (!empty($msg['notes'])) {
    // TODO: Handle failure.
    civicrm_api3("Note", "Create", [
      'entity_table' => 'civicrm_contact',
      'entity_id' => $msg['contact_id'],
      'note' => $msg['notes'],
    ]);
  }

  // Need to get this full name before ending the timer
  $uniqueTimerName = _get_import_timer()->getUniqueNamespace($importTimerName);
  _get_import_timer()->endImportTimer($importTimerName);

  DonationStatsCollector::getInstance()
    ->addStat("message_import_timers", _get_import_timer()->getTimerDiff($uniqueTimerName));

  return $contribution;
}

/**
 * @param array $msg
 *
 * @return array
 * @throws \Civi\WMFException\WMFException
 */
function _message_contribution_insert(array $msg): array {
  _get_import_timer()->startImportTimer("message_contribution_insert");
  $contribution = _wmf_civicrm_message_contribution_insert($msg);
  _get_import_timer()->endImportTimer("message_contribution_insert");
  return $contribution;
}

/**
 * @param array $msg
 * @param $recurring_transaction_id
 *
 * @return void
 * @throws \Civi\WMFException\WMFException
 */
function _message_contribution_recur_insert(array $msg, $recurring_transaction_id): void {
  _get_import_timer()->startImportTimer("message_contribution_recur_insert");
  wmf_civicrm_message_contribution_recur_insert($msg, $msg['contact_id'], $recurring_transaction_id);
  _get_import_timer()->endImportTimer("message_contribution_recur_insert");
}

/**
 * @param array $msg
 *
 * @return array
 * @throws \API_Exception
 * @throws \CRM_Core_Exception
 * @throws \Civi\API\Exception\UnauthorizedException
 */
function _create_contact(array $msg): array {
  _get_import_timer()->startImportTimer("create_contact");
  $contact = WMFContact::save(FALSE)
    ->setMessage($msg)
    ->execute()->first();
  $msg['contact_id'] = $contact['id'];
  _get_import_timer()->endImportTimer("create_contact");
  return $msg;
}

/**
 * @param DonationMessage $msg
 *
 * @return array
 * @throws \Civi\WMFException\WMFException
 */
function _verify_message_and_stage(DonationMessage $message): array {
  _get_import_timer()->startImportTimer("verify_and_stage");
  $msg = wmf_civicrm_verify_message_and_stage($message);
  _get_import_timer()->endImportTimer("verify_and_stage");
  return $msg;
}

/**
 * @param array $msg
 *
 * @return mixed|null
 */
function _get_recurring_payment_token(array $msg) {
  _get_import_timer()->startImportTimer("get_recurring_payment_token");
  $token_record = wmf_civicrm_get_recurring_payment_token(
    $msg['gateway'], $msg['recurring_payment_token']
  );
  _get_import_timer()->endImportTimer("get_recurring_payment_token");
  return $token_record;
}

/**
 * @param $isRecurring
 *
 * @return string
 */
function getImportTimerName($isRecurring): string {
  if (!$isRecurring) {
    $overallTimerName = "wmf_civicrm_contribution_message_import";
  }
  else {
    $overallTimerName = "wmf_civicrm_recurring_message_import";
  }
  return $overallTimerName;
}

/**
 * @return \Statistics\Collector\AbstractCollector
 */
function _get_import_timer(): \Statistics\Collector\AbstractCollector {
  return ImportStatsCollector::getInstance();
}

/**
 * @param object $recur_record
 * @param array $msg
 *
 * @return void
 * @throws \SmashPig\Core\ConfigurationKeyException
 * @throws \SmashPig\Core\DataStores\DataStoreException
 */
function check_recur_modification_and_queue(array $recur_record, array $msg): void {
  $recur_amount = $recur_record['amount'];
  $recur_currency = $recur_record['currency'];
  $amount_mismatch = !empty($msg['original_gross']) && ($msg['original_gross'] != $recur_amount);
  $currency_match = $recur_currency === $msg['original_currency'];
  if ($currency_match && $amount_mismatch) {
    $msg['amount'] = $msg['original_gross'];
    $msg['txn_type'] = 'recurring_upgrade';
    if ($msg['original_gross'] < $recur_amount) {
      $msg['txn_type'] = 'recurring_downgrade';
    }
    QueueWrapper::push('recurring', $msg);
  }
}

/**
 * Checks for contact ID and hash match.  If mismatched unset
 * ID and hash so message is treated as a new contact.
 *
 * @param $msg
 * @param $matchEmail
 *
 * @throws CiviCRM_API3_Exception
 */
function wmf_civicrm_set_null_id_on_hash_mismatch(&$msg, $matchEmail = FALSE) {
  $existing = civicrm_api3('Contact', 'getSingle', [
    'id' => $msg['contact_id'],
    'return' => ['hash', 'email'],
  ]);

  if (!$existing || $existing['hash'] !== $msg['contact_hash'] ||
    ($existing['email'] !== $msg['email'] && $matchEmail)) {
    $msg['contact_id'] = NULL;
    unset($msg['contact_hash']);
  }
}

/**
 * Insert the contribution record.
 *
 * This is an internal method, you must be looking for
 *
 * @param array $msg
 *
 * @return array
 *
 * @throws \Civi\WMFException\WMFException
 * @see wmf_civicrm_contribution_message_import.
 *
 */
function _wmf_civicrm_message_contribution_insert($msg) {
  $transaction = WmfTransaction::from_message($msg);
  $trxn_id = $transaction->get_unique_id();

  $contribution = [
    'contact_id' => $msg['contact_id'],
    'total_amount' => $msg['gross'],
    'financial_type_id' => $msg['financial_type_id'],
    'payment_instrument_id' => $msg['payment_instrument_id'],
    'fee_amount' => $msg['fee'],
    'net_amount' => $msg['net'],
    'trxn_id' => $trxn_id,
    'receive_date' => wmf_common_date_unix_to_civicrm($msg['date']),
    'currency' => $msg['currency'],
    'source' => $msg['original_currency'] . ' ' . CurrencyRoundingHelper::round($msg['original_gross'], $msg['original_currency']),
    'contribution_recur_id' => $msg['contribution_recur_id'],
    'check_number' => $msg['check_number'],
    'soft_credit_to' => $msg['soft_credit_to_id'],
    'debug' => TRUE,
  ];

  // Add the contribution status if its known and not completed
  if (!empty($msg['contribution_status_id'])) {
    $contribution['contribution_status_id'] = $msg['contribution_status_id'];
  }

  // Add the thank you date when it exists and is not null (e.g.: we're importing from a check)
  if (array_key_exists('thankyou_date', $msg) && is_numeric($msg['thankyou_date'])) {
    $contribution['thankyou_date'] = wmf_common_date_unix_to_civicrm($msg['thankyou_date']);
  }

  // Store the identifier we generated on payments
  $invoice_fields = ['invoice_id', 'order_id'];
  foreach ($invoice_fields as $invoice_field) {
    if (!empty($msg[$invoice_field])) {
      $contribution['invoice_id'] = $msg[$invoice_field];
      // The invoice_id column has a unique constraint
      if ($msg['recurring']) {
        $contribution['invoice_id'] .= '|recur-' . UtcDate::getUtcTimestamp();
      }
      break;
    }
  }

  /**
   *  Hopefully the Civi API will eventually handle custom fields in the
   *  above "Create" call.
   *
   * NOTE: the custom field for "Gift_Information" indicates that check number is stored here.  It is not.
   */
  $custom_field_defaults = [
    'gateway_account' => '',
  ];

  // Legacy field names which do not match the message field names
  $custom_name_mangle = [
    'direct_mail_appeal' => 'Appeal',
    'gift_source' => 'Campaign',
    'postmark_date' => 'Postmark_Date',
    'restrictions' => 'Fund',
    'stock_description' => 'Description_of_Stock',
    'gateway_status' => 'gateway_status_raw',
  ];

  // Custom fields with names that match the message fields.
  $custom_name_passthrough = [
    'gateway_account',
    'import_batch_number',
    'no_thank_you',
    'source_name',
    'source_type',
    'source_host',
    'source_run_id',
    'source_version',
    'source_enqueued_time',
    'Donor_Specified',
  ];

  $custom_fields = $custom_name_mangle
    + array_combine($custom_name_passthrough, $custom_name_passthrough);

  $custom_vars = [];
  foreach ($custom_fields as $msg_key => $custom_key) {
    if (array_key_exists($msg_key, $msg)) {
      $custom_vars[$custom_key] = $msg[$msg_key];
    }
  }

  // Transform any unix timestamps into an unambiguous MySQL datetime literal.
  // If the date is already in mysql format, it will be 14 characters long:
  // YYYYmmddHHiiss :-/
  $date_mangle = [
    'Postmark_Date',
    'source_enqueued_time',
  ];
  foreach ($date_mangle as $field) {
    if (array_key_exists($field, $custom_vars)
      && is_numeric($custom_vars[$field])
      && strlen($custom_vars[$field]) < 14
    ) {
      $custom_vars[$field] = wmf_common_date_unix_to_sql($custom_vars[$field]);
    }
  }

  $custom_vars += $custom_field_defaults;

  $custom_name_mapping = wmf_civicrm_get_custom_field_map(array_keys($custom_vars));
  foreach ($custom_name_mapping as $readable => $machined) {
    if (array_key_exists($readable, $custom_vars)) {
      $contribution[$machined] = $custom_vars[$readable];
    }
  }

  Civi::log('wmf')->debug('wmf_civicrm: Contribution array for contribution create {contribution}: ', ['contribution' => $contribution, TRUE]);
  try {
    $contribution_result = civicrm_api3('Contribution', 'Create', array_merge($contribution, ['skipRecentView' => 1]));
    Civi::log('wmf')->debug('wmf_civicrm: Successfully created contribution {contribution_id} for contact {contact_id}', [
      'contribution_id' => $contribution_result['id'],
      'contact_id' => $contribution['contact_id'],
    ]);
  }
  catch (CRM_Core_Exception $e) {
    Civi::log('wmf')->info('wmf_civicrm: Error inserting contribution: {message} {code}', ['message' => $e->getMessage(), 'code' => $e->getCode()]);
    // Constraint violations occur when data is rolled back to resolve a deadlock.
    if (in_array($e->getErrorCode(), ['constraint violation', 'deadlock', 'database lock timeout'], TRUE)) {
      throw new WMFException(WMFException::DATABASE_CONTENTION, 'Contribution not saved due to database load', $e->getErrorData());
    }

    $duplicate = 0;

    try {
      if (array_key_exists('invoice_id', $contribution)) {
        \Civi::log('wmf')->info('wmf_civicrm : Checking for duplicate on invoice ID {invoice_id}', ['invoice_id' => $contribution['invoice_id']]);
        $invoice_id = $contribution['invoice_id'];
        $duplicate = civicrm_api3("Contribution", "getcount", ["invoice_id" => $invoice_id]);
      }
      if ($duplicate > 0) {
        // We can't retry the insert here because the original API
        // error has marked the Civi transaction for rollback.
        // This WMFException code has special handling in the
        // WmfQueueConsumer that will alter the invoice_id before
        // re-queueing the message.
        throw new WMFException(
          WMFException::DUPLICATE_INVOICE,
          'Duplicate invoice ID, should modify and retry',
          $e->getExtraParams()
        );
      }
      else {
        throw new WMFException(
          WMFException::INVALID_MESSAGE,
          'Cannot create contribution, civi error!',
          $e->getExtraParams()
        );
      }
    }
    catch (CiviCRM_API3_Exception $eInner) {
      throw new WMFException(
        WMFException::INVALID_MESSAGE,
        'Cannot create contribution, civi error!',
        $eInner->getExtraParams()
      );
    }
  }

  // Create any required tags on the contribution
  if (!empty($msg['contribution_tags'])) {
    $supported_tags = array_flip(CRM_Core_BAO_Tag::getTags('civicrm_contribution'));
    $stacked_ex = [];
    foreach (array_unique($msg['contribution_tags']) as $tag) {
      try {
        civicrm_api3("EntityTag", "Create", [
          'entity_table' => 'civicrm_contribution',
          'entity_id' => $contribution_result['id'],
          'tag_id' => $supported_tags[$tag],
        ]);
      }
      catch (CiviCRM_API3_Exception $ex) {
        $stacked_ex[] = "Failed to add tag {$tag} to contribution ID {$contribution_result['id']}. Error: " . $ex->getMessage();
      }
    }
    if (!empty($stacked_ex)) {
      throw new WMFException(
        WMFException::IMPORT_CONTRIB,
        implode("\n", $stacked_ex)
      );
    }
  }

  return $contribution_result['values'][$contribution_result['id']];
}

/**
 * @param \Civi\WMFQueueMessage\DonationMessage $message
 *
 * @return array
 * @throws \CRM_Core_Exception
 * @throws \Civi\WMFException\WMFException
 */
function wmf_civicrm_verify_message_and_stage(DonationMessage $message) {
  $msg = $message->normalize();
  $msg = wmf_civicrm_add_contribution_tracking_if_missing($msg);

  $required = [
    'gross',
    'currency',
    'gateway',
    'gateway_txn_id',
  ];

  $err = [];
  foreach ($required as $key) {
    if (empty($msg[$key])) {
      $err[] = "Required Field '$key' not found in message.";
    }
  }

  if ((float) $msg['net'] <= 0 || (float) $msg['gross'] <= 0) {
    $err[] = "Positive amount required.";
  }

  if (!empty($err)) {
    throw new WMFException(WMFException::CIVI_REQ_FIELD, $err);
  }

  //Now check to make sure this isn't going to be a duplicate message for this gateway.
  wmf_civicrm_check_for_duplicates($msg);
  return $msg;
}

/**
 * Throw an exception if a contribution already exists
 *
 * @param array $message
 *
 * @throws \Civi\WMFException\WMFException
 */
function wmf_civicrm_check_for_duplicates(array $message) {
  if (
    empty($message['gateway']) ||
    empty($message['gateway_txn_id'])
  ) {
    throw new WMFException(
      WMFException::CIVI_REQ_FIELD,
      'Missing required field: ' .
      (empty($message['gateway']) ? 'gateway, ' : '') .
      (empty($message['gateway_trxn_id']) ? 'gateway_trxn_id, ' : '')
    );
  }

  if (CRM_Core_DAO::singleValueQuery(
    'SELECT count(*)
    FROM wmf_contribution_extra cx
    WHERE gateway = %1 AND gateway_txn_id = %2', [
    1 => [$message['gateway'], 'String'],
    2 => [$message['gateway_txn_id'], 'String'],
  ])) {
    throw new WMFException(
      WMFException::DUPLICATE_CONTRIBUTION,
      'Contribution already exists. Ignoring message.'
    );
  }
}

/**
 * Insert the contact record
 *
 * Serves as a standard way for message processors to handle contact
 * insertion.  By passing a contact id, a contact can be updated.
 *
 * @param array $msg
 * @param int $contact_id
 *
 * @return array
 */
function wmf_civicrm_message_contact_insert($msg, $contact_id = NULL) {
  return WMFContact::save(FALSE)
    ->setContactID($contact_id)
    ->setMessage($msg)
    ->execute()->first();
}

/**
 * Check if the language string exists.
 *
 * @param string $languageAbbreviation
 *
 * @return bool
 */
function wmf_civicrm_check_language_exists($languageAbbreviation) {
  $languages = wmf_civicrm_get_valid_languages();
  return !empty($languages[$languageAbbreviation]);
}

/**
 * Get valid languages.
 *
 * @return array
 */
function wmf_civicrm_get_valid_languages() {
  static $languages;
  if (empty($languages)) {
    $available_options = civicrm_api3('Contact', 'getoptions', [
      'field' => 'preferred_language',
    ]);
    $languages = $available_options['values'];
  }
  return $languages;
}

/**
 * Update the location record
 *
 * Serves as a standard way for message processors to handle location
 * updates.
 *
 * @param array $msg
 * @param array $contact
 */
function wmf_civicrm_message_location_update($msg, $contact) {
  wmf_civicrm_message_email_update($msg, $contact['id']);
  wmf_civicrm_message_address_update($msg, $contact['id']);
}

/**
 * Updates the email for a contact.
 *
 * @param array $msg
 * @param int $contact_id
 *
 * @throws \Civi\WMFException\WMFException
 */
function wmf_civicrm_message_email_update($msg, $contact_id) {
  if (empty($msg['email'])) {
    return;
  }

  try {
    $loc_type_id = isset($msg['email_location_type_id']) ? $msg['email_location_type_id'] : wmf_civicrm_get_default_location_type_id();
    if (!is_numeric($loc_type_id)) {
      $loc_type_id = CRM_Core_PseudoConstant::getKey('CRM_Core_BAO_Email', 'location_type_id', $loc_type_id);
    }
    $isPrimary = isset($msg['email_location_type_id']) ? 0 : 1;

    $emailParams = [
      'email' => $msg['email'],
      'is_primary' => $isPrimary,
      'is_billing' => $isPrimary,
      'contact_id' => $contact_id,
    ];

    // Look up contact's existing email to get the id and to determine
    // if the email has changed.
    $existingEmails = civicrm_api3("Email", 'get', [
      'return' => ['location_type_id', 'email', 'is_primary'],
      'contact_id' => $contact_id,
      'sequential' => 1,
      'options' => ['sort' => 'is_primary'],
    ])['values'];

    if (!empty($existingEmails)) {
      foreach ($existingEmails as $prospectiveEmail) {
        // We will update an existing one if it has the same email or the same
        // location type it, preferring same email+location type id over
        // same email over same location type id.
        if ($prospectiveEmail['email'] === $msg['email']) {
          if (empty($existingEmail)
            || $existingEmail['email'] !== $msg['email']
            || $prospectiveEmail['location_type_id'] == $loc_type_id
          ) {
            $existingEmail = $prospectiveEmail;
          }
        }
        elseif ($prospectiveEmail['location_type_id'] == $loc_type_id) {
          if (empty($existingEmail)) {
            $existingEmail = $prospectiveEmail;
          }
        }
      }

      if (!empty($existingEmail)) {
        if (strtolower($existingEmail['email']) === strtolower($msg['email'])) {
          // If we have the email already it still may make sense
          // to update to primary if this is (implicitly) an update of
          // primary email
          if (!$isPrimary || $existingEmail['is_primary']) {
            return;
          }
        }
        $emailParams['id'] = $existingEmail['id'];
        $emailParams['on_hold'] = 0;
      }
    }

    civicrm_api3('Email', 'create', $emailParams);
  }
  catch (CiviCRM_API3_Exception $e) {
    // Constraint violations occur when data is rolled back to resolve a deadlock.
    $code = (in_array($e->getErrorCode(), ['constraint violation', 'deadlock', 'database lock timeout'])) ? WMFException::DATABASE_CONTENTION : WMFException::IMPORT_CONTACT;
    throw new WMFException($code, "Couldn't store email for the contact.", $e->getExtraParams());
  }
}

/**
 * At a minimum, we need a country to store an address
 *
 * @param array $address
 *
 * @return bool
 */
function wmf_civicrm_is_address_valid($address) {
  if (!empty($address['country_id'])) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Update address for a contact.
 *
 * @param array $msg
 * @param int $contact_id
 *
 * @throws \Civi\WMFException\WMFException
 */
function wmf_civicrm_message_address_update($msg, $contact_id) {
  // CiviCRM does a DB lookup instead of checking the pseudoconstant.
  // @todo fix Civi to use the pseudoconstant.
  $country_id = wmf_civicrm_get_country_id($msg['country']);
  $address = [
    'is_primary' => 1,
    'street_address' => $msg['street_address'],
    'supplemental_address_1' => !empty($msg['supplemental_address_1']) ? $msg['supplemental_address_1'] : '',
    'city' => $msg['city'],
    'postal_code' => $msg['postal_code'],
    'country_id' => $country_id,
    'country' => $msg['country'],
    'is_billing' => 1,
    'debug' => 1,
  ];
  if (!empty($msg['state_province'])) {
    $address['state_province'] = $msg['state_province'];
    $address['state_province_id'] = wmf_civicrm_get_state_id($country_id, $msg['state_province']);
  }
  if (!wmf_civicrm_is_address_valid($address)) {
    return;
  }

  $address_params = [
    'contact_id' => $contact_id,
    'location_type_id' => wmf_civicrm_get_default_location_type_id(),
    'values' => [$address],
  ];

  try {
    civicrm_api3('Address', 'replace', $address_params);
  }
  catch (CiviCRM_API3_Exception $e) {
    // Constraint violations occur when data is rolled back to resolve a deadlock.
    $code = $e->getErrorCode() === 'constraint violation' ? WMFException::DATABASE_CONTENTION : WMFException::IMPORT_CONTACT;
    throw new WMFException($code, "Couldn't store address for the contact.", $e->getExtraParams());
  }
}

/**
 * Insert a new address for a contact.
 *
 * If updating or unsure use the marginally slower update function.
 *
 * @param array $msg
 * @param int $contact_id
 *
 * @throws \Civi\WMFException\WMFException
 */
function wmf_civicrm_message_address_insert($msg, $contact_id) {
  $loc_type_id = wmf_civicrm_get_default_location_type_id();

  // We can do these lookups a bit more efficiently than Civi
  $country_id = wmf_civicrm_get_country_id($msg['country']);

  $address_params = [
    'contact_id' => $contact_id,
    'location_type_id' => $loc_type_id,
    'is_primary' => 1,
    'street_address' => $msg['street_address'],
    'supplemental_address_1' => !empty($msg['supplemental_address_1']) ? $msg['supplemental_address_1'] : NULL,
    'city' => $msg['city'],
    'postal_code' => $msg['postal_code'],
    'country_id' => $country_id,
    'country' => $msg['country'],
    'fix_address' => isset($msg['fix_address']) ? $msg['fix_address'] : FALSE,
    'is_billing' => 1,
    'version' => 3,
  ];

  if (!empty($msg['state_province'])) {
    $address_params['state_province'] = $msg['state_province'];
    $address_params['state_province_id'] = wmf_civicrm_get_state_id($country_id, $msg['state_province']);
  }

  if (!wmf_civicrm_is_address_valid($address_params)) {
    return;
  }
  if (Database::isNativeTxnRolledBack()) {
    throw new WMFException(WMFException::IMPORT_CONTACT, "Native txn rolled back before inserting address");
  }
  try {
    // @todo - remove this from here & do in pre like this
    // https://issues.civicrm.org/jira/browse/CRM-21786
    // or don't pass fix_address= 0 (but we need to understand performance reasons
    // why we haven't done that.
    CRM_Core_BAO_Address::addGeocoderData($address_params);
    civicrm_api3('Address', 'Create', $address_params);
  }
  catch (CiviCRM_API3_Exception $ex) {
    throw new WMFException(
      WMFException::IMPORT_CONTACT,
      'Couldn\'t store address for the contact: ' .
      $ex->getMessage()
    );
  }

  if (Database::isNativeTxnRolledBack()) {
    throw new WMFException(WMFException::IMPORT_CONTACT, "Native txn rolled back after inserting address");
  }
}

function wmf_civicrm_get_default_location_type_id() {
  $default_location_type = CRM_Core_BAO_LocationType::getDefault();
  return $default_location_type->id;
}

function wmf_civicrm_get_country_id($raw) {
  // ISO code, or outside chance this could be a lang_COUNTRY pair
  if (preg_match('/^([a-z]+_)?([A-Z]{2})$/', $raw, $matches)) {
    $code = $matches[2];

    $iso_cache = CRM_Core_PseudoConstant::countryIsoCode();
    $id = array_search(strtoupper($code), $iso_cache);
    if ($id !== FALSE) {
      return $id;
    }
  }
  else {
    $country_cache = CRM_Core_PseudoConstant::country(FALSE, FALSE);
    $id = array_search($raw, $country_cache);
    if ($id !== FALSE) {
      return $id;
    }
  }

  \Civi::log('wmf')->notice('wmf_civicrm: Cannot find country: [{country}]',
    ['country' => $raw]
  );
  return FALSE;
}

/**
 * Get the state id for the named state in the given country.
 *
 * @param int $country_id
 * @param string $state
 *
 * @return int|null
 */
function wmf_civicrm_get_state_id($country_id, $state) {
  $stateID = CRM_Core_DAO::singleValueQuery('
  SELECT id
FROM civicrm_state_province s
WHERE
    s.country_id = %1
    AND ( s.abbreviation = %2 OR s.name = %3)
  ', [
    1 => [$country_id, 'String'],
    2 => [$state, 'String'],
    3 => [$state, 'String'],
  ]);
  if ($stateID) {
    return (int) $stateID;
  }

  \Civi::log('wmf')->notice('wmf_civicrm: Cannot find state: {state} (country {country})',
    ['state' => $state, 'country' => $country_id]
  );
}

/**
 * If we're missing a contribution tracking id, insert new record to the table.
 * This can happen if a user somehow makes a donation from outside the normal workflow
 * Historically checks have been ignored as they are completely offline.
 * T146295 has raised some questions about this.
 * We respect the recognition of 'payment_method' as being a little bit magic, but
 * also assume that if you are setting utm_medium or utm_source in your import you
 * intend them to be recorded.
 *
 * @param array $msg
 *
 * @return array same message, possibly with contribution_tracking_id set
 * @throws WMFException
 */
function wmf_civicrm_add_contribution_tracking_if_missing($msg) {
  if (isset($msg['contribution_tracking_id'])) {
    return $msg;
  }
  $paymentMethodIsCheckOrEmpty = empty($msg['payment_method']) || strtoupper($msg['payment_method']) == 'CHECK';
  $hasUtmInfo = !empty($msg['utm_medium']) || !empty($msg['utm_source']);
  if ($paymentMethodIsCheckOrEmpty && !$hasUtmInfo) {
    return $msg;
  }
  Civi::log('wmf')->debug('wmf_civicrm: Contribution missing contribution_tracking_id');

  $source = isset($msg['utm_source']) ? $msg['utm_source'] : '..' . $msg['payment_method'];
  $medium = isset($msg['utm_medium']) ? $msg['utm_medium'] : 'civicrm';
  $campaign = isset($msg['utm_campaign']) ? $msg['utm_campaign'] : NULL;

  $tracking = [
    'utm_source' => $source,
    'utm_medium' => $medium,
    'utm_campaign' => $campaign,
    'ts' => wmf_common_date_unix_to_sql($msg['date']),
  ];
  if (
    !empty($msg['country']) &&
    array_search($msg['country'], CRM_Core_PseudoConstant::countryIsoCode()) !== FALSE
  ) {
    $tracking['country'] = $msg['country'];
  }
  try {
    $contribution_tracking_id = wmf_civicrm_insert_contribution_tracking($tracking);
  }
  catch (Exception $e) {
    throw new WMFException(WMFException::INVALID_MESSAGE, $e->getMessage());
  }
  \Civi::log('wmf')->debug('wmf_civicrm: Newly inserted contribution tracking id: {id}', ['id' => $contribution_tracking_id]);
  $msg['contribution_tracking_id'] = $contribution_tracking_id;
  return $msg;
}

/**
 * Get the name value for the option group for direct mail.
 *
 * Note that this function should become obsolete - I wanted to use
 * the code below in the calling function instead but it didn't work and
 * I want to check with Coleman first.
 *
 * Contribution::getFields(FALSE)
 * ->setLoadOptions(TRUE)
 * ->addWhere('field_name', '=', 'Gift_Data:Campaign')
 * ->execute();
 *}
 *
 * @throws \CRM_Core_Exception
 */
function wmf_civicrm_get_direct_mail_field_option_id() {
  if (!isset(\Civi::$statics['wmf-civicrm']['appeal_field_id'])) {
    \Civi::$statics['wmf-civicrm']['appeal_field_id'] = CustomField::get(FALSE)
      ->addWhere('name', '=', 'Appeal')
      ->setSelect(['option_group_id'])
      ->execute()->first()['option_group_id'];
  }
  return \Civi::$statics['wmf-civicrm']['appeal_field_id'];
}

/**
 * Pulls all records in the wmf_contribution_extras table that match the gateway
 * and gateway transaction id.
 *
 * @param string $gateway
 * @param string $gateway_txn_id
 *
 * @return mixed array of result rows, or false if none present.
 * TODO: return empty set rather than false.
 * @throws \Civi\WMFException\WMFException
 */
function wmf_civicrm_get_contributions_from_gateway_id($gateway, $gateway_txn_id) {
  // If you only want to know if it exists then call \Civi\WMFHelper\Contribution::exists()
  // @todo, move this function to \Civi\WMFHelper\Contribution, use apiv4
  $gateway = strtolower($gateway);
  $query = "SELECT cx.*, cc.* FROM wmf_contribution_extra cx LEFT JOIN civicrm_contribution cc
		ON cc.id = cx.entity_id
		WHERE gateway = %1 AND gateway_txn_id = %2";

  $dao = CRM_Core_DAO::executeQuery($query, [
    1 => [$gateway, 'String'],
    2 => [$gateway_txn_id, 'String'],
  ]);
  return wmf_civicrm_dao_to_list($dao);
}

/**
 * Pulls all records in the wmf_contribution_extras table that match the civicrm
 * contribution id.
 *
 * @param string $contribution_id
 *
 * @return mixed array of result rows, or false if none present.
 * @throws \Civi\WMFException\WMFException
 */
function wmf_civicrm_get_contributions_from_contribution_id($contribution_id) {
  $query = "SELECT cx.*, cc.* FROM wmf_contribution_extra cx LEFT JOIN civicrm_contribution cc
		ON cc.id = cx.entity_id
		WHERE cc.id = %1";

  $dao = CRM_Core_DAO::executeQuery($query, [
    1 => [$contribution_id, 'Integer'],
  ]);
  return wmf_civicrm_dao_to_list($dao);
}

/**
 * Checks to see whether a contribution is refunded or charged back by gateway
 * and gateway transaction id.
 *
 * @param string $gateway
 * @param string $gateway_txn_id
 *
 * @return bool true if contribution exists and is refunded or charged back,
 *   else false
 */
function wmf_civicrm_is_refunded_by_gateway_id($gateway, $gateway_txn_id) {
  $contributions = wmf_civicrm_get_contributions_from_gateway_id($gateway, $gateway_txn_id);
  if (!$contributions) {
    return FALSE;
  }
  return CRM_Contribute_BAO_Contribution::isContributionStatusNegative(
    $contributions[0]['contribution_status_id']
  );
}

function wmf_civicrm_boost_performance() {
  civicrm_initialize();
  $config = CRM_Core_Config::singleton();
  $config->doNotResetCache = 1;
}

function wmf_civicrm_set_no_thank_you($contribution_id, $reason) {
  \Civi::log('wmf')->info('wmf_civicrm: Preventing thank-you for contribution {contribution_id} because: {reason}', ['contribution_id' => $contribution_id, 'reason' => $reason]);

  try {
    wmf_civicrm_set_custom_field_values($contribution_id, [
      'no_thank_you' => $reason,
    ]);
  }
  catch (WMFException $ex) {
    \Civi::log('wmf')->error('wmf_civicrm: Updating with no-thank-you failed with details: {message}', ['message' => $ex->getMessage()]);
  }
}

/**
 * Sets the civi records to reflect a contribution refund.
 *
 * The original contribution is set to status "Refunded", or "Chargeback" and a
 * negative financial transaction record is created. If the amount refunded
 * does not match a second contribution is added for the balance. The
 * parent_contribution_id custom field is set on the balance contribution to
 * connect it to the parent.
 *
 * Prior to the 4.6 CiviCRM upgrade refunds resulted in second contribution
 * with a negative amount. They were linked to the original through the
 * parent_contribution_id custom field. This was consistent with 4.2 behaviour
 * which was the then current version.
 *
 * 4.3 (included in the 4.6 upgrade) introduced recording multiple financial
 * transactions (payments) against one contribution. In order to adapt to this
 * the markRefund function now records second financial transactions against
 * the original contribution (using the contribution.create api). Discussion
 * about this change is at https://phabricator.wikimedia.org/T116317
 *
 * Some refunds do not have the same $ amount as the original transaction.
 * Prior to Oct 2014 these were seemingly always imported to CiviCRM. Since
 * that time the code was changed to throw an exception when the refund
 * exceeded the original amount, and not import it into CiviCRM. (this does
 * have visibility as it results in fail_mail).
 *
 * The code suggested an intention to record mismatched refunds with a the
 * difference in the custom fields settlement_usd. However, this returns no
 * rows. select * from wmf_contribution_extra WHERE settlement_usd IS NOT NULL
 * LIMIT. It would appear they have been recorded without any record of the
 * discrepancy, or there were none.
 *
 * That issue should be addressed (as a separate issue). The methodology for
 * recording the difference needs to be considered e.g T89437 - preferably in
 * conjunction with getting the appropriate method tested within the core
 * codebase.
 *
 * Note that really core CiviCRM should have a way of handling this and we
 * should work on getting that resolved and adopting it.
 *
 * An earlier iteration of this function reconstructed the value of the
 * original contribution when it had been zero'd or marked as 'RFD'. This
 * appears to be last used several years ago & this handling has been removed
 * now.
 *
 * @param int $contribution_id
 * @param string $contribution_status
 *   'Refunded'|'Chargeback' - this will determine the new contribution status.
 * @param bool $refund_completed
 *   It turns out this is only passed in as anything other than true from the
 *   tests (based on grepping). The UI DOES allow for a status of 'Pending
 *   Refund' to be used if this is required from the UI although we don't have
 *   a process around that at this stage.
 * @param string $refund_date
 * @param int $refund_gateway_txn_id
 * @param string $refund_currency
 *   If provided this will be checked against the original contribution and an
 *   exception will be thrown on mismatch.
 * @param float $refund_amount
 *   If provided this will be checked against the original contribution and an
 *   exception will be thrown on mismatch.
 *
 * @return int
 *   The refund's contribution id.
 * @throws Civi\ExchangeException\ExchangeRatesException;
 * @throws \Civi\WMFException\WMFException
 */

function wmf_civicrm_mark_refund(
  $contribution_id,
  $contribution_status = 'Refunded',
  $refund_completed = FALSE,
  $refund_date = NULL,
  $refund_gateway_txn_id = NULL,
  $refund_currency = NULL,
  $refund_amount = NULL
) {
  $amount_scammed = 0;

  try {
    $contribution = civicrm_api3('Contribution', 'getsingle', [
      'id' => $contribution_id,
      'return' => [
        'total_amount',
        'trxn_id',
        'contribution_source',
        'contact_id',
        'receive_date',
        'contribution_status_id',
      ],
    ]);
  }
  catch (CiviCRM_API3_Exception $e) {
    throw new WMFException(
      WMFException::INVALID_MESSAGE, "Could not load contribution: $contribution_id with error " . $e->getMessage()
    );
  }

  // Note that my usual reservation about using BAO functions from custom code is overridden by the
  // caching problems we are hitting in testing (plus the happy knowledge the tests care about this line of
  // code).
  if (CRM_Contribute_BAO_Contribution::isContributionStatusNegative($contribution['contribution_status_id'])
  ) {
    throw new WMFException(WMFException::DUPLICATE_CONTRIBUTION, "Contribution is already refunded: $contribution_id");
  }
  // Deal with any discrepancies in the refunded amount.
  [$original_currency, $original_amount] = explode(" ", $contribution['contribution_source']);

  if ($refund_currency !== NULL) {
    if ($refund_currency != $original_currency) {
      if ($refund_currency === 'USD') {
        // change original amount and currency to match refund
        $original_amount = round(exchange_rate_convert($original_currency, $original_amount, CRM_Utils_Date::unixTime($contribution['receive_date'])), 2);
        $original_currency = 'USD';
      }
      else {
        throw new WMFException(WMFException::INVALID_MESSAGE, "Refund was in a different currency.  Freaking out.");
      }
    }
  }
  else {
    $refund_currency = $original_currency;
  }
  if ($refund_date === NULL) {
    $refund_date = time();
  }
  elseif (!is_numeric($refund_date)) {
    $refund_date = wmf_common_date_parse_string($refund_date);
  }

  try {
    civicrm_api3('Contribution', 'create', [
      'id' => $contribution_id,
      'debug' => 1,
      'contribution_status_id' => $contribution_status,
      'cancel_date' => wmf_common_date_unix_to_civicrm($refund_date),
      'refund_trxn_id' => $refund_gateway_txn_id,
    ]);
  }
  catch (CiviCRM_API3_Exception $e) {
    throw new WMFException(
      WMFException::IMPORT_CONTRIB,
      "Cannot mark original contribution as refunded:
                $contribution_id, " . $e->getMessage() . print_r($e->getExtraParams(), TRUE)
    );
  }

  if ($refund_amount !== NULL) {
    $amount_scammed = round($refund_amount, 2) - round($original_amount, 2);
    if ($amount_scammed != 0) {
      $transaction = WmfTransaction::from_unique_id($contribution['trxn_id']);
      if ($refund_gateway_txn_id) {
        $transaction->gateway_txn_id = $refund_gateway_txn_id;
      }
      $transaction->is_refund = TRUE;
      $refund_unique_id = $transaction->get_unique_id();

      try {
        civicrm_api3('Contribution', 'create', [
          'total_amount' => round(
            exchange_rate_convert(
              $refund_currency,
              -$amount_scammed,
              wmf_common_date_parse_string(date('Y-m-d h:i:s', $refund_date)
              )), 2),
          // New type?
          'financial_type_id' => 'Refund',
          'contact_id' => $contribution['contact_id'],
          'contribution_source' => $refund_currency . " " . -$amount_scammed,
          'trxn_id' => $refund_unique_id,
          'receive_date' => date('Y-m-d h:i:s', $refund_date),
          'currency' => 'USD',
          'debug' => 1,
          wmf_civicrm_get_custom_field_name('parent_contribution_id') => $contribution_id,
          wmf_civicrm_get_custom_field_name('no_thank_you') => 1,
        ]);
      }
      catch (CiviCRM_API3_Exception $e) {
        throw new WMFException(
          WMFException::IMPORT_CONTRIB,
          "Cannot create new contribution for the refund difference:
                $contribution_id, " . $e->getMessage() . print_r($e->getExtraParams(), TRUE)
        );
      }
    }
  }

  $alert_factor = Civi::settings()->get('wmf_refund_alert_factor');
  if ($amount_scammed > $alert_factor * $original_amount) {
    wmf_common_failmail('wmf_civicrm', "Refund amount mismatch for : $contribution_id, difference is {$amount_scammed}. See "
      . CRM_Utils_System::url('civicrm/contact/view/contribution', [
        'reset' => 1,
        'id' => $contribution_id,
        'action' => 'view',
      ], TRUE));
  }

  return $contribution_id;
}

/**
 * @param array $contribution
 *
 * @return array
 */
function wmf_civicrm_get_wmf_contribution_extra($contribution) {
  $extra = [];

  if (!empty($contribution['trxn_id'])) {
    try {
      $transaction = WmfTransaction::from_unique_id($contribution['trxn_id']);
      $extra['gateway'] = strtolower($transaction->gateway);
      $extra['gateway_txn_id'] = $transaction->gateway_txn_id;
    }
    catch (WMFException $ex) {
      \Civi::log('wmf')->info('wmf_civicrm: Failed to parse trxn_id: {trxn_id}, {message}',
        ['trxn_id' => $contribution['trxn_id'], 'message' => $ex->getMessage()]
      );
    }
  }

  if (!empty($contribution['source'])) {
    $extra = array_merge($extra, wmf_civicrm_get_original_currency_and_amount_from_source($contribution['source'], $contribution['total_amount']));
  }
  return $extra;
}

/**
 * Get original currency & amount
 *
 * The source field holds the amount & currency - parse it out
 * e.g 'USD 15.25'
 *
 * @param string $source
 * @param float $usd_amount
 *
 * @return array
 */
function wmf_civicrm_get_original_currency_and_amount_from_source($source, $usd_amount) {
  if (empty($source)) {
    return [];
  }
  [$original_currency, $original_amount] = explode(" ", $source);
  if (is_numeric($original_amount) && wmf_civicrm_is_valid_currency($original_currency)) {
    return ['original_currency' => $original_currency, 'original_amount' => $original_amount];
  }

  if (is_numeric($original_amount)) {
    return ['original_currency' => 'USD', 'original_amount' => $usd_amount];
  }
  return [];
}

/**
 * @param int $contactID
 *
 * @return array
 * @throws \CRM_Core_Exception
 */
function _wmf_civicrm_get_contact_last_donation_data(int $contactID): array {
  $contactExistingCustomData = Contact::get(FALSE)->addWhere('id', '=', $contactID)
    ->addSelect(
      'wmf_donor.last_donation_currency',
      'wmf_donor.last_donation_amount',
      'wmf_donor.last_donation_date',
      'wmf_donor.last_donation_usd'
    )
    ->execute()->first();
  return [
    'amount' => $contactExistingCustomData['wmf_donor.last_donation_amount'],
    'date' => $contactExistingCustomData['wmf_donor.last_donation_date'],
    'amount_usd' => $contactExistingCustomData['wmf_donor.last_donation_usd'],
    'currency' => $contactExistingCustomData['wmf_donor.last_donation_currency'],
  ];
}

/**
 * Expand CiviCRM DAO results object into an array of rows as array
 *
 * @param $dao CRM_Core_DAO
 *
 * @return array
 * @throws \Exception
 */
function wmf_civicrm_dao_to_list($dao) {
  if (PEAR::isError($dao)) {
    throw new Exception($dao->getMessage());
  }
  $result = [];
  while ($dao->fetch()) {
    $result[] = $dao->toArray();
  }
  // FIXME: pick wart
  if (empty($result)) {
    return FALSE;
  }
  return $result;
}

/**
 * Get options for a field.
 *
 * @param string $entity
 * @param string $field
 *
 * @return array
 * @throws \CiviCRM_API3_Exception
 */
function wmf_civicrm_get_options($entity, $field) {
  if (!isset(\Civi::$statics['wmf_civicrm'][$entity][$field])) {
    $options = civicrm_api3($entity, 'getoptions', ['field' => $field]);
    \Civi::$statics['wmf_civicrm'][$entity][$field] = $options['values'];
  }
  return \Civi::$statics['wmf_civicrm'][$entity][$field];
}

/**
 * Determine if a code represents a supported currency. Uses the
 * SmashPig currency list as a canonical source.
 *
 * @param string $currency should be an ISO 4217 code
 *
 * @return bool true if it's a real currency that we can handle
 */
function wmf_civicrm_is_valid_currency($currency) {
  $all_currencies = array_keys(CurrencyRates::getCurrencyRates());
  return in_array($currency, $all_currencies);
}

/**
 * Abuse the permissions hook to prevent de-duping without a limit
 *
 * @param string $permission
 * @param bool $granted
 *
 * @return bool
 */
function wmf_civicrm_civicrm_permission_check($permission, &$granted) {
  if ($permission === 'merge duplicate contacts') {
    $action = CRM_Utils_Request::retrieve('action', 'String');
    $path = CRM_Utils_System::currentPath();
    if (
      $path === 'civicrm/contact/dedupefind' &&
      !CRM_Utils_Request::retrieve('limit', 'Integer') &&
      ($action != CRM_Core_Action::PREVIEW)
    ) {
      CRM_Core_Session::setStatus(ts('Not permitted for WMF without a limit - this is a setting (dedupe_default_limit) configured on administer->system settings -> misc'));
      $granted = FALSE;
    }
  }
  return TRUE;
}

/**
 * Flush statically cached option values.
 */
function wmf_civicrm_flush_cached_options() {
  \Civi::$statics['wmf_civicrm'] = [];
}

/**
 * Queue wrapper for api function.
 *
 * I'm hoping to get this or a similar fix upstreamed - so this
 * should be temporary - it adds a function that calls the v4 api,
 * ignoring the ctx - which doesn't serialise well...
 *
 * @param $ctx
 * @param $entity
 * @param $action
 * @param $params
 *
 * @return true
 * @throws \API_Exception
 * @throws \Civi\API\Exception\NotImplementedException
 */
function civicrm_api4_queue($ctx, $entity, $action, $params): bool {
  try {
    civicrm_api4($entity, $action, $params);
  }
  catch (CRM_Core_Exception $e) {
    \Civi::log('wmf')->error('queued action failed {entity} {action} {params} {message} {exception}', [
      'entity' => $entity,
      'action' => $action,
      'params' => $params,
      'message' => $e->getMessage(),
      'exception' => $e,
    ]);
    return FALSE;
  }
  return TRUE;
}

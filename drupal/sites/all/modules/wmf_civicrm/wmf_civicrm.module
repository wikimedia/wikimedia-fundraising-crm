<?php

use Civi\Api4\CustomField;
use Civi\Api4\Name;
use Civi\Api4\WMFContact;
use Civi\WMFHelpers\ContributionRecur;
use Civi\WMFHelpers\FinanceInstrument;
use SmashPig\Core\Helpers\CurrencyRoundingHelper;
use SmashPig\Core\UtcDate;
use SmashPig\PaymentData\ReferenceData\CurrencyRates;
use Civi\WMFStatistics\ImportStatsCollector;
use Civi\WMFException\WMFException;
use Civi\ExchangeException\ExchangeRatesException;

require_once 'recurring.inc';
require_once 'tracking.inc';
require_once 'wmf_civicrm.hooks.php';

function wmf_civicrm_menu() {
  $items = [];

  $items['admin/config/wmf_civicrm/matching_gifts'] = array(
    'title' => t('Matching Gifts Employer Data'),
    'description' => t('Set matching gifts employer data config'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wmf_civicrm_matching_gifts_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

function wmf_civicrm_matching_gifts_form() {
  $form = array();

  $form['matching_gifts_employer_data_file_path'] = array(
    '#type' => 'textfield',
    '#title' => 'File path for matching gifts employer data file',
    '#required' => TRUE,
    '#default_value' => variable_get(
      'matching_gifts_employer_data_file_path',
      '/srv/matching_gifts/employers.csv'
    ),
    '#description' => 'File path for matching gifts employer data file',
  );


  $form['matching_gifts_employer_data_update_email'] = array(
    '#type' => 'textfield',
    '#title' => 'Email address to send updates to',
    '#required' => TRUE,
    '#default_value' => variable_get(
      'matching_gifts_employer_data_update_email', 'fr-tech@wikimedia.org'
    ),
    '#description' => 'Email address to send matching gifts employer data updates to',
  );

  return system_settings_form($form);
}

/**
 * Ensure the specified option value exists.
 *
 * @param string $group_name
 * @param string $value
 */
function wmf_civicrm_ensure_option_value_exists($group_name, $value) {
  $params = [
    'option_group_id' => $group_name,
    'name' => $value,
    'label' => $value,
    'value' => $value,
    'is_active' => 1,
  ];
  $existingValues = civicrm_api3('OptionValue', 'get', [
    'option_group_id' => $params['option_group_id'],
    'value' => $params['value'],
    'sequential' => 1,
  ]);
  $createRequired = FALSE;
  if ($existingValues['count'] == 0) {
    $createRequired = TRUE;
  }
  elseif (!$existingValues['values'][0]['is_active']) {
    $params['id'] = $existingValues['values'][0]['id'];
    $createRequired = TRUE;
  }
  if ($createRequired) {
    civicrm_api3('OptionValue', 'create', $params);
    // It won't take much to rebuild this & we don't know the entity.
    // This should be rare.
    wmf_civicrm_flush_cached_options();
  }
}

function civicrm_api_classapi() {
  civicrm_initialize();
  if (module_load_include('php', 'civicrm', '../api/class.api') === FALSE) {
    watchdog('civicrm_api', t('Failed to load civicrm api classes'), [], WATCHDOG_ERROR);
  }
  else {
    return new civicrm_api3();
  }
}

/**
 * Determines the settlement currency for a given donation.
 * Argument is a queue message or a civicrm contribution array.
 * TODO: implement hook to determine our actual settlement currency.
 */
function wmf_civicrm_get_settlement_currency($transaction) {
  return 'USD';
}

function wmf_civicrm_get_custom_values($entity_id, $names, $group_name = NULL) {
  $names = (array) $names;
  $params['entityID'] = $entity_id;
  foreach ($names as $name) {
    $field = wmf_civicrm_get_custom_field_name($name, $group_name);
    #var_export( "Custom field mapping: {$name} -> {$field}" );
    $params[$field] = 1;
    $field_map[$field] = $name;
  }
  $result = CRM_Core_BAO_CustomValueTable::getValues($params);
  $ret = [];
  foreach ($result as $field => $value) {
    if (array_key_exists($field, $field_map)) {
      $ret[$field_map[$field]] = $value;
    }
  }
  return $ret;
}

/**
 * @param $entity_id
 * @param $map
 * @param null $group_name
 *
 * @throws \Civi\WMFException\WMFException
 * @deprecated
 *
 * Phase this out as it is does some unecessary queries.
 *
 */
function wmf_civicrm_set_custom_field_values($entity_id, $map, $group_name = NULL) {
  $params = [
    'entityID' => $entity_id,
  ];
  $custom_fields =
    wmf_civicrm_get_custom_field_map(array_keys($map), $group_name);
  foreach ($map as $field_name => $value) {
    $params[$custom_fields[$field_name]] = $value;
  }
  $result = CRM_Core_BAO_CustomValueTable::setValues($params);
  if (!empty($result['is_error'])) {
    throw new WMFException(WMFException::CIVI_CONFIG,
      t('Failed to set custom values: id !id, error: !err', [
        '!id' => $entity_id,
        '!err' => $result['error_message'],
      ])
    );
  }
}

function wmf_civicrm_get_custom_field_map($field_names, $group_name = NULL) {
  static $custom_fields = [];
  foreach ($field_names as $name) {
    if (empty($custom_fields[$name])) {
      $id = CRM_Core_BAO_CustomField::getCustomFieldID($name, $group_name);
      if (!$id) {
        throw new CRM_Core_Exception('id is missing: ' . $name . ' ' . $group_name);
      }
      $custom_fields[$name] = "custom_{$id}";
    }
  }

  return $custom_fields;
}

function wmf_civicrm_get_custom_field_name($field_name, $group_name = NULL) {
  $custom_fields = wmf_civicrm_get_custom_field_map([$field_name], $group_name);
  return $custom_fields[$field_name];
}

/**
 * Try to import a transaction message into CiviCRM, otherwise
 * throw an exception.
 *
 * @param array $msg
 *
 * @return array Contribution as inserted
 *
 * @throws \API_Exception
 * @throws \CiviCRM_API3_Exception
 * @throws \Civi\WMFException\WMFException
 */
function wmf_civicrm_contribution_message_import(&$msg) {
  $timer = ImportStatsCollector::getInstance();

  if (empty($msg['recurring'])) {
    $overallTimerName = "wmf_civicrm_contribution_message_import";
  }
  else {
    $overallTimerName = "wmf_civicrm_recurring_message_import";
  }
  $timer->startImportTimer($overallTimerName);
  civicrm_initialize();

  $timer->startImportTimer("verify_and_stage");
  $msg = wmf_civicrm_verify_message_and_stage($msg);
  $timer->endImportTimer("verify_and_stage");

  $createRecurringToken = false;
  // Associate with existing recurring records
  if ($msg['recurring'] && !$msg['contribution_recur_id']) {
    if (!empty($msg['recurring_payment_token'])) {
      $timer->startImportTimer("get_recurring_payment_token");
      $token_record = wmf_civicrm_get_recurring_payment_token(
        $msg['gateway'], $msg['recurring_payment_token']
      );
      $timer->endImportTimer("get_recurring_payment_token");
      if ($token_record) {
        watchdog(
          'queue2civicrm_import',
          'Found matching recurring payment token: ' . $msg['recurring_payment_token'],
          NULL,
          WATCHDOG_INFO
        );
        $msg['contact_id'] = $token_record['contact_id'];
        $msg['payment_token_id'] = $token_record['id'];
        $msg['payment_processor_id'] = $token_record['payment_processor_id'];
      } else {
        // When there is a token on the $msg but not in the db
        $createRecurringToken = true;
      }
    }
    elseif ($msg['subscr_id']) {
      $timer->startImportTimer("get_gateway_subscription");
      $recur_record = wmf_civicrm_get_gateway_subscription($msg['gateway'], $msg['subscr_id']);
      $timer->endImportTimer("get_gateway_subscription");
      if ($recur_record) {
        watchdog('queue2civicrm_import', 'Found matching recurring record for subscr_id: ' . $msg['subscr_id'], NULL, WATCHDOG_INFO);
        $msg['contribution_recur_id'] = $recur_record->id;
        $msg['contact_id'] = $recur_record->contact_id;
        // If parent record is mistakenly marked as Completed, Cancelled, or Failed, reactivate it
        ContributionRecur::reactivateIfInactive($recur_record);
      }
    }
    else {
      throw new WMFException(WMFException::INVALID_MESSAGE, 'Recurring donation, but no subscription ID or recurring payment token found.');
    }
  }
  if ($msg['contact_id'] && isset($msg['contact_hash'])) {
    wmf_civicrm_set_null_id_on_hash_mismatch($msg, TRUE);
  }

  if (!$msg['contact_id']) {
    $timer->startImportTimer("create_contact");
    wmf_civicrm_message_create_contact($msg);
    $timer->endImportTimer("create_contact");
  }
  else {
    $save = new Civi\Api4\Action\WMFContact\Save('WMFContact', 'save');
    $save->handleUpdate($msg);
  }

  // Create recurring token if it isn't already there
  // Audit files bring in recurrings that we have the token for but were never created
  if ($createRecurringToken) {
    $token_record = wmf_civicrm_recur_payment_token_create($msg['contact_id'], $msg['gateway'], $msg['recurring_payment_token'], $msg['user_ip']);
    watchdog(
      'queue2civicrm_import',
      'No payment token found. Creating : ' . $token_record['id'],
      NULL,
      WATCHDOG_INFO
    );
    $msg['payment_token_id'] = $token_record['id'];
    $msg['payment_processor_id'] = $token_record['payment_processor_id'];
  }

  // Make new recurring record if necessary
  $initial_recurring = ($msg['recurring'] && !$msg['contribution_recur_id']);
  if ($initial_recurring) {
    $recurring_transaction_id = "";
    if ($msg['subscr_id']) {
      // FIXME: level across processors
      if ($msg['gateway'] === 'globalcollect') {
        if (FALSE === strpos($msg['subscr_id'], 'RECURRING GLOBALCOLLECT')) {
          $msg['subscr_id'] = "RECURRING GLOBALCOLLECT {$msg['subscr_id']}";
        }
      }
      $recurring_transaction_id = $msg['subscr_id'];
    }

    if (!empty($msg['recurring_payment_token'])) {
      $recurring_transaction_id = $msg['gateway_txn_id'];
    }

    watchdog('queue2civicrm_import', 'Attempting to insert new recurring subscription: ' . $recurring_transaction_id, NULL, WATCHDOG_INFO);
    $timer->startImportTimer("message_contribution_recur_insert");
    wmf_civicrm_message_contribution_recur_insert($msg, $msg['contact_id'], $recurring_transaction_id);
    $timer->endImportTimer("message_contribution_recur_insert");
    $recur_record = wmf_civicrm_get_gateway_subscription($msg['gateway'], $recurring_transaction_id);
    $msg['contribution_recur_id'] = $recur_record->id;
  }

  // Look up soft credit contact.
  if (!empty($msg['soft_credit_to'])) {

    $soft_credit_contact = civicrm_api3('Contact', 'Get', [
      'organization_name' => $msg['soft_credit_to'],
      'contact_type' => 'Organization',
      'sequential' => 1,
      'return' => 'id',
    ]);
    if ($soft_credit_contact['count'] !== 1) {
      throw new WMFException(
        WMFException::INVALID_MESSAGE,
        "Bad soft credit target, [${msg['soft_credit_to']}]"
      );
    }
    # FIXME: awkward to have the two fields.
    $msg['soft_credit_to_id'] = $soft_credit_contact['id'];
  }

  // Set no_thank_you to recurring if its the 2nd+ of any recurring payments
  if (!$initial_recurring && $msg['contribution_recur_id']) {
    //check for previous recurring payments
    $recurring_check = civicrm_api3('Contribution', 'getcount', [
      'contribution_recur_id' => $msg['contribution_recur_id'],
    ]);

    //If there's at least 1, set no_thank_you to recurring
    if ($recurring_check >= 1) {
      $msg['no_thank_you'] = 'recurring';
    }
  }

  // Insert the contribution record.
  $timer->startImportTimer("message_contribution_insert");
  $contribution = _wmf_civicrm_message_contribution_insert($msg);
  $timer->endImportTimer("message_contribution_insert");

  if (wmf_civicrm_should_update_contribution_tracking($msg, $initial_recurring)) {
    // Map the tracking record to the CiviCRM contribution
    // @FIXME what do we do if this returns false?  nothing at the moment...
    wmf_civicrm_message_update_contribution_tracking($msg, $contribution);
  }

  if (!empty($msg['notes'])) {
    // TODO: Handle failure.
    civicrm_api3("Note", "Create", [
      'entity_table' => 'civicrm_contact',
      'entity_id' => $msg['contact_id'],
      'note' => $msg['notes'],
    ]);
  }

  // Need to get this full name before ending the timer
  $uniqueTimerName = $timer->getUniqueNamespace($overallTimerName);
  $timer->endImportTimer($overallTimerName);

  DonationStatsCollector::getInstance()
    ->addStat("message_import_timers", $timer->getTimerDiff($uniqueTimerName));

  return $contribution;
}

/**
 * Checks for contact ID and hash match.  If mismatched unset
 * ID and hash so message is treated as a new contact.
 *
 * @param $msg
 * @param $matchEmail
 *
 * @throws CiviCRM_API3_Exception
 */
function wmf_civicrm_set_null_id_on_hash_mismatch(&$msg, $matchEmail = FALSE) {
  $existing = civicrm_api3('Contact', 'getSingle', [
    'id' => $msg['contact_id'],
    'return' => ['hash', 'email'],
  ]);

  if (!$existing || $existing['hash'] !== $msg['contact_hash'] ||
    ($existing['email'] !== $msg['email'] && $matchEmail)) {
    $msg['contact_id'] = NULL;
    unset($msg['contact_hash']);
  }
}

/**
 * Create a contact from the $msg array and set the contact_id.
 *
 * @param array $msg
 *   Normalised wmf msg array.
 *
 * @throws \Civi\WMFException\WMFException
 */
function wmf_civicrm_message_create_contact(&$msg) {
  $contact = wmf_civicrm_message_contact_insert($msg);
  $msg['contact_id'] = $contact['id'];
}

/**
 * Insert the contribution record.
 *
 * This is an internal method, you must be looking for
 *
 * @param array $msg
 *
 * @return array
 *
 * @throws \Civi\WMFException\WMFException
 * @see wmf_civicrm_contribution_message_import.
 *
 */
function _wmf_civicrm_message_contribution_insert($msg) {
  $transaction = WmfTransaction::from_message($msg);
  $trxn_id = $transaction->get_unique_id();


  $contribution = [
    'contact_id' => $msg['contact_id'],
    'total_amount' => $msg['gross'],
    // CiviCRM supports financial_type_id rather than contribution_type_id now. Handling both here
    // is a first step to deprecating contribution_type_id.
    'financial_type_id' => empty($msg['financial_type_id']) ? $msg['contribution_type_id'] : $msg['financial_type_id'],
    'payment_instrument_id' => $msg['payment_instrument_id'],
    'fee_amount' => $msg['fee'],
    'net_amount' => $msg['net'],
    'trxn_id' => $trxn_id,
    'receive_date' => wmf_common_date_unix_to_civicrm($msg['date']),
    'currency' => $msg['currency'],
    'source' => $msg['original_currency'] . ' ' . $msg['original_gross'],
    'contribution_recur_id' => $msg['contribution_recur_id'],
    'check_number' => $msg['check_number'],
    'soft_credit_to' => $msg['soft_credit_to_id'],
    'debug' => TRUE,
  ];

  // Add the thank you date when it exists and is not null (e.g.: we're importing from a check)
  if (array_key_exists('thankyou_date', $msg) && is_numeric($msg['thankyou_date'])) {
    $contribution['thankyou_date'] = wmf_common_date_unix_to_civicrm($msg['thankyou_date']);
  }

  // Store the identifier we generated on payments
  $invoice_fields = ['invoice_id', 'order_id'];
  foreach ($invoice_fields as $invoice_field) {
    if (!empty($msg[$invoice_field])) {
      $contribution['invoice_id'] = $msg[$invoice_field];
      // The invoice_id column has a unique constraint
      if ($msg['recurring']) {
        $contribution['invoice_id'] .= '|recur-' . UtcDate::getUtcTimestamp();
      }
      break;
    }
  }

  /**
   *  Hopefully the Civi API will eventually handle custom fields in the
   *  above "Create" call.
   *
   * NOTE: the custom field for "Gift_Information" indicates that check number is stored here.  It is not.
   */
  $custom_field_defaults = [
    'gateway_account' => '',
  ];
  if ($contribution['total_amount'] >= 1000) {
    $custom_field_defaults['Campaign'] = 'Benefactor Gift';
  }

  // Legacy field names which do not match the message field names
  $custom_name_mangle = [
    'direct_mail_appeal' => 'Appeal',
    'gift_source' => 'Campaign',
    'postmark_date' => 'Postmark_Date',
    'restrictions' => 'Fund',
    'stock_description' => 'Description_of_Stock',
    'gateway_status' => 'gateway_status_raw',
  ];

  // Custom fields with names that match the message fields.
  $custom_name_passthrough = [
    'gateway_account',
    'import_batch_number',
    'no_thank_you',
    'source_name',
    'source_type',
    'source_host',
    'source_run_id',
    'source_version',
    'source_enqueued_time',
  ];

  $custom_fields = $custom_name_mangle
    + array_combine($custom_name_passthrough, $custom_name_passthrough);

  $custom_vars = [];
  foreach ($custom_fields as $msg_key => $custom_key) {
    if (array_key_exists($msg_key, $msg)) {
      $custom_vars[$custom_key] = $msg[$msg_key];
    }
  }

  // Transform any unix timestamps into an unambiguous MySQL datetime literal.
  // If the date is already in mysql format, it will be 14 characters long:
  // YYYYmmddHHiiss :-/
  $date_mangle = [
    'Postmark_Date',
    'source_enqueued_time',
  ];
  foreach ($date_mangle as $field) {
    if (array_key_exists($field, $custom_vars)
      && is_numeric($custom_vars[$field])
      && strlen($custom_vars[$field]) < 14
    ) {
      $custom_vars[$field] = wmf_common_date_unix_to_sql($custom_vars[$field]);
    }
  }

  $custom_vars += $custom_field_defaults;

  $custom_name_mapping = wmf_civicrm_get_custom_field_map(array_keys($custom_vars));
  foreach ($custom_name_mapping as $readable => $machined) {
    if (array_key_exists($readable, $custom_vars)) {
      $contribution[$machined] = $custom_vars[$readable];
    }
  }

  watchdog('wmf_civicrm', 'Contribution array for civicrm_contribution_add(): ' . print_r($contribution, TRUE), NULL, WATCHDOG_DEBUG);
  try {
    $contribution_result = civicrm_api3('Contribution', 'Create', array_merge($contribution, ['skipRecentView' => 1]));
    watchdog('wmf_civicrm', "Successfully created contribution {$contribution_result['id']} for contact  {$contribution['contact_id']}", NULL, WATCHDOG_DEBUG);
  }
  catch (CiviCRM_API3_Exception $e) {
    watchdog('wmf_civicrm', 'Error inserting contribution: ' . $e->getMessage() . ' ' . $e->getCode(), NULL, WATCHDOG_INFO);
    // Constraint violations occur when data is rolled back to resolve a deadlock.
    if (in_array($e->getErrorCode(), ['constraint violation', 'deadlock', 'database lock timeout'], TRUE)) {
      throw new WMFException(WMFException::DATABASE_CONTENTION, 'Contribution not saved due to database load', $e->getExtraParams());
    }

    $duplicate = 0;

    try {
      if (array_key_exists('invoice_id', $contribution)) {
        watchdog('wmf_civicrm', 'Checking for duplicate on invoice ID ' . $contribution['invoice_id'], NULL, WATCHDOG_INFO);
        $invoice_id = $contribution['invoice_id'];
        $duplicate = civicrm_api3("Contribution", "getcount", ["invoice_id" => $invoice_id]);
      }
      if ($duplicate > 0) {
        // We can't retry the insert here because the original API
        // error has marked the Civi transaction for rollback.
        // This WMFException code has special handling in the
        // WmfQueueConsumer that will alter the invoice_id before
        // re-queueing the message.
        throw new WMFException(
          WMFException::DUPLICATE_INVOICE,
          'Duplicate invoice ID, should modify and retry',
          $e->getExtraParams()
        );
      }
      else {
        throw new WMFException(
          WMFException::INVALID_MESSAGE,
          'Cannot create contribution, civi error!',
          $e->getExtraParams()
        );
      }
    }
    catch (CiviCRM_API3_Exception $eInner) {
      throw new WMFException(
        WMFException::INVALID_MESSAGE,
        'Cannot create contribution, civi error!',
        $eInner->getExtraParams()
      );
    }
  }

  // Create any required tags on the contribution
  if ($msg['contribution_tags']) {
    $supported_tags = array_flip(CRM_Core_BAO_Tag::getTags('civicrm_contribution'));
    $stacked_ex = [];
    foreach (array_unique($msg['contribution_tags']) as $tag) {
      try {
        $tag_result = civicrm_api3("EntityTag", "Create", [
          'entity_table' => 'civicrm_contribution',
          'entity_id' => $contribution_result['id'],
          'tag_id' => $supported_tags[$tag],
        ]);
      }
      catch (CiviCRM_API3_Exception $ex) {
        $stacked_ex[] = "Failed to add tag {$tag} to contribution ID {$contribution_result['id']}. Error: " . $ex->getMessage();
      }
    }
    if (!empty($stacked_ex)) {
      throw new WMFException(
        WMFException::IMPORT_CONTRIB,
        implode("\n", $stacked_ex)
      );
    }
  }

  return $contribution_result['values'][$contribution_result['id']];
}

/**
 * Translate option value to CiviCRM id.
 *
 * Note that in general we do not need to translate these names to ids as the
 * CiviCRM api does that. This allows us to add additional error checking,
 * although possibly for not much gain.
 *
 * @param string $type
 * @param $name
 *
 * @return bool
 */
function wmf_civicrm_get_civi_id($type, $name) {
  static $civi_ids = [];
  $params = ['name' => $name];
  $dummy = [];

  if (array_key_exists($type, $civi_ids) && array_key_exists($name, $civi_ids[$type])) {
    return $civi_ids[$type][$name];
  }

  switch ($type) {
    case 'contribution_type_id':
    case 'financial_type_id':
      //fixme: This is probably the upside-down way to do it. Really ought to go through the API.
      //
      $result = CRM_Financial_BAO_FinancialType::retrieve($params, $dummy);
      if (!is_null($result)) {
        $civi_ids[$type][$name] = $result->id;
        watchdog('wmf_civicrm', "Found id for contribution_type $name: " . $civi_ids[$type][$name]);
      }
      else {
        //make it. Or, throw an error here. Either way.
        //XXX nonono
        watchdog('wmf_civicrm', "Id for contribution_type $name not found. Creating...");
        $params['description'] = '';
        $params['accounting_code'] = strtoupper($name);
        $params['is_deductible'] = 1;
        $params['is_active'] = 1;
        $result = CRM_Financial_BAO_FinancialType::add($params, $dummy);
        $civi_ids[$type][$name] = $result->id;
        watchdog('wmf_civicrm', "New id for contribution_type $name :" . $civi_ids[$type][$name]);
      }
      $id = $civi_ids[$type][$name];
      if (empty($id)) {
        throw new WMFException(WMFException::CIVI_CONFIG,
          t('Contribution Type "!name" not found!', ['!name' => $name])
        );
      }
      return $id;
    case 'payment_instrument_id':
      $instruments = civicrm_api3('Contribution', 'getoptions', ['field' => 'payment_instrument_id']);
      return array_search($name, $instruments['values']);
      break;

    default:
      throw new WMFException(WMFException::CIVI_CONFIG, t("Civi lookup for type '!type' not implemented", ["!type" => $type]));
  }
}

/**
 * Normalize contribution amounts
 *
 * Do exchange rate conversions and set appropriate fields for CiviCRM
 * based on information contained in the message.
 *
 * Upon exiting this function, the message is guaranteed to have these fields:
 *    currency - settlement currency
 *    original_currency - currency remitted by the donor
 *    gross - settled total amount
 *    original_gross - remitted amount in original currency
 *    fee - processor fees, when available
 *    net - gross less fees
 *
 * @param $msg
 *
 * @return array
 * @throws \Civi\WMFException\WMFException
 */
function wmf_civicrm_normalize_contribution_amounts($msg) {
  $msg = wmf_civicrm_format_currency_fields($msg);

  // If there is anything fishy about the amount...
  if ((empty($msg['gross']) or empty($msg['currency']))
    and (empty($msg['original_gross']) or empty($msg['original_currency']))
  ) {
    // just... don't
    watchdog('wmf_civicrm', 'Not freaking out about non-monetary message.',
      NULL, WATCHDOG_INFO);
    return $msg;
  }

  if (empty($msg['original_currency']) && empty($msg['original_gross'])) {
    $msg['original_currency'] = $msg['currency'];
    $msg['original_gross'] = $msg['gross'];
  }

  $validFee = array_key_exists('fee', $msg) && is_numeric($msg['fee']);
  $validNet = array_key_exists('net', $msg) && is_numeric($msg['net']);
  if (!$validFee && !$validNet) {
    $msg['fee'] = '0.00';
    $msg['net'] = $msg['gross'];
  }
  elseif ($validNet && !$validFee) {
    $msg['fee'] = $msg['gross'] - $msg['net'];
  }
  elseif ($validFee && !$validNet) {
    $msg['net'] = $msg['gross'] - $msg['fee'];
  }

  $settlement_currency = wmf_civicrm_get_settlement_currency($msg);
  if ($msg['currency'] !== $settlement_currency) {
    watchdog('wmf_civicrm', 'Converting to settlement currency: %old -> %new',
      ['%old' => $msg['currency'], '%new' => $settlement_currency],
      WATCHDOG_INFO);
    try {
      $settlement_convert = exchange_rate_convert($msg['original_currency'], 1, $msg['date']) / exchange_rate_convert($settlement_currency, 1, $msg['date']);
    }
    catch (ExchangeRatesException $ex) {
      throw new WMFException(WMFException::INVALID_MESSAGE, "UNKNOWN_CURRENCY: '{$msg['original_currency']}': " . $ex->getMessage());
    }

    // Do exchange rate conversion
    $msg['currency'] = $settlement_currency;
    $msg['fee'] = $msg['fee'] * $settlement_convert;
    $msg['gross'] = $msg['gross'] * $settlement_convert;
    $msg['net'] = $msg['net'] * $settlement_convert;
  }

  $msg['fee'] = CurrencyRoundingHelper::round($msg['fee'], $msg['currency']);
  $msg['gross'] = CurrencyRoundingHelper::round($msg['gross'], $msg['currency']);
  $msg['net'] = CurrencyRoundingHelper::round($msg['net'], $msg['currency']);

  return $msg;
}

/**
 * Format currency fields in passed array.
 *
 * Currently we are just stripping out commas on the assumption they are a
 * thousand separator and unhelpful.
 *
 * @param array $values
 * @param array $currencyFields
 *
 * @return array
 */
function wmf_civicrm_format_currency_fields($values, $currencyFields = [
  'gross',
  'fee',
  'net',
]) {
  foreach ($currencyFields as $field) {
    if (isset($values[$field])) {
      $values[$field] = str_replace(',', '', $values[$field]);
    }
  }
  return $values;
}

function wmf_civicrm_verify_message_and_stage($msg) {
  $msg = wmf_civicrm_normalize_msg($msg);

  $required = [
    'gross',
    'currency',
    'gateway',
    'gateway_txn_id',
  ];

  $err = [];
  foreach ($required as $key) {
    if (empty($msg[$key])) {
      $err[] = "Required Field '$key' not found in message.";
    }
  }

  if (floatval($msg['net']) <= 0 || floatval($msg['gross']) <= 0) {
    $err[] = "Positive amount required.";
  }

  if (!empty($err)) {
    throw new WMFException(WMFException::CIVI_REQ_FIELD, $err);
  }

  $max_lengths = [
    'check_number' => 255,
    'city' => 64,
    'email' => 254,
    'first_name' => 64,
    'last_name' => 64,
    'middle_name' => 64,
    'organization_name' => 128,
    'postal_code' => 64,
    'street_address' => 96,
    'supplemental_address_1' => 96,
    'supplemental_address_2' => 96,
  ];
  $truncate_tags = [
    'postal_code' => 'AddressTruncated',
    'street_address' => 'AddressTruncated',
    'supplemental_address_1' => 'AddressTruncated',
    'supplemental_address_2' => 'AddressTruncated',
    'city' => 'AddressTruncated',
  ];
  foreach ($max_lengths as $key => $limit) {
    if (strlen($msg[$key]) > $limit) {
      if (array_key_exists($key, $truncate_tags)) {
        watchdog(
          'wmf_civicrm',
          'Truncating key !key to !len chars. Original: "!val". Applying tag !tag',
          [
            '!key' => $key,
            '!len' => $limit,
            '!val' => $msg[$key],
            '!tag' => $truncate_tags[$key],
          ],
          WATCHDOG_WARNING
        );
        $msg[$key] = mb_substr($msg[$key], 0, $limit);
        $msg['contact_tags'][] = $truncate_tags[$key];
      }
      else {
        throw new WMFException(WMFException::INVALID_MESSAGE, "Field '{$key}' is too long.");
      }
    }
  }

  //Now check to make sure this isn't going to be a duplicate message for this gateway.
  wmf_civicrm_check_for_duplicates($msg);
  return $msg;
}

/**
 * Throw an exception if a contribution already exists
 *
 * @param array $message
 *
 * @throws \Civi\WMFException\WMFException
 */
function wmf_civicrm_check_for_duplicates(array $message) {
  if (
    empty($message['gateway']) ||
    empty($message['gateway_txn_id'])
  ) {
    throw new WMFException(WMFException::CIVI_REQ_FIELD, 'Missing required field');
  }

  if (CRM_Core_DAO::singleValueQuery(
    'SELECT count(*)
    FROM wmf_contribution_extra cx
    WHERE gateway = %1 AND gateway_txn_id = %2', [
    1 => [$message['gateway'], 'String'],
    2 => [$message['gateway_txn_id'], 'String'],
  ])) {
    throw new WMFException(
      WMFException::DUPLICATE_CONTRIBUTION,
      'Contribution already exists. Ignoring message.'
    );
  }
}

/**
 * Insert the contact record
 *
 * Serves as a standard way for message processors to handle contact
 * insertion.  By passing a contact id, a contact can be updated.
 *
 * @param array $msg
 * @param int $contact_id
 *
 * @return array
 */
function wmf_civicrm_message_contact_insert($msg, $contact_id = NULL) {
  return WMFContact::save(FALSE)
    ->setContactID($contact_id)
    ->setMessage($msg)
    ->execute()->first();
}

/**
 * Check if the language string exists.
 *
 * @param string $languageAbbreviation
 *
 * @return bool
 */
function wmf_civicrm_check_language_exists($languageAbbreviation) {
  $languages = wmf_civicrm_get_valid_languages();
  return !empty($languages[$languageAbbreviation]);
}

/**
 * Get valid languages.
 *
 * @return array
 */
function wmf_civicrm_get_valid_languages() {
  static $languages;
  if (empty($languages)) {
    $available_options = civicrm_api3('Contact', 'getoptions', [
      'field' => 'preferred_language',
    ]);
    $languages = $available_options['values'];
  }
  return $languages;
}

/**
 * Update the contact record
 *
 * Serves as a standard way for message processors to handle contact
 * updates.
 *
 * @param array $msg
 * @param int $contact_id
 *
 * @return array
 */
function wmf_civicrm_message_contact_update($msg, $contact_id) {
  //FIXME: reverse the way these functions delegate.  Or eliminate -_insert.
  $contact = wmf_civicrm_message_contact_insert($msg, $contact_id);
  // Insert the location record
  // This will be duplicated in some cases in the main message_import, but should
  // not have a negative impact. Longer term it should be removed from here in favour of there.
  wmf_civicrm_message_location_update($msg, $contact);
  return $contact;
}

/**
 * Update the location record
 *
 * Serves as a standard way for message processors to handle location
 * updates.
 *
 * @param array $msg
 * @param array $contact
 */
function wmf_civicrm_message_location_update($msg, $contact) {
  wmf_civicrm_message_email_update($msg, $contact['id']);
  wmf_civicrm_message_address_update($msg, $contact['id']);
}

/**
 * Updates the email for a contact.
 *
 * @param array $msg
 * @param int $contact_id
 *
 * @throws \Civi\WMFException\WMFException
 */
function wmf_civicrm_message_email_update($msg, $contact_id) {
  if (empty($msg['email'])) {
    return;
  }

  try {
    $loc_type_id = isset($msg['email_location_type_id']) ? $msg['email_location_type_id'] : wmf_civicrm_get_default_location_type_id();
    if (!is_numeric($loc_type_id)) {
      $loc_type_id = CRM_Core_PseudoConstant::getKey('CRM_Core_BAO_Email', 'location_type_id', $loc_type_id);
    }
    $isPrimary = isset($msg['email_location_type_id']) ? 0 : 1;

    $emailParams = [
      'email' => $msg['email'],
      'is_primary' => $isPrimary,
      'is_billing' => $isPrimary,
      'contact_id' => $contact_id,
    ];

    // Look up contact's existing email to get the id and to determine
    // if the email has changed.
    $existingEmails = civicrm_api3("Email", 'get', [
      'return' => ['location_type_id', 'email', 'is_primary'],
      'contact_id' => $contact_id,
      'sequential' => 1,
      'options' => ['sort' => 'is_primary'],
    ])['values'];

    if (!empty($existingEmails)) {
      foreach ($existingEmails as $prospectiveEmail) {
        // We will update an existing one if it has the same email or the same
        // location type it, preferring same email+location type id over
        // same email over same location type id.
        if ($prospectiveEmail['email'] === $msg['email']) {
          if (empty($existingEmail)
            || $existingEmail['email'] !== $msg['email']
            || $prospectiveEmail['location_type_id'] == $loc_type_id
          ) {
            $existingEmail = $prospectiveEmail;
          }
        }
        elseif ($prospectiveEmail['location_type_id'] == $loc_type_id) {
          if (empty($existingEmail)) {
            $existingEmail = $prospectiveEmail;
          }
        }
      }

      if (!empty($existingEmail)) {
        if (strtolower($existingEmail['email']) === strtolower($msg['email'])) {
          // If we have the email already it still may make sense
          // to update to primary if this is (implicitly) an update of
          // primary email
          if (!$isPrimary || $existingEmail['is_primary']) {
            return;
          }
        }
        $emailParams['id'] = $existingEmail['id'];
        $emailParams['on_hold'] = 0;
      }
    }

    civicrm_api3('Email', 'create', $emailParams);
  }
  catch (CiviCRM_API3_Exception $e) {
    // Constraint violations occur when data is rolled back to resolve a deadlock.
    $code = (in_array($e->getErrorCode(), ['constraint violation', 'deadlock', 'database lock timeout'])) ? WMFException::DATABASE_CONTENTION : WMFException::IMPORT_CONTACT;
    throw new WMFException($code, "Couldn't store email for the contact.", $e->getExtraParams());
  }
}

/**
 * At a minimum, we need a country to store an address
 *
 * @param array $address
 *
 * @return bool
 */
function wmf_civicrm_is_address_valid($address) {
  if (!empty($address['country_id'])) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Update address for a contact.
 *
 * @param array $msg
 * @param int $contact_id
 *
 * @throws \Civi\WMFException\WMFException
 */
function wmf_civicrm_message_address_update($msg, $contact_id) {

  // CiviCRM does a DB lookup instead of checking the pseudoconstant.
  // @todo fix Civi to use the pseudoconstant.
  $country_id = wmf_civicrm_get_country_id($msg['country']);
  $address = [
    'is_primary' => 1,
    'street_address' => $msg['street_address'],
    'supplemental_address_1' => !empty($msg['supplemental_address_1']) ? $msg['supplemental_address_1'] : '',
    'city' => $msg['city'],
    'postal_code' => $msg['postal_code'],
    'country_id' => $country_id,
    'country' => $msg['country'],
    'is_billing' => 1,
    'debug' => 1,
  ];
  if (!empty($msg['state_province'])) {
    $address['state_province'] = $msg['state_province'];
    $address['state_province_id'] = wmf_civicrm_get_state_id($country_id, $msg['state_province']);
  }
  if (!wmf_civicrm_is_address_valid($address)) {
    return;
  }

  $address_params = [
    'contact_id' => $contact_id,
    'location_type_id' => wmf_civicrm_get_default_location_type_id(),
    'values' => [$address],
  ];

  try {
    civicrm_api3('Address', 'replace', $address_params);
  }
  catch (CiviCRM_API3_Exception $e) {
    // Constraint violations occur when data is rolled back to resolve a deadlock.
    $code = $e->getErrorCode() === 'constraint violation' ? WMFException::DATABASE_CONTENTION : WMFException::IMPORT_CONTACT;
    throw new WMFException($code, "Couldn't store address for the contact.", $e->getExtraParams());
  }
}

/**
 * Insert a new address for a contact.
 *
 * If updating or unsure use the marginally slower update function.
 *
 * @param array $msg
 * @param int $contact_id
 *
 * @throws \Civi\WMFException\WMFException
 */
function wmf_civicrm_message_address_insert($msg, $contact_id) {
  $loc_type_id = wmf_civicrm_get_default_location_type_id();

  // We can do these lookups a bit more efficiently than Civi
  $country_id = wmf_civicrm_get_country_id($msg['country']);

  $address_params = [
    'contact_id' => $contact_id,
    'location_type_id' => $loc_type_id,
    'is_primary' => 1,
    'street_address' => $msg['street_address'],
    'supplemental_address_1' => !empty($msg['supplemental_address_1']) ? $msg['supplemental_address_1'] : NULL,
    'city' => $msg['city'],
    'postal_code' => $msg['postal_code'],
    'country_id' => $country_id,
    'country' => $msg['country'],
    'fix_address' => isset($msg['fix_address']) ? $msg['fix_address'] : FALSE,
    'is_billing' => 1,
    'version' => 3,
  ];

  if (!empty($msg['state_province'])) {
    $address_params['state_province'] = $msg['state_province'];
    $address_params['state_province_id'] = wmf_civicrm_get_state_id($country_id, $msg['state_province']);
  }

  if (!wmf_civicrm_is_address_valid($address_params)) {
    return;
  }
  if (WmfDatabase::isNativeTxnRolledBack()) {
    throw new WMFException(WMFException::IMPORT_CONTACT, "Native txn rolled back before inserting address");
  }
  try {
    // @todo - remove this from here & do in pre like this
    // https://issues.civicrm.org/jira/browse/CRM-21786
    // or don't pass fix_address= 0 (but we need to understand performance reasons
    // why we haven't done that.
    CRM_Core_BAO_Address::addGeocoderData($address_params);
    civicrm_api3('Address', 'Create', $address_params);
  }
  catch (CiviCRM_API3_Exception $ex) {
    throw new WMFException(
      WMFException::IMPORT_CONTACT,
      'Couldn\'t store address for the contact: ' .
      $ex->getMessage()
    );
  }

  if (WmfDatabase::isNativeTxnRolledBack()) {
    throw new WMFException(WMFException::IMPORT_CONTACT, "Native txn rolled back after inserting address");
  }
}

function wmf_civicrm_get_default_location_type_id() {
  $default_location_type = CRM_Core_BAO_LocationType::getDefault();
  return $default_location_type->id;
}

function wmf_civicrm_get_country_id($raw) {
  // ISO code, or outside chance this could be a lang_COUNTRY pair
  if (preg_match('/^([a-z]+_)?([A-Z]{2})$/', $raw, $matches)) {
    $code = $matches[2];

    $iso_cache = CRM_Core_PseudoConstant::countryIsoCode();
    $id = array_search(strtoupper($code), $iso_cache);
    if ($id !== FALSE) {
      return $id;
    }
  }
  else {
    $country_cache = CRM_Core_PseudoConstant::country(FALSE, FALSE);
    $id = array_search($raw, $country_cache);
    if ($id !== FALSE) {
      return $id;
    }
  }

  watchdog('wmf_civicrm',
    "Cannot find country: [%txt]",
    ['%txt' => $raw],
    WATCHDOG_NOTICE
  );
  return FALSE;
}

/**
 * Get the state id for the named state in the given country.
 *
 * @param int $country_id
 * @param string $state
 *
 * @return int|null
 */
function wmf_civicrm_get_state_id($country_id, $state) {
  $stateID = CRM_Core_DAO::singleValueQuery('
  SELECT id
FROM civicrm_state_province s
WHERE
    s.country_id = %1
    AND ( s.abbreviation = %2 OR s.name = %3)
  ', [
    1 => [$country_id, 'String'],
    2 => [$state, 'String'],
    3 => [$state, 'String'],
  ]);
  if ($stateID) {
    return (int) $stateID;
  }

  watchdog('wmf_civicrm',
    "Cannot find state: [%state] (country %country)",
    ['%state' => $state, '%country' => $country_id],
    WATCHDOG_NOTICE
  );
}


/**
 * Normalize the queued message
 *
 * Decodes the message and updates some of the message fields in ways
 * that are consistent with how we need to insert data into CiviCRM.
 * This should be useful by other modules processing contribution messages
 * out of the queue.
 *
 * TODO: Split this into a transformation chain.
 *
 * @param mixed $msg
 *
 * @return array
 *
 * @throws \Civi\WMFException\WMFException
 * @throws \CiviCRM_API3_Exception
 */
function wmf_civicrm_normalize_msg($msg) {
  // Decode the message body.
  if (!is_array($msg)) {
    $msg = json_decode($msg->body, TRUE);
  }

  $trim_strings = function ($input) {
    if (!is_string($input)) {
      return $input;
    }
    return trim($input);
  };

  $msg = array_map($trim_strings, $msg);

  // defaults: Keys that aren't actually required, but which will cause some
  // portion of the code to complain if they don't exist (even if they're
  // blank). Note that defaults for name fields are applied a bit further on,
  // after any full_name is parsed
  // FIXME: don't use defaults.  Access msg properties using a functional interface.
  $defaults = [
    // FIXME: Default to now. If you can think of a better thing to do in
    // the name of historical exchange rates.  Searching ts and
    // source_enqueued_time is a good start.
    'date' => time(),
    'organization_name' => '',
    'email' => '',
    'street_address' => '',
    'supplemental_address_1' => '',
    'supplemental_address_2' => '',
    'city' => '',
    'country' => '',
    'state_province' => '',
    'postal_code' => '',
    'postmark_date' => NULL,
    'check_number' => NULL,
    'thankyou_date' => NULL,
    'recurring' => NULL,
    'utm_campaign' => NULL,
    'contact_id' => NULL,
    'contribution_recur_id' => NULL,
    'effort_id' => NULL,
    'subscr_id' => NULL,
    'contact_groups' => [],
    'contact_tags' => [],
    'contribution_tags' => [],
    'soft_credit_to' => NULL,
    'soft_credit_to_id' => NULL,
  ];
  $msg = $msg + $defaults;

  wmf_civicrm_removeKnownBadStringsFromAddressFields($msg);

  if (empty($msg['contribution_type_id'])) {
    if (empty($msg['contribution_type'])) {
      $msg['contribution_type'] = 'cash';
    }
    $msg['contribution_type_id'] = wmf_civicrm_get_civi_id('contribution_type_id', $msg['contribution_type']);
  }

  if (empty($msg['payment_instrument_id'])) {
    if (empty($msg['payment_instrument'])) {
      $msg['payment_instrument'] = FinanceInstrument::getPaymentInstrument($msg);

      if (!$msg['payment_instrument']) {
        throw new WMFException(WMFException::INVALID_MESSAGE, 'No payment instrument specified');
      }
    }
    // CiviCRM does not require us to do this translation. It will do the same thing
    // if we don't & through a mandatory_missing error.
    $msg['payment_instrument_id'] = wmf_civicrm_get_civi_id('payment_instrument_id', $msg['payment_instrument']);
  }
  if (!$msg['payment_instrument_id']) {
    throw new WMFException(WMFException::INVALID_MESSAGE, "No payment type found for message.");
  }

  // Convert times to Unix timestamps.
  if (!is_numeric($msg['date'])) {
    $msg['date'] = wmf_common_date_parse_string($msg['date']);
  }
  // if all else fails, fall back to now.
  if (empty($msg['date'])) {
    $msg['date'] = time();
  }

  // if we're missing a contrib id, insert new record to the table
  // this can happen if a user somehow makes a trxn from outside the normal workflow
  // Historically checks have been  ignored as they are completely offline.
  // T146295 has raised some questions about this.
  // code change respects previous recognition of 'payment_method' as being a little bit magic,
  // but also assumes that if you are setting utm_medium or utm_source in your import you intend them to be recorded.
  if (!isset($msg['contribution_tracking_id'])) {
    if (
      (!empty($msg['utm_medium']) || !empty($msg['utm_source']))
      || (array_key_exists('payment_method', $msg) && strtoupper($msg['payment_method']) != "CHECK")
    ) {

      watchdog('wmf_civicrm', 'Contribution missing contribution_tracking_id', [], WATCHDOG_DEBUG);

      $source = isset($msg['utm_source']) ? $msg['utm_source'] : '..' . $msg['payment_method'];
      $medium = isset($msg['utm_medium']) ? $msg['utm_medium'] : 'civicrm';
      $campaign = isset($msg['utm_campaign']) ? $msg['utm_campaign'] : NULL;

      $tracking = [
        'utm_source' => $source,
        'utm_medium' => $medium,
        'utm_campaign' => $campaign,
        'ts' => wmf_common_date_unix_to_sql($msg['date']),
      ];
      if (
        !empty($msg['country']) &&
        array_search($msg['country'], CRM_Core_PseudoConstant::countryIsoCode()) !== FALSE
      ) {
        $tracking['country'] = $msg['country'];
      }
      try {
        $contribution_tracking_id = wmf_civicrm_insert_contribution_tracking($tracking);
      }
      catch (Exception $e) {
        throw new WMFException(WMFException::INVALID_MESSAGE, $e->getMessage());
      }
      watchdog('wmf_civicrm', 'Newly inserted contribution tracking id: @id', ['@id' => $contribution_tracking_id], WATCHDOG_DEBUG);
      $msg['contribution_tracking_id'] = $contribution_tracking_id;
    }
  }

  if ($msg['recurring'] and !isset($msg['start_date'])) {
    $msg['start_date'] = $msg['date'];
    $msg['create_date'] = $msg['date'];
  }

  if ($msg['recurring'] and !$msg['subscr_id']) {
    if ($msg['gateway'] == 'globalcollect') {
      // Well randomly grab an ID, of course :-/
      $msg['subscr_id'] = $msg['gateway_txn_id'];
    }
    else {
      if ($msg['gateway'] == 'amazon') {
        // Amazon 'subscription id' is the Billing Agreement ID, which
        // is a substring of the Capture ID we record as 'gateway_txn_id'
        $msg['subscr_id'] = substr($msg['gateway_txn_id'], 0, 19);
      }
    }
  }

  if (!empty($msg['thankyou_date'])) {
    if (!is_numeric($msg['thankyou_date'])) {
      $unix_time = wmf_common_date_parse_string($msg['thankyou_date']);
      if ($unix_time !== FALSE) {
        $msg['thankyou_date'] = $unix_time;
      }
      else {
        watchdog('wmf_civicrm', 'Could not parse thankyou date: @date from @id', [
          '@date' => $msg['thankyou_date'],
          '@id' => $msg['contribution_tracking_id'],
        ], WATCHDOG_DEBUG);
        unset($msg['thankyou_date']);
      }
    }
  }

  if (!empty($msg['full_name']) && (empty($msg['first_name']) || empty($msg['last_name']))) {
    // Parse name parts into fields if we have the full name and the name parts are
    // not otherwise specified.
    $parsed = Name::parse(FALSE)
      ->setNames([$msg['full_name']])
      ->execute()->first();
    $msg = array_merge(array_filter((array) $parsed), $msg);
    $msg['addressee_custom'] = $msg['full_name'];
  }

  if (empty($msg['first_name']) && empty($msg['last_name'])) {
    $msg['first_name'] = 'Anonymous';
    $msg['last_name'] = '';
  }

  // Apply name defaults after full_name has been parsed
  $nameDefaults = ['first_name' => '', 'middle_name' => '', 'last_name' => ''];
  $msg = array_merge($nameDefaults, $msg);

  // Check for special flags
  // TODO: push non-generic cases into database
  if (!empty($msg['utm_campaign'])) {
    $directMailOptions = wmf_civicrm_get_options('Contribution', wmf_civicrm_get_custom_field_name('Appeal'));
    if (!array_key_exists($msg['utm_campaign'], $directMailOptions)) {
      // @todo - I am hoping to replace with an api call but need more clarity as this doesn't work yet.
      // Contribution::getFields(FALSE)->setLoadOptions(TRUE)->->addWhere('field_name', '=', 'Gift_Data:Campaign')
      wmf_civicrm_ensure_option_value_exists(wmf_civicrm_get_direct_mail_field_option_id(), $msg['utm_campaign']);
    }
    $msg['direct_mail_appeal'] = $msg['utm_campaign'];
  }

  if (wmf_civicrm_is_endowment_gift($msg)) {
    $msg['financial_type_id'] = 'Endowment Gift';
  }

  $list_fields = [
    'contact_groups',
    'contact_tags',
    'contribution_tags',
  ];
  foreach ($list_fields as $field) {
    if (is_string($msg[$field])) {
      $msg[$field] = preg_split('/[\s,]+/', $msg[$field], NULL, PREG_SPLIT_NO_EMPTY);
    }
    $msg[$field] = array_unique($msg[$field]);
  }

  // Front-end uses es-419 to represent Latin American Spanish but
  // CiviCRM needs to store it as a 5 char string. We choose es_MX.
  if (isset($msg['language']) && strtolower($msg['language']) == 'es-419') {
    $msg['language'] = 'es_MX';
  }

  // set the correct amount fields/data and do exchange rate conversions.
  $msg = wmf_civicrm_normalize_contribution_amounts($msg);

  return $msg;
}

/**
 * Remove known bad strings from address.
 *
 * This function focuses on specific forms of bad data with high
 * prevalence in the fields we see them in.
 *
 * @param array $msg
 */
function wmf_civicrm_removeKnownBadStringsFromAddressFields(&$msg) {
  // Remove known dummy data.
  if ($msg['street_address'] === 'N0NE PROVIDED') {
    $msg['street_address'] = '';
  }

  $invalidAddressStrings = ['0', 'City/Town', 'NoCity', 'City'];
  foreach (['postal_code', 'city'] as $fieldName) {
    if (in_array($msg[$fieldName], $invalidAddressStrings)) {
      $msg[$fieldName] = '';
    }
  }

  // Filter out unexpected characters from postal codes.
  // This filter should allow through all postal code formats
  // listed here https://github.com/unicode-org/cldr/blob/release-26-0-1/common/supplemental/postalCodeData.xml
  if (isset($msg['postal_code'])) {
    $msg['postal_code'] = preg_replace(
      '/[^a-z0-9\s\-]+/i',
      '',
      $msg['postal_code']
    );
  }

}

/**
 * Get the name value for the option group for direct mail.
 *
 * Note that this function should become obsolete - I wanted to use
 * the code below in the calling function instead but it didn't work and
 * I want to check with Coleman first.
 *
 * Contribution::getFields(FALSE)
 * ->setLoadOptions(TRUE)
 * ->addWhere('field_name', '=', 'Gift_Data:Campaign')
 * ->execute();
 *}
 *
 * @throws \CiviCRM_API3_Exception
 */
function wmf_civicrm_get_direct_mail_field_option_id() {
  if (!isset(\Civi::$statics['wmf-civicrm']['appeal_field_id'])) {
    \Civi::$statics['wmf-civicrm']['appeal_field_id'] = CustomField::get(FALSE)
      ->addWhere('name', '=', 'Appeal')
      ->setSelect(['option_group_id'])
      ->execute()->first()['option_group_id'];
  }
  return \Civi::$statics['wmf-civicrm']['appeal_field_id'];
}

/**
 * Pulls all records in the wmf_contribution_extras table that match the gateway
 * and gateway transaction id.
 *
 * @param string $gateway
 * @param string $gateway_txn_id
 *
 * @return mixed array of result rows, or false if none present.
 * TODO: return empty set rather than false.
 * @throws \Civi\WMFException\WMFException
 */
function wmf_civicrm_get_contributions_from_gateway_id($gateway, $gateway_txn_id) {
  $gateway = strtolower($gateway);
  $query = "SELECT cx.*, cc.* FROM wmf_contribution_extra cx LEFT JOIN civicrm_contribution cc
		ON cc.id = cx.entity_id
		WHERE gateway = %1 AND gateway_txn_id = %2";

  $dao = CRM_Core_DAO::executeQuery($query, [
    1 => [$gateway, 'String'],
    2 => [$gateway_txn_id, 'String'],
  ]);
  return wmf_civicrm_dao_to_list($dao);
}

/**
 * Pulls all records in the wmf_contribution_extras table that match the civicrm
 * contribution id.
 *
 * @param string $contribution_id
 *
 * @return mixed array of result rows, or false if none present.
 * @throws \Civi\WMFException\WMFException
 */
function wmf_civicrm_get_contributions_from_contribution_id($contribution_id) {
  $query = "SELECT cx.*, cc.* FROM wmf_contribution_extra cx LEFT JOIN civicrm_contribution cc
		ON cc.id = cx.entity_id
		WHERE cc.id = %1";

  $dao = CRM_Core_DAO::executeQuery($query, [
    1 => [$contribution_id, 'Integer'],
  ]);
  return wmf_civicrm_dao_to_list($dao);
}

/**
 * Checks to see whether a contribution is refunded or charged back by gateway
 * and gateway transaction id.
 *
 * @param string $gateway
 * @param string $gateway_txn_id
 *
 * @return bool true if contribution exists and is refunded or charged back,
 *   else false
 */
function wmf_civicrm_is_refunded_by_gateway_id($gateway, $gateway_txn_id) {
  $contributions = wmf_civicrm_get_contributions_from_gateway_id($gateway, $gateway_txn_id);
  if (!$contributions) {
    return FALSE;
  }
  return CRM_Contribute_BAO_Contribution::isContributionStatusNegative(
    $contributions[0]['contribution_status_id']
  );
}

function wmf_civicrm_boost_performance() {
  civicrm_initialize();
  $config = CRM_Core_Config::singleton();
  $config->doNotResetCache = 1;
}

function wmf_civicrm_set_no_thank_you($contribution_id, $reason) {
  watchdog('wmf_civicrm', "Preventing thank-you for contribution {$contribution_id} because: {$reason}", [], WATCHDOG_INFO);

  try {
    wmf_civicrm_set_custom_field_values($contribution_id, [
      'no_thank_you' => $reason,
    ]);
  }
  catch (WMFException $ex) {
    watchdog('wmf_civicrm', "Updating with no-thank-you failed with details: {$ex->getMessage()}", [], WATCHDOG_ERROR);
  }
}

/**
 * Sets the civi records to reflect a contribution refund.
 *
 * The original contribution is set to status "Refunded", or "Chargeback" and a
 * negative financial transaction record is created. If the amount refunded
 * does not match a second contribution is added for the balance. The
 * parent_contribution_id custom field is set on the balance contribution to
 * connect it to the parent.
 *
 * Prior to the 4.6 CiviCRM upgrade refunds resulted in second contribution
 * with a negative amount. They were linked to the original through the
 * parent_contribution_id custom field. This was consistent with 4.2 behaviour
 * which was the then current version.
 *
 * 4.3 (included in the 4.6 upgrade) introduced recording multiple financial
 * transactions (payments) against one contribution. In order to adapt to this
 * the markRefund function now records second financial transactions against
 * the original contribution (using the contribution.create api). Discussion
 * about this change is at https://phabricator.wikimedia.org/T116317
 *
 * Some refunds do not have the same $ amount as the original transaction.
 * Prior to Oct 2014 these were seemingly always imported to CiviCRM. Since
 * that time the code was changed to throw an exception when the refund
 * exceeded the original amount, and not import it into CiviCRM. (this does
 * have visibility as it results in fail_mail).
 *
 * The code suggested an intention to record mismatched refunds with a the
 * difference in the custom fields settlement_usd. However, this returns no
 * rows. select * from wmf_contribution_extra WHERE settlement_usd IS NOT NULL
 * LIMIT. It would appear they have been recorded without any record of the
 * discrepancy, or there were none.
 *
 * That issue should be addressed (as a separate issue). The methodology for
 * recording the difference needs to be considered e.g T89437 - preferably in
 * conjunction with getting the appropriate method tested within the core
 * codebase.
 *
 * Note that really core CiviCRM should have a way of handling this and we
 * should work on getting that resolved and adopting it.
 *
 * An earlier iteration of this function reconstructed the value of the
 * original contribution when it had been zero'd or marked as 'RFD'. This
 * appears to be last used several years ago & this handling has been removed
 * now.
 *
 * @param int $contribution_id
 * @param string $refund_type
 *   'refund'|'chargeback' - this will determine the new contribution status.
 * @param bool $refund_completed
 *   It turns out this is only passed in as anything other than true from the
 *   tests (based on grepping). The UI DOES allow for a status of 'Pending
 *   Refund' to be used if this is required from the UI although we don't have
 *   a process around that at this stage.
 * @param string $refund_date
 * @param int $refund_gateway_txn_id
 * @param string $refund_currency
 *   If provided this will be checked against the original contribution and an
 *   exception will be thrown on mismatch.
 * @param float $refund_amount
 *   If provided this will be checked against the original contribution and an
 *   exception will be thrown on mismatch.
 *
 * @return int
 *   The refund's contribution id.
 * @throws Civi\ExchangeException\ExchangeRatesException;
 * @throws \Civi\WMFException\WMFException
 */

function wmf_civicrm_mark_refund(
  $contribution_id,
  $refund_type = 'refund',
  $refund_completed = FALSE,
  $refund_date = NULL,
  $refund_gateway_txn_id = NULL,
  $refund_currency = NULL,
  $refund_amount = NULL
) {
  $amount_scammed = 0;

  try {
    $contribution = civicrm_api3('Contribution', 'getsingle', [
      'id' => $contribution_id,
      'return' => [
        'total_amount',
        'trxn_id',
        'contribution_source',
        'contact_id',
        'receive_date',
        'contribution_status_id',
      ],
    ]);
  }
  catch (CiviCRM_API3_Exception $e) {
    throw new WMFException(
      WMFException::INVALID_MESSAGE, "Could not load contribution: $contribution_id with error " . $e->getMessage()
    );
  }

  // Note that my usual reservation about using BAO functions from custom code is overridden by the
  // caching problems we are hitting in testing (plus the happy knowledge the tests care about this line of
  // code).
  if (CRM_Contribute_BAO_Contribution::isContributionStatusNegative($contribution['contribution_status_id'])
  ) {
    throw new WMFException(WMFException::DUPLICATE_CONTRIBUTION, "Contribution is already refunded: $contribution_id");
  }
  // Deal with any discrepancies in the refunded amount.
  [$original_currency, $original_amount] = explode(" ", $contribution['contribution_source']);

  if ($refund_currency !== NULL) {
    if ($refund_currency != $original_currency) {
      throw new WMFException(WMFException::INVALID_MESSAGE, "Refund was in a different currency.  Freaking out.");
    }
  }
  else {
    $refund_currency = $original_currency;
  }
  if ($refund_date === NULL) {
    $refund_date = time();
  }
  elseif (!is_numeric($refund_date)) {
    $refund_date = wmf_common_date_parse_string($refund_date);
  }

  // TODO: Normalize earlier.
  $validTypes = [
    'refund' => 'Refunded',
    'chargeback' => 'Chargeback',
    'cancel' => 'Cancelled',
    'reversal' => 'Chargeback', // from the audit processor
    'admin_fraud_reversal' => 'Chargeback', // raw IPN code
  ];

  if (!array_key_exists($refund_type, $validTypes)) {
    throw new WMFException(WMFException::IMPORT_CONTRIB, "Unknown refund type '{$refund_type}'");
  }

  try {
    civicrm_api3('Contribution', 'create', [
      'id' => $contribution_id,
      'debug' => 1,
      'contribution_status_id' => $validTypes[$refund_type],
      'cancel_date' => wmf_common_date_unix_to_civicrm($refund_date),
      'refund_trxn_id' => $refund_gateway_txn_id,
    ]);
  }
  catch (CiviCRM_API3_Exception $e) {
    throw new WMFException(
      WMFException::IMPORT_CONTRIB,
      "Cannot mark original contribution as refunded:
                $contribution_id, " . $e->getMessage() . print_r($e->getExtraParams(), TRUE)
    );
  }

  if ($refund_amount !== NULL) {

    $amount_scammed = round($refund_amount, 2) - round($original_amount, 2);
    if ($amount_scammed != 0) {
      $transaction = WmfTransaction::from_unique_id($contribution['trxn_id']);
      if ($refund_gateway_txn_id) {
        $transaction->gateway_txn_id = $refund_gateway_txn_id;
      }
      $transaction->is_refund = TRUE;
      $refund_unique_id = $transaction->get_unique_id();

      try {
        civicrm_api3('Contribution', 'create', [
          'total_amount' => round(
            exchange_rate_convert(
              $refund_currency,
              -$amount_scammed,
              wmf_common_date_parse_string(date('Y-m-d h:i:s', $refund_date)
              )), 2),
          // New type?
          'financial_type_id' => 'Refund',
          'contact_id' => $contribution['contact_id'],
          'contribution_source' => $refund_currency . " " . -$amount_scammed,
          'trxn_id' => $refund_unique_id,
          'receive_date' => date('Y-m-d h:i:s', $refund_date),
          'currency' => 'USD',
          'debug' => 1,
          wmf_civicrm_get_custom_field_name('parent_contribution_id') => $contribution_id,
          wmf_civicrm_get_custom_field_name('no_thank_you') => 1,
        ]);
      }
      catch (CiviCRM_API3_Exception $e) {
        throw new WMFException(
          WMFException::IMPORT_CONTRIB,
          "Cannot create new contribution for the refund difference:
                $contribution_id, " . $e->getMessage() . print_r($e->getExtraParams(), TRUE)
        );
      }
    }
  }

  $alert_factor = Civi::settings()->get('wmf_refund_alert_factor');
  if ($amount_scammed > $alert_factor * $original_amount) {
    wmf_common_failmail('wmf_civicrm', "Refund amount mismatch for : $contribution_id, difference is {$amount_scammed}. See "
      . CRM_Utils_System::url('civicrm/contact/view/contribution', [
        'reset' => 1,
        'id' => $contribution_id,
        'action' => 'view',
      ], TRUE));
  }

  return $contribution_id;
}

/**
 * @param string $op
 * @param int $id
 * @param array $contribution
 *
 * @throws \Civi\WMFException\WMFException
 */
function wmf_civicrm_civicrm_pre_Contribution($op, $id, &$contribution) {
  switch ($op) {
    case 'create':
    case 'edit':
      // Add derived wmf_contribution_extra fields to contribution parameters
      if (WmfDatabase::isNativeTxnRolledBack()) {
        throw new WMFException(
          WMFException::IMPORT_CONTRIB,
          'Native txn rolled back before running pre contribution hook'
        );
      }
      $extra = wmf_civicrm_get_wmf_contribution_extra($contribution);

      if ($extra) {
        $map = wmf_civicrm_get_custom_field_map(
          array_keys($extra), 'contribution_extra'
        );
        $mapped = [];
        foreach ($extra as $key => $value) {
          $mapped[$map[$key]] = $value;
        }
        $contribution += $mapped;
        // FIXME: Seems really ugly that we have to do this, but when
        // a contribution is created via api3, the _pre hook fires
        // after the custom field have been transformed and copied
        // into the 'custom' key
        $formatted = [];
        _civicrm_api3_custom_format_params($mapped, $formatted, 'Contribution');
        if (isset($contribution['custom'])) {
          $contribution['custom'] += $formatted['custom'];
        }
        else {
          $contribution['custom'] = $formatted['custom'];
        }
      }

      break;
  }
}

/**
 * Implementation of hook_civicrm_post, used to update contribution_extra fields
 * and wmf_donor rollup fields.
 *
 * @param string $op
 * @param string $type
 * @param int $id
 * @param \CRM_Contribute_BAO_Contribution $entity
 *
 * @throws \Civi\WMFException\WMFException
 * @throws \CiviCRM_API3_Exception
 */
function wmf_civicrm_civicrm_post($op, $type, $id, &$entity) {
  switch ($type) {
    case 'Contribution':
      wmf_civicrm_civicrm_post_Contribution($op, $id, $entity);
      break;
  }
}

/**
 * @param string $op
 * @param int $id
 * @param \CRM_Contribute_BAO_Contribution $contribution
 *
 * @throws \CiviCRM_API3_Exception
 * @throws \Civi\WMFException\WMFException
 */
function wmf_civicrm_civicrm_post_Contribution($op, $id, &$contribution) {
  switch ($op) {
    case 'create':
    case 'edit':
      if (WmfDatabase::isNativeTxnRolledBack()) {
        throw new WMFException(
          WMFException::IMPORT_CONTRIB,
          'Native txn rolled back before running post contribution hook'
        );
      }
      $params = wmf_civicrm_getLastDonationParams($contribution);
      if (!empty($params)) {
        $params['id'] = $contribution->contact_id;
        civicrm_api3('Contact', 'create', $params);
      }

      break;
  }
}

/**
 * @param array $contribution
 *
 * @return array
 */
function wmf_civicrm_get_wmf_contribution_extra($contribution) {
  $extra = [];

  if (!empty($contribution['trxn_id'])) {
    try {
      $transaction = WmfTransaction::from_unique_id($contribution['trxn_id']);
      $extra['gateway'] = strtolower($transaction->gateway);
      $extra['gateway_txn_id'] = $transaction->gateway_txn_id;
    }
    catch (WMFException $ex) {
      watchdog('wmf_civicrm', "Failed to parse trxn_id: {$contribution['trxn_id']}, " . $ex->getMessage());
    }
  }

  if (!empty($contribution['source'])) {
    $extra = array_merge($extra, wmf_civicrm_get_original_currency_and_amount_from_source($contribution['source'], $contribution['total_amount']));
  }
  return $extra;
}

/**
 * Get original currency & amount
 *
 * The source field holds the amount & currency - parse it out
 * e.g 'USD 15.25'
 *
 * @param string $source
 * @param float $usd_amount
 *
 * @return array
 */
function wmf_civicrm_get_original_currency_and_amount_from_source($source, $usd_amount) {
  if (empty($source)) {
    return [];
  }
  [$original_currency, $original_amount] = explode(" ", $source);
  if (is_numeric($original_amount) && wmf_civicrm_is_valid_currency($original_currency)) {
    return ['original_currency' => $original_currency, 'original_amount' => $original_amount];
  }

  if (is_numeric($original_amount)) {
    return ['original_currency' => 'USD', 'original_amount' => $usd_amount];
  }
  return [];

}

/**
 * Get the details of the last donation received if it differs from the current one.
 *
 * We use this information to update the last_donation_amount and
 * last_donation_currency fields. They will already have been updated to hold
 * the information about the current one in those fields so we only return the
 * information if it differs.
 *
 * @param \CRM_Contribute_BAO_Contribution $contribution
 *
 * @return mixed
 * @throws \CiviCRM_API3_Exception
 */
function wmf_civicrm_getLastDonationParams(&$contribution) {
  $contributionStatus = CRM_Core_PseudoConstant::getLabel('CRM_Contribute_BAO_Contribution', 'contribution_status_id', $contribution->contribution_status_id);
  if (empty($contribution->total_amount) && (!$contributionStatus)) {
    return [];
  }
  if ($contributionStatus === 'Completed'
    && !empty($contribution->receive_date)
    && substr($contribution->trxn_id, 0, 4) !== 'RFD '
    && substr($contribution->receive_date, 0, 8) === date('Ymd')
  ) {
    // If the current donation was received today do an early return.
    // What we lose in accuracy (perhaps 2 have come in on the same day) we
    // gain in performance.
    return [];
  }
  if (!$contribution->contact_id || !$contribution->total_amount) {
    $contribution->find(TRUE);
  }
  $params = [];

  // The old code used to assume that 'any' insert was the latest. Here we check.
  // We could possibly 'assume' it to be the latest if on the latest day - although in that
  // case we probably lose a get query & gain an 'update' query as the extra fields are likely already
  // updated by the triggers.
  $contactLastDonation = _wmf_civicrm_get_contact_last_donation_data($contribution);
  $extra = wmf_civicrm_get_original_currency_and_amount_from_source($contribution->source, $contribution->total_amount);
  if ($contributionStatus === 'Completed' && substr($contribution->trxn_id, 0, 4) !== 'RFD ') {
    // This is a 'valid' transaction - it's either the latest or no update is required.
    if (strtotime($contactLastDonation['date']) === strtotime($contribution->receive_date)) {
      if (!empty($extra['original_currency']) && $contactLastDonation['currency'] !== CRM_Utils_Array::value('original_currency', $extra)) {
        $params[wmf_civicrm_get_custom_field_name('last_donation_currency')] = $extra['original_currency'];
      }
      if (!empty($extra['original_amount']) && round($contactLastDonation['amount'], 2) !== round(CRM_Utils_Array::value('original_amount', $extra), 2)) {
        $params[wmf_civicrm_get_custom_field_name('last_donation_amount')] = $extra['original_amount'];
      }
      if (round($contactLastDonation['amount_usd'], 2) !== round($contribution->total_amount, 2)) {
        $params[wmf_civicrm_get_custom_field_name('last_donation_usd')] = $contribution->total_amount;
      }
    }
    if (!empty($params)) {
      watchdog(
        'wmf_civicrm',
        "Contribution post hook is changing values for contribution {$contribution->id} " .
        'from ' . print_r($contactLastDonation, TRUE) . ' to ' . print_r($params, TRUE)
      );
    }
    return $params;
  }

  // We don't have a completed transaction here - probably a refund - time to get the details of the latest & update it.
  // (From back office it could also be pending but we probably don't stand to gain much by special handling pendings as low volume).
  $existing = civicrm_api3('Contribution', 'get', [
    'contribution_status_id' => CRM_Core_PseudoConstant::getKey('CRM_Contribute_BAO_Contribution', 'contribution_status_id', 'Completed'),
    'contact_id' => $contribution->contact_id,
    'options' => ['limit' => 1, 'sort' => 'receive_date DESC'],
    'trxn_id' => ['NOT LIKE' => 'RFD %'],
    'return' => [
      wmf_civicrm_get_custom_field_name('original_currency'),
      wmf_civicrm_get_custom_field_name('original_amount'),
      'total_amount',
    ],
  ]);
  if (!$existing['count']) {
    return $params;
  }
  $latestContribution = $existing['values'][$existing['id']];
  $latestContributionCurrency = CRM_Utils_Array::value(wmf_civicrm_get_custom_field_name('original_currency'), $latestContribution);
  $latestContributionAmount = CRM_Utils_Array::value(wmf_civicrm_get_custom_field_name('original_amount'), $latestContribution);

  if ($latestContributionCurrency !== CRM_Utils_Array::value('original_currency', $extra)) {
    $params[wmf_civicrm_get_custom_field_name('last_donation_currency')] = $latestContributionCurrency;
  }
  if (round($contactLastDonation['amount'], 2) !== round($latestContributionAmount, 2)) {
    $params[wmf_civicrm_get_custom_field_name('last_donation_amount')] = $latestContributionAmount;
  }
  if (round($contactLastDonation['amount_usd'], 2) !== round($latestContribution['total_amount'], 2)) {
    $params[wmf_civicrm_get_custom_field_name('last_donation_usd')] = $latestContribution['total_amount'];
  }
  return $params;
}

/**
 * @param $contribution
 *
 * @return array
 * @throws \CiviCRM_API3_Exception
 */
function _wmf_civicrm_get_contact_last_donation_data(&$contribution) {
  $contactExistingCustomData = civicrm_api3('Contact', 'getsingle', [
    'id' => $contribution->contact_id,
    'return' => [
      wmf_civicrm_get_custom_field_name('last_donation_currency'),
      wmf_civicrm_get_custom_field_name('last_donation_amount'),
      wmf_civicrm_get_custom_field_name('last_donation_date'),
      wmf_civicrm_get_custom_field_name('last_donation_usd'),
    ],
  ]);
  return [
    'amount' => CRM_Utils_Array::value(wmf_civicrm_get_custom_field_name('last_donation_amount'), $contactExistingCustomData),
    'date' => CRM_Utils_Array::value(wmf_civicrm_get_custom_field_name('last_donation_date'), $contactExistingCustomData),
    'amount_usd' => CRM_Utils_Array::value(wmf_civicrm_get_custom_field_name('last_donation_usd'), $contactExistingCustomData),
    'currency' => CRM_Utils_Array::value(wmf_civicrm_get_custom_field_name('last_donation_currency'), $contactExistingCustomData),
  ];
}

/**
 * Get a grip on multiple database connections.
 *
 * @return db_switcher
 */
function wmf_civicrm_get_dbs() {
  return new db_switcher();
}

/**
 * Expand CiviCRM DAO results object into an array of rows as array
 *
 * @param $dao CRM_Core_DAO
 *
 * @return array
 * @throws \Exception
 */
function wmf_civicrm_dao_to_list($dao) {
  if (PEAR::isError($dao)) {
    throw new Exception($dao->getMessage());
  }
  $result = [];
  while ($dao->fetch()) {
    $result[] = $dao->toArray();
  }
  // FIXME: pick wart
  if (empty($result)) {
    return FALSE;
  }
  return $result;
}

/**
 * Return tomorrow's month number.  Used to tell if today is New Year's Eve or
 * later.
 */
function wmf_civicrm_tomorrows_month() {
  $tomorrow = new DateTime('+1 day');
  $month = gmdate("m", $tomorrow->getTimestamp());
  return $month;
}

/**
 * Return true if the user has this role
 *
 * @param string $role Name of the role
 *
 * @return bool
 */
function wmf_civicrm_user_has_role($role) {
  global $user;

  foreach ($user->roles as $rid => $roleName) {
    if ($role === $roleName) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Recalculates USD amounts of contributions between $start and $end
 * based on exchange rates in our database.  Useful if you spent three months
 * not retrieving the latest exchange rates.
 *
 * @param DateTime $start the date from which to start recalculation
 * @param DateTime $end the cutoff date
 * @param int $batch_size number of contributions to recalculate at once
 *
 * @throws \Civi\WMFException\WMFException
 */
function wmf_civicrm_recalculate_contributions($start, $end, $batch_size = 1000) {
  $api = civicrm_api_classapi();
  $query = "SELECT c.id, c.receive_date, c.total_amount, c.fee_amount,
c.net_amount, e.original_amount, e.original_currency
FROM civicrm_contribution c
JOIN wmf_contribution_extra e on e.entity_id = c.id
WHERE c.receive_date > %1
AND c.receive_date <= %2
AND c.id > %3
AND e.original_currency <> 'USD'
ORDER BY c.id ASC
LIMIT %4";
  $last_id = 0;
  while (TRUE) {
    $dao = CRM_Core_DAO::executeQuery($query, [
      1 => [$start->format('Ymd'), 'Date'],
      2 => [$end->format('Ymd'), 'Date'],
      3 => [$last_id, 'Integer'],
      4 => [$batch_size, 'Integer'],
    ]);
    $batch = wmf_civicrm_dao_to_list($dao);
    if (empty($batch)) {
      break;
    }

    foreach ($batch as $contribution) {
      $id = $contribution['id'];
      $original_amount = $contribution['original_amount'];
      $currency = $contribution['original_currency'];
      $total_amount = $contribution['total_amount'];

      if ($id > $last_id) {
        $last_id = $id;
      }

      if ($original_amount == 0 || $total_amount == 0) {
        watchdog('recalculate_contributions', "Not recalculating contribution $id with zero original or total amount", NULL, WATCHDOG_DEBUG);
        continue;
      }
      if (!preg_match('/^[a-z][a-z][a-z]$/i', $currency)) {
        watchdog('recalculate_contributions', "Not recalculating contribution $id with nonsense currency $currency", NULL, WATCHDOG_DEBUG);
        continue;
      }

      // Approximate rate we originally used so we can correct the fee & net.
      $rate_used = $total_amount / $original_amount;
      try {
        $correct_rate = exchange_rate_convert($currency, 1, wmf_common_date_parse_string($contribution['receive_date']));
      }
      catch (ExchangeRatesException $ex) {
        watchdog('recalculate_contributions', "Not recalculating contribution $id.  Cannot find rate for currency $currency", NULL, WATCHDOG_DEBUG);
        continue;
      }
      $recalculated_total = round($correct_rate * $original_amount, 2);
      $recalculated_fee = round($contribution['fee_amount'] / $rate_used * $correct_rate, 2);
      $recalculated_net = $recalculated_total - $recalculated_fee;

      $params = [
        'id' => $contribution['id'],
        'total_amount' => $recalculated_total,
        'fee_amount' => $recalculated_fee,
        'net_amount' => $recalculated_net,
      ];

      watchdog(
        'recalculate_contributions',
        "Recalculating contribution $id, received on {$contribution['receive_date']}. " .
        "Original_amount: $original_amount, original_currency: $currency, " .
        "old total_amount: $total_amount, old fee_amount: {$contribution['fee_amount']}, " .
        "old net_amount: {$contribution['net_amount']}.  " .
        "New total_amount: $recalculated_total, new fee_amount: $recalculated_fee, " .
        "new net_amount: $recalculated_net.",
        NULL,
        WATCHDOG_DEBUG
      );

      if (!$api->Contribution->Create($params)) {
        throw new WMFException(
          WMFException::UNKNOWN, "Failed to update USD amount of contribution: $id, " . $api->errorMsg()
        );
      }
    }
  }
}

/**
 * Get options for a field.
 *
 * @param string $entity
 * @param string $field
 *
 * @return array
 * @throws \CiviCRM_API3_Exception
 */
function wmf_civicrm_get_options($entity, $field) {
  if (!isset(\Civi::$statics['wmf_civicrm'][$entity][$field])) {
    $options = civicrm_api3($entity, 'getoptions', ['field' => $field]);
    \Civi::$statics['wmf_civicrm'][$entity][$field] = $options['values'];
  }
  return \Civi::$statics['wmf_civicrm'][$entity][$field];
}

/**
 * Determine if a code represents a supported currency. Uses the
 * DonationInterface currency list as a canonical source.
 *
 * @param string $currency should be an ISO 4217 code
 *
 * @return bool true if it's a real currency that we can handle
 */
function wmf_civicrm_is_valid_currency($currency) {
  $all_currencies = array_keys(CurrencyRates::getCurrencyRates());
  return in_array($currency, $all_currencies);
}

/**
 * Abuse the permissions hook to prevent de-duping without a limit
 *
 * @param string $permission
 * @param bool $granted
 *
 * @return bool
 */
function wmf_civicrm_civicrm_permission_check($permission, &$granted) {
  if ($permission === 'merge duplicate contacts') {
    $action = CRM_Utils_Request::retrieve('action', 'String');
    $path = CRM_Utils_System::currentPath();
    if (
      $path === 'civicrm/contact/dedupefind' &&
      !CRM_Utils_Request::retrieve('limit', 'Integer') &&
      ($action != CRM_Core_Action::PREVIEW)
    ) {
      CRM_Core_Session::setStatus(ts('Not permitted for WMF without a limit - this is a setting (dedupe_default_limit) configured on administer->system settings -> misc'));
      $granted = FALSE;
    }
  }
  return TRUE;
}

/**
 * Flush statically cached option values.
 */
function wmf_civicrm_flush_cached_options() {
  \Civi::$statics['wmf_civicrm'] = [];
}

/**
 * Intercede in searches to unset 'force' when it appears to be accidentally set.
 *
 * This is a long standing wmf hack & it's not sure when the url would be hit by
 * a user but it can be replicated by accessing
 *
 * /civicrm/contribute/search?force=1&context=search&reset=1
 *
 * When this is working correctly the criteria form not the results will show.
 *
 * Note this is a totally weird place to do this - but seems tobe the only place called
 * before the search is rendered.
 *
 * @param string $objectType
 * @param array $tasks
 *
 * @throws \CRM_Core_Exception
 */
function wmf_civicrm_civicrm_searchTasks($objectType, &$tasks) {
  if (CRM_Utils_Request::retrieve('context', 'String', $form, FALSE, 'search') === 'search'
    && CRM_Utils_Request::retrieve('qfKey', 'String') === NULL
  ) {
    $_GET['force'] = $_REQUEST['force'] = FALSE;
  }
}

/**
 * Get entity tag names.
 *
 * @param int $entity_id
 * @param string $entity_table which table the entity lives in
 *
 * @return array
 * @throws \CiviCRM_API3_Exception
 */
function wmf_civicrm_get_tag_names($entity_id, $entity_table = 'civicrm_contribution') {
  $entityTags = civicrm_api3('EntityTag', 'get', [
    'entity_table' => $entity_table,
    'entity_id' => $entity_id,
  ]);
  if (!isset(\Civi::$statics['wmf_civicrm']['tags'])) {
    \Civi::$statics['wmf_civicrm']['tags'] = civicrm_api3(
      'EntityTag', 'getoptions', ['field' => 'tag_id']
    )['values'];
  }
  $tag_names = [];
  foreach ($entityTags['values'] as $id => $entityTag) {
    $tag_names[] = \Civi::$statics['wmf_civicrm']['tags'][$entityTag['tag_id']];
  }
  return $tag_names;
}

/**
 * @param array $msg
 *
 * @return bool
 */
function wmf_civicrm_is_endowment_gift($msg) {
  return isset($msg['utm_medium']) && $msg['utm_medium'] === 'endowment';
}

/**
 * @param string $language
 *
 * @throws \API_Exception
 */
function wmf_civicrm_insert_failure_message_translation($language) {
  $msgHtml = file_get_contents(__DIR__ . '/templates/recurring_failed_message.en.' . $language . '.html.txt');
  $subject = file_get_contents(__DIR__ . '/templates/recurring_failed_message.en.' . $language . '.subject.txt');
  $msgText = file_get_contents(__DIR__ . '/templates/recurring_failed_message.en.' . $language . '.text.txt');
  // It actually stores what we pass it - but we want it to store the same value as on the contact.
  $languageName = \Civi\Api4\OptionValue::get()
    ->setCheckPermissions(FALSE)
    ->addWhere('value', '=', $language)
    ->addSelect('name')->execute()->first()['name'];
  // This should be done by Civi but I hit an error on inserting the Japanese (although
  // this might not be needed as I added table alter statements too.
  CRM_Core_DAO::executeQuery('SET NAMES utf8mb4');

  \Civi\Api4\MessageTemplate::update()->setCheckPermissions(FALSE)
    ->setValues([
      'msg_html' => $msgHtml,
      'subject' => $subject,
      'msg_text' => $msgText,
    ])
    ->addWhere('workflow_name',  '=', 'recurring_failed_message')
    ->setLanguage($languageName)->execute();
}

/**
 * Queue wrapper for api function.
 *
 * I'm hoping to get this or a similar fix upstreamed - so this
 * should be temporary - it adds a function that calls the v4 api,
 * ignoring the ctx - which doesn't serialise well...
 *
 * @param $ctx
 * @param $entity
 * @param $action
 * @param $params
 *
 * @return true
 * @throws \API_Exception
 * @throws \Civi\API\Exception\NotImplementedException
 */
function civicrm_api4_queue($ctx, $entity, $action, $params): bool {
  civicrm_api4($entity, $action, $params);
  return TRUE;
}

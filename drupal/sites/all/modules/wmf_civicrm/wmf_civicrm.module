<?php

use Civi\WMFException\WMFException;
use Civi\WMFHelper\Database;
use Civi\WMFStatistic\ImportStatsCollector;
use Civi\WMFTransaction;
use SmashPig\PaymentData\ReferenceData\CurrencyRates;

require_once 'recurring.inc';
require_once 'tracking.inc';

/**
 * @todo - delete or migrate to a setting.
 * @return array
 */
function wmf_civicrm_menu() {
  $items = [];

  $items['admin/config/wmf_civicrm/matching_gifts'] = [
    'title' => t('Matching Gifts Employer Data'),
    'description' => t('Set matching gifts employer data config'),
    'page callback' => 'drupal_get_form',
    'page arguments' => ['wmf_civicrm_matching_gifts_form'],
    'access arguments' => ['administer site configuration'],
    'type' => MENU_NORMAL_ITEM,
  ];

  return $items;
}

/**
 * @return array
 * @todo - delete or migrate to a setting.
 */
function wmf_civicrm_matching_gifts_form() {
  $form = [];

  $form['matching_gifts_employer_data_file_path'] = [
    '#type' => 'textfield',
    '#title' => 'File path for matching gifts employer data file',
    '#required' => TRUE,
    '#default_value' => variable_get(
      'matching_gifts_employer_data_file_path',
      '/srv/matching_gifts/employers.csv'
    ),
    '#description' => 'File path for matching gifts employer data file',
  ];

  $form['matching_gifts_employer_data_update_email'] = [
    '#type' => 'textfield',
    '#title' => 'Email address to send updates to',
    '#required' => TRUE,
    '#default_value' => variable_get(
      'matching_gifts_employer_data_update_email', 'fr-tech@wikimedia.org'
    ),
    '#description' => 'Email address to send matching gifts employer data updates to',
  ];

  return system_settings_form($form);
}

/**
 * Ensure the specified option value exists.
 * @todo - stop calling from test, move to donation Message (there is already test
 * cover that this function works in DonationQueue context).
 *
 * @param string $group_name
 * @param string $value
 */
function wmf_civicrm_ensure_option_value_exists($group_name, $value) {
  $params = [
    'option_group_id' => $group_name,
    'name' => $value,
    'label' => $value,
    'value' => $value,
    'is_active' => 1,
  ];
  $existingValues = civicrm_api3('OptionValue', 'get', [
    'option_group_id' => $params['option_group_id'],
    'value' => $params['value'],
    'sequential' => 1,
  ]);
  $createRequired = FALSE;
  if ($existingValues['count'] == 0) {
    $createRequired = TRUE;
  }
  elseif (!$existingValues['values'][0]['is_active']) {
    $params['id'] = $existingValues['values'][0]['id'];
    $createRequired = TRUE;
  }
  if ($createRequired) {
    civicrm_api3('OptionValue', 'create', $params);
    // It won't take much to rebuild this & we don't know the entity.
    // This should be rare.
    \Civi::$statics['wmf_civicrm'] = [];
  }
}

/**
 * @param $entity_id
 * @param $map
 * @param null $group_name
 *
 * @throws \Civi\WMFException\WMFException
 * @deprecated
 *
 * Phase this out as it is does some unecessary queries.
 *
 */
function wmf_civicrm_set_custom_field_values($entity_id, $map, $group_name = NULL) {
  $params = [
    'entityID' => $entity_id,
  ];
  $custom_fields =
    wmf_civicrm_get_custom_field_map(array_keys($map), $group_name);
  foreach ($map as $field_name => $value) {
    $params[$custom_fields[$field_name]] = $value;
  }
  $result = CRM_Core_BAO_CustomValueTable::setValues($params);
  if (!empty($result['is_error'])) {
    throw new WMFException(WMFException::CIVI_CONFIG,
      t('Failed to set custom values: id !id, error: !err', [
        '!id' => $entity_id,
        '!err' => $result['error_message'],
      ])
    );
  }
}

function wmf_civicrm_get_custom_field_map($field_names, $group_name = NULL) {
  static $custom_fields = [];
  foreach ($field_names as $name) {
    if (empty($custom_fields[$name])) {
      $id = CRM_Core_BAO_CustomField::getCustomFieldID($name, $group_name);
      if (!$id) {
        throw new CRM_Core_Exception('id is missing: ' . $name . ' ' . $group_name);
      }
      $custom_fields[$name] = "custom_{$id}";
    }
  }

  return $custom_fields;
}

/**
 * @param $field_name
 * @param null $group_name
 *
 * @return mixed
 * @throws \CRM_Core_Exception
 * @deprecated - try ot use apiv4 instead.
 *
 */
function wmf_civicrm_get_custom_field_name($field_name, $group_name = NULL) {
  $custom_fields = wmf_civicrm_get_custom_field_map([$field_name], $group_name);
  return $custom_fields[$field_name];
}

/**
 * Checks for contact ID and hash match.  If mismatched unset
 * ID and hash so message is treated as a new contact.
 *
 * @todo - I think Message::normalize() already prunes invalid contact IDs so can probably just go.
 * @deprecated
 * @param $msg
 * @param $matchEmail
 *
 * @throws \CRM_Core_Exception
 */
function wmf_civicrm_set_null_id_on_hash_mismatch(&$msg, $matchEmail = FALSE) {
  $existing = civicrm_api3('Contact', 'getSingle', [
    'id' => $msg['contact_id'],
    'return' => ['hash', 'email'],
  ]);

  if (!$existing || $existing['hash'] !== $msg['contact_hash'] ||
    ($existing['email'] !== $msg['email'] && $matchEmail)) {
    $msg['contact_id'] = NULL;
    unset($msg['contact_hash']);
  }
}

/**
 * Check if the language string exists.
 *
 * @param string $languageAbbreviation
 *
 * @return bool
 */
function wmf_civicrm_check_language_exists($languageAbbreviation) {
  $languages = wmf_civicrm_get_valid_languages();
  return !empty($languages[$languageAbbreviation]);
}

/**
 * Get valid languages.
 *
 * @return array
 */
function wmf_civicrm_get_valid_languages() {
  static $languages;
  if (empty($languages)) {
    $available_options = civicrm_api3('Contact', 'getoptions', [
      'field' => 'preferred_language',
    ]);
    $languages = $available_options['values'];
  }
  return $languages;
}

/**
 * Update address for a contact.
 * @todo - take a copy on the import class while it fades out, Move to WMFContact::save.
 * @param array $msg
 * @param int $contact_id
 *
 * @throws \Civi\WMFException\WMFException
 *
 */
function wmf_civicrm_message_address_update($msg, $contact_id) {
  // CiviCRM does a DB lookup instead of checking the pseudoconstant.
  // @todo fix Civi to use the pseudoconstant.
  $country_id = wmf_civicrm_get_country_id($msg['country']);
  if (!$country_id) {
    return;
  }
  $address = [
    'is_primary' => 1,
    'street_address' => $msg['street_address'],
    'supplemental_address_1' => !empty($msg['supplemental_address_1']) ? $msg['supplemental_address_1'] : '',
    'city' => $msg['city'],
    'postal_code' => $msg['postal_code'],
    'country_id' => $country_id,
    'country' => $msg['country'],
    'is_billing' => 1,
    'debug' => 1,
  ];
  if (!empty($msg['state_province'])) {
    $address['state_province'] = $msg['state_province'];
    $address['state_province_id'] = wmf_civicrm_get_state_id($country_id, $msg['state_province']);
  }

  $address_params = [
    'contact_id' => $contact_id,
    'location_type_id' => \CRM_Core_BAO_LocationType::getDefault()->id,
    'values' => [$address],
  ];

  try {
    civicrm_api3('Address', 'replace', $address_params);
  }
  catch (CRM_Core_Exception $e) {
    // Constraint violations occur when data is rolled back to resolve a deadlock.
    $code = $e->getErrorCode() === 'constraint violation' ? WMFException::DATABASE_CONTENTION : WMFException::IMPORT_CONTACT;
    throw new WMFException($code, "Couldn't store address for the contact.", $e->getExtraParams());
  }
}

function wmf_civicrm_get_country_id($raw) {
  // ISO code, or outside chance this could be a lang_COUNTRY pair
  if (preg_match('/^([a-z]+_)?([A-Z]{2})$/', $raw, $matches)) {
    $code = $matches[2];

    $iso_cache = CRM_Core_PseudoConstant::countryIsoCode();
    $id = array_search(strtoupper($code), $iso_cache);
    if ($id !== FALSE) {
      return $id;
    }
  }
  else {
    $country_cache = CRM_Core_PseudoConstant::country(FALSE, FALSE);
    $id = array_search($raw, $country_cache);
    if ($id !== FALSE) {
      return $id;
    }
  }

  \Civi::log('wmf')->notice('wmf_civicrm: Cannot find country: [{country}]',
    ['country' => $raw]
  );
  return FALSE;
}

/**
 * Get the state id for the named state in the given country.
 *
 * @param int $country_id
 * @param string $state
 *
 * @return int|null
 */
function wmf_civicrm_get_state_id($country_id, $state) {
  $stateID = CRM_Core_DAO::singleValueQuery('
  SELECT id
FROM civicrm_state_province s
WHERE
    s.country_id = %1
    AND ( s.abbreviation = %2 OR s.name = %3)
  ', [
    1 => [$country_id, 'String'],
    2 => [$state, 'String'],
    3 => [$state, 'String'],
  ]);
  if ($stateID) {
    return (int) $stateID;
  }

  \Civi::log('wmf')->notice('wmf_civicrm: Cannot find state: {state} (country {country})',
    ['state' => $state, 'country' => $country_id]
  );
}

/**
 * If we're missing a contribution tracking id, insert new record to the table.
 * This can happen if a user somehow makes a donation from outside the normal workflow
 * Historically checks have been ignored as they are completely offline.
 * T146295 has raised some questions about this.
 * We respect the recognition of 'payment_method' as being a little bit magic, but
 * also assume that if you are setting utm_medium or utm_source in your import you
 * intend them to be recorded.
 *
 * @param array $msg
 *
 * @return array same message, possibly with contribution_tracking_id set
 * @throws WMFException
 */
function wmf_civicrm_add_contribution_tracking_if_missing($msg) {
  if (isset($msg['contribution_tracking_id'])) {
    return $msg;
  }
  $paymentMethodIsCheckOrEmpty = empty($msg['payment_method']) || strtoupper($msg['payment_method']) == 'CHECK';
  $hasUtmInfo = !empty($msg['utm_medium']) || !empty($msg['utm_source']);
  if ($paymentMethodIsCheckOrEmpty && !$hasUtmInfo) {
    return $msg;
  }
  Civi::log('wmf')->debug('wmf_civicrm: Contribution missing contribution_tracking_id');

  $source = isset($msg['utm_source']) ? $msg['utm_source'] : '..' . $msg['payment_method'];
  $medium = isset($msg['utm_medium']) ? $msg['utm_medium'] : 'civicrm';
  $campaign = isset($msg['utm_campaign']) ? $msg['utm_campaign'] : NULL;

  $tracking = [
    'utm_source' => $source,
    'utm_medium' => $medium,
    'utm_campaign' => $campaign,
    'ts' => wmf_common_date_unix_to_sql($msg['date']),
  ];
  if (
    !empty($msg['country']) &&
    array_search($msg['country'], CRM_Core_PseudoConstant::countryIsoCode()) !== FALSE
  ) {
    $tracking['country'] = $msg['country'];
  }
  try {
    $contribution_tracking_id = wmf_civicrm_insert_contribution_tracking($tracking);
  }
  catch (Exception $e) {
    throw new WMFException(WMFException::INVALID_MESSAGE, $e->getMessage());
  }
  \Civi::log('wmf')->debug('wmf_civicrm: Newly inserted contribution tracking id: {id}', ['id' => $contribution_tracking_id]);
  $msg['contribution_tracking_id'] = $contribution_tracking_id;
  return $msg;
}

/**
 * @todo - in most places this becomes obsolete when Message::normlize() is used.
 * Pulls all records in the wmf_contribution_extras table that match the gateway
 * and gateway transaction id.
 *
 * @param string $gateway
 * @param string $gateway_txn_id
 *
 * @return mixed array of result rows, or false if none present.
 * TODO: return empty set rather than false.
 * @throws \Civi\WMFException\WMFException
 */
function wmf_civicrm_get_contributions_from_gateway_id($gateway, $gateway_txn_id) {
  // If you only want to know if it exists then call \Civi\WMFHelper\Contribution::exists()
  // @todo, move this function to \Civi\WMFHelper\Contribution, use apiv4
  $gateway = strtolower($gateway);
  $query = "SELECT cx.*, cc.* FROM wmf_contribution_extra cx LEFT JOIN civicrm_contribution cc
		ON cc.id = cx.entity_id
		WHERE gateway = %1 AND gateway_txn_id = %2";

  $dao = CRM_Core_DAO::executeQuery($query, [
    1 => [$gateway, 'String'],
    2 => [$gateway_txn_id, 'String'],
  ]);
  $result = [];
  while ($dao->fetch()) {
    $result[] = $dao->toArray();
  }
  // FIXME: pick wart
  if (empty($result)) {
    return FALSE;
  }
  return $result;
}

function wmf_civicrm_boost_performance() {
  civicrm_initialize();
  $config = CRM_Core_Config::singleton();
  $config->doNotResetCache = 1;
}

function wmf_civicrm_set_no_thank_you($contribution_id, $reason) {
  \Civi::log('wmf')->info('wmf_civicrm: Preventing thank-you for contribution {contribution_id} because: {reason}', ['contribution_id' => $contribution_id, 'reason' => $reason]);

  try {
    wmf_civicrm_set_custom_field_values($contribution_id, [
      'no_thank_you' => $reason,
    ]);
  }
  catch (WMFException $ex) {
    \Civi::log('wmf')->error('wmf_civicrm: Updating with no-thank-you failed with details: {message}', ['message' => $ex->getMessage()]);
  }
}

/**
 * @todo - fix tests to process via the queue consumer, move this to the queue consumer.
 * Sets the civi records to reflect a contribution refund.
 *
 * The original contribution is set to status "Refunded", or "Chargeback" and a
 * negative financial transaction record is created. If the amount refunded
 * does not match a second contribution is added for the balance. The
 * parent_contribution_id custom field is set on the balance contribution to
 * connect it to the parent.
 *
 * Prior to the 4.6 CiviCRM upgrade refunds resulted in second contribution
 * with a negative amount. They were linked to the original through the
 * parent_contribution_id custom field. This was consistent with 4.2 behaviour
 * which was the then current version.
 *
 * 4.3 (included in the 4.6 upgrade) introduced recording multiple financial
 * transactions (payments) against one contribution. In order to adapt to this
 * the markRefund function now records second financial transactions against
 * the original contribution (using the contribution.create api). Discussion
 * about this change is at https://phabricator.wikimedia.org/T116317
 *
 * Some refunds do not have the same $ amount as the original transaction.
 * Prior to Oct 2014 these were seemingly always imported to CiviCRM. Since
 * that time the code was changed to throw an exception when the refund
 * exceeded the original amount, and not import it into CiviCRM. (this does
 * have visibility as it results in fail_mail).
 *
 * The code suggested an intention to record mismatched refunds with a the
 * difference in the custom fields settlement_usd. However, this returns no
 * rows. select * from wmf_contribution_extra WHERE settlement_usd IS NOT NULL
 * LIMIT. It would appear they have been recorded without any record of the
 * discrepancy, or there were none.
 *
 * That issue should be addressed (as a separate issue). The methodology for
 * recording the difference needs to be considered e.g T89437 - preferably in
 * conjunction with getting the appropriate method tested within the core
 * codebase.
 *
 * Note that really core CiviCRM should have a way of handling this and we
 * should work on getting that resolved and adopting it.
 *
 * An earlier iteration of this function reconstructed the value of the
 * original contribution when it had been zero'd or marked as 'RFD'. This
 * appears to be last used several years ago & this handling has been removed
 * now.
 *
 * @param int $contribution_id
 * @param string $contribution_status
 *   'Refunded'|'Chargeback' - this will determine the new contribution status.
 * @param bool $refund_completed
 *   It turns out this is only passed in as anything other than true from the
 *   tests (based on grepping). The UI DOES allow for a status of 'Pending
 *   Refund' to be used if this is required from the UI although we don't have
 *   a process around that at this stage.
 * @param string $refund_date
 * @param int $refund_gateway_txn_id
 * @param string $refund_currency
 *   If provided this will be checked against the original contribution and an
 *   exception will be thrown on mismatch.
 * @param float $refund_amount
 *   If provided this will be checked against the original contribution and an
 *   exception will be thrown on mismatch.
 *
 * @return int
 *   The refund's contribution id.
 * @throws \Civi\ExchangeRates\ExchangeRatesException;
 * @throws \Civi\WMFException\WMFException
 */

function wmf_civicrm_mark_refund(
  $contribution_id,
  $contribution_status = 'Refunded',
  $refund_completed = FALSE,
  $refund_date = NULL,
  $refund_gateway_txn_id = NULL,
  $refund_currency = NULL,
  $refund_amount = NULL
) {
  $amount_scammed = 0;

  try {
    $contribution = civicrm_api3('Contribution', 'getsingle', [
      'id' => $contribution_id,
      'return' => [
        'total_amount',
        'trxn_id',
        'contribution_source',
        'contact_id',
        'receive_date',
        'contribution_status_id',
      ],
    ]);
  }
  catch (CRM_Core_Exception $e) {
    throw new WMFException(
      WMFException::INVALID_MESSAGE, "Could not load contribution: $contribution_id with error " . $e->getMessage()
    );
  }

  // Note that my usual reservation about using BAO functions from custom code is overridden by the
  // caching problems we are hitting in testing (plus the happy knowledge the tests care about this line of
  // code).
  if (CRM_Contribute_BAO_Contribution::isContributionStatusNegative($contribution['contribution_status_id'])
  ) {
    throw new WMFException(WMFException::DUPLICATE_CONTRIBUTION, "Contribution is already refunded: $contribution_id");
  }
  // Deal with any discrepancies in the refunded amount.
  [$original_currency, $original_amount] = explode(" ", $contribution['contribution_source']);

  if ($refund_currency !== NULL) {
    if ($refund_currency != $original_currency) {
      if ($refund_currency === 'USD') {
        // change original amount and currency to match refund
        $original_amount = round((float)Civi\Api4\ExchangeRate::convert(FALSE)
          ->setFromCurrency($original_currency)
          ->setFromAmount($original_amount)
          ->setTimestamp(is_int($contribution['receive_date'])
            ? ( '@' . $contribution['receive_date'] )
            : $contribution['receive_date'])
          ->execute()
          ->first()['amount'], 2);
        $original_currency = 'USD';
      }
      else {
        throw new WMFException(WMFException::INVALID_MESSAGE, "Refund was in a different currency.  Freaking out.");
      }
    }
  }
  else {
    $refund_currency = $original_currency;
  }
  if ($refund_date === NULL) {
    $refund_date = time();
  }
  elseif (!is_numeric($refund_date)) {
    $refund_date = wmf_common_date_parse_string($refund_date);
  }

  try {
    civicrm_api3('Contribution', 'create', [
      'id' => $contribution_id,
      'debug' => 1,
      'contribution_status_id' => $contribution_status,
      'cancel_date' => wmf_common_date_unix_to_civicrm($refund_date),
      'refund_trxn_id' => $refund_gateway_txn_id,
    ]);
  }
  catch (CRM_Core_Exception $e) {
    throw new WMFException(
      WMFException::IMPORT_CONTRIB,
      "Cannot mark original contribution as refunded:
                $contribution_id, " . $e->getMessage() . print_r($e->getExtraParams(), TRUE)
    );
  }

  if ($refund_amount !== NULL) {
    $amount_scammed = round($refund_amount, 2) - round($original_amount, 2);
    if ($amount_scammed != 0) {
      $transaction = WMFTransaction::from_unique_id($contribution['trxn_id']);
      if ($refund_gateway_txn_id) {
        $transaction->gateway_txn_id = $refund_gateway_txn_id;
      }
      $transaction->is_refund = TRUE;
      $refund_unique_id = $transaction->get_unique_id();

      try {
        civicrm_api3('Contribution', 'create', [
          'total_amount' => round(
            (float)Civi\Api4\ExchangeRate::convert(FALSE)
              ->setFromCurrency($refund_currency)
              ->setFromAmount(-$amount_scammed)
              ->setTimestamp(is_int($refund_date) ? "@$refund_date" : $refund_date)
              ->execute()
              ->first()['amount'], 2),
          // New type?
          'financial_type_id' => 'Refund',
          'contact_id' => $contribution['contact_id'],
          'contribution_source' => $refund_currency . " " . -$amount_scammed,
          'trxn_id' => $refund_unique_id,
          'receive_date' => date('Y-m-d h:i:s', $refund_date),
          'currency' => 'USD',
          'debug' => 1,
          wmf_civicrm_get_custom_field_name('parent_contribution_id') => $contribution_id,
          wmf_civicrm_get_custom_field_name('no_thank_you') => 1,
        ]);
      }
      catch (CRM_Core_Exception $e) {
        throw new WMFException(
          WMFException::IMPORT_CONTRIB,
          "Cannot create new contribution for the refund difference:
                $contribution_id, " . $e->getMessage() . print_r($e->getExtraParams(), TRUE)
        );
      }
    }
  }

  $alert_factor = Civi::settings()->get('wmf_refund_alert_factor');
  if ($amount_scammed > $alert_factor * $original_amount) {
    wmf_common_failmail('wmf_civicrm', "Refund amount mismatch for : $contribution_id, difference is {$amount_scammed}. See "
      . CRM_Utils_System::url('civicrm/contact/view/contribution', [
        'reset' => 1,
        'id' => $contribution_id,
        'action' => 'view',
      ], TRUE));
  }

  return $contribution_id;
}

/**
 * Get original currency & amount
 *
 * The source field holds the amount & currency - parse it out
 * e.g 'USD 15.25'
 *
 * @param string $source
 * @param float $usd_amount
 *
 * @return array
 */
function wmf_civicrm_get_original_currency_and_amount_from_source($source, $usd_amount) {
  if (empty($source)) {
    return [];
  }
  [$original_currency, $original_amount] = explode(" ", $source);
  if (is_numeric($original_amount) && wmf_civicrm_is_valid_currency($original_currency)) {
    return ['original_currency' => $original_currency, 'original_amount' => $original_amount];
  }

  if (is_numeric($original_amount)) {
    return ['original_currency' => 'USD', 'original_amount' => $usd_amount];
  }
  return [];
}

/**
 * Determine if a code represents a supported currency. Uses the
 * SmashPig currency list as a canonical source.
 *
 * @param string $currency should be an ISO 4217 code
 *
 * @return bool true if it's a real currency that we can handle
 */
function wmf_civicrm_is_valid_currency($currency) {
  $all_currencies = array_keys(CurrencyRates::getCurrencyRates());
  return in_array($currency, $all_currencies);
}

/**
 * Abuse the permissions hook to prevent de-duping without a limit
 *
 * @param string $permission
 * @param bool $granted
 *
 * @return bool
 */
function wmf_civicrm_civicrm_permission_check($permission, &$granted) {
  if ($permission === 'merge duplicate contacts') {
    $action = CRM_Utils_Request::retrieve('action', 'String');
    $path = CRM_Utils_System::currentPath();
    if (
      $path === 'civicrm/contact/dedupefind' &&
      !CRM_Utils_Request::retrieve('limit', 'Integer') &&
      ($action != CRM_Core_Action::PREVIEW)
    ) {
      CRM_Core_Session::setStatus(ts('Not permitted for WMF without a limit - this is a setting (dedupe_default_limit) configured on administer->system settings -> misc'));
      $granted = FALSE;
    }
  }
  return TRUE;
}

/**
 * Queue wrapper for api function.
 *
 * I'm hoping to get this or a similar fix upstreamed - so this
 * should be temporary - it adds a function that calls the v4 api,
 * ignoring the ctx - which doesn't serialise well...
 *
 * @param $ctx
 * @param $entity
 * @param $action
 * @param $params
 *
 * @return true
 * @throws \API_Exception
 * @throws \Civi\API\Exception\NotImplementedException
 */
function civicrm_api4_queue($ctx, $entity, $action, $params): bool {
  try {
    civicrm_api4($entity, $action, $params);
  }
  catch (CRM_Core_Exception $e) {
    \Civi::log('wmf')->error('queued action failed {entity} {action} {params} {message} {exception}', [
      'entity' => $entity,
      'action' => $action,
      'params' => $params,
      'message' => $e->getMessage(),
      'exception' => $e,
    ]);
    return FALSE;
  }
  return TRUE;
}

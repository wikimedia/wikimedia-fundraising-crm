<?php

use Civi\Api4\OptionValue;

require_once(__DIR__ . "/bootstrap.inc");
require_once 'update_custom_fields.php';

/**
 * On new install call these functions.
 *
 * Some things need to run on update but not on new installs in which case they won't be below.
 *
 * A good example is that we have update functions to 'enable all the extensions we need' - on
 * new installs we need to run this only once as the list is dynamic so we don't need to call
 * each update function that does that. Another e.g is datacleanup tasks.
 *
 * @throws \CiviCRM_API3_Exception
 * @throws \DrupalUpdateException
 * @throws \Exception
 */
function wmf_civicrm_install() {
  civicrm_initialize();
  // the escalate is only required for tests/
  _wmf_civicrm_escalate_permissions();
  _wmf_civicrm_update_custom_fields();
  // create financial types & payment instruments
  wmf_civicrm_update_7000();
  // Reset navigation on install.
  wmf_civicrm_update_7063();

  // Update merge activity to filter=1 (likely already in core & can just go).
  wmf_civicrm_update_7210();
  // Update message template.
  wmf_civicrm_update_7280();
  // Add index on contact.nick_name (not upstreamed - maybe not appropriate)
  wmf_civicrm_update_7455();
  // enable civi campaign (not sure if setting default will work - try).
  wmf_civicrm_update_7525();
  // Dedupe rules
  wmf_civicrm_update_7570();
  // ReportInstance create - moved to mgd.
  wmf_civicrm_update_7585();
  // Enable our selected geocoders.
  wmf_civicrm_update_7615();
  // Add activity.location index, not in core.
  wmf_civicrm_update_7890();

  wmf_civicrm_update_8115();
}

/**
 * Escalate permissions.
 *
 * In general we do api calls from php with check_permissions = FALSE so this doesn't matter.
 *
 * However, when there is an error the debug output is affected by permissions -ie
 *
 * if (CRM_Core_Permission::check('Administer CiviCRM') || CIVICRM_UF == 'UnitTests') {
 *
 * For core tests the UF is UnitTests so the extra debug is returned but we are running
 * under Drupal so we need to be more aggressive.
 */
function _wmf_civicrm_escalate_permissions() {
  civicrm_initialize();
  CRM_Core_Config::singleton()->userPermissionTemp = new CRM_Core_Permission_Temp();
  CRM_Core_Config::singleton()->userPermissionTemp->grant('administer CiviCRM');
}
/**
 * Add contribution types and payment instruments
 */
function wmf_civicrm_update_7000() {
  wmf_civicrm_bootstrap_civi();
  require_once 'update_payment_instruments.php';
  wmf_install_add_missing_payment_instruments();
}

/**
 * Reset navigation menu.
 *
 * CRM-17176
 *
 * @throws \CiviCRM_API3_Exception
 */
function wmf_civicrm_update_7063() {
  civicrm_initialize();
  civicrm_api3('Navigation', 'reset', array(
    'for' => "report",
  ));
}

/**
 * Oops this activity type was added without filter = 1 being set.
 *
 * CRM-18327 / T119246.
 */
function wmf_civicrm_update_7210() {
  civicrm_initialize();
  CRM_Core_DAO::executeQuery(
    "UPDATE civicrm_option_value ov
       LEFT JOIN civicrm_option_group og ON og.id = ov.option_group_id
       SET filter = 1
       WHERE ov.name = 'Contact Deleted By Merge' AND og.name = 'activity_type'"
  );
}

/**
 * Update the preferred_language field in civicrm_contact based on tracking
 * data.
 *
 * Bug: T96410
 */
function wmf_civicrm_update_7260() {
  civicrm_initialize();
  require_once('update_7260.php');
  _wmf_civicrm_update_7260_update_preferred_language();
}

/**
 * Clean up weird English variants from preferred_language field.
 *
 * Good bye Dutch English, Uzbekastani English etc.
 *
 * Bug: T96410
 */
function wmf_civicrm_update_7270() {
  civicrm_initialize();
  $nonUsefulEnglishes = array(
    // these ones have information in CldrData.php so don't alter.
    //'en_BE', 'en_ZA', 'en_BW', 'en_BZ', 'en_HK', 'en_IN', 'en_JM', 'en_NA', 'en_PK', 'en_SG', 'en_TT', 'en_ZW',
    'en_NZ', // :-(
    'en_EN', // en_GB instead? Only 3 - who cares.
    'en_SE', 'en_NO', 'en_NL', 'en_ES', 'en_IT', 'en_IL', 'en_DK', 'en_FR', 'en_IE',
    'en_MY', 'en_BR', 'en_RO', 'en_AT', 'en_HU', 'en_PL', 'en_MX', 'en_PT', 'en_JP',
    'en_CN', 'en_CZ', 'en_SK', 'en_GR', 'en_DE', 'en_AE', 'en_UA', 'en_TH', 'en_TW', 'en_LV', 'en_LU',
    'en_CH', 'en_PH', 'en_SI', 'en_BG', 'en_AR', 'en_HR', 'en_CL', 'en_CO', 'en_IS', 'en_LT', 'en_CY',
    'en_XX', 'en_KW', 'en_UY', 'en_QA', 'en_MT', 'en_PE', 'en_VN', 'en_CR', 'en_RS', 'en_LK', 'en_KZ',
    'en_EG', 'en_BH', 'en_DO', 'en_PR', 'en_NG', 'en_VE', 'en_EC', 'en_PA', 'en_OM',
    'en_BA', 'en_JO', 'en_KE', 'en_GT', 'en_MU', 'en_GE', 'en_AZ', 'en_AM', 'en_BN', 'en_MK',
    'en_NI', 'en_AL', 'en_BD', 'en_BS', 'en_BM', 'en_KH', 'en_BB', 'en_SV', 'en_MD', 'en_HN', 'en_MO',
    'en_NP', 'en_VI', 'en_MV', 'en_GI', 'en_KY', 'en_TZ', 'en_ET', 'en_AO', 'en_ME', 'en_MA',
    'en_MZ', 'en_AF', 'en_GU', 'en_PY', 'en_AD', 'en_FO', 'en_BO', 'en_MN', 'en_AW', 'en_UG',
    'en_FJ', 'en_GN', 'en_PG', 'en_GH', 'en_ZM', 'en_KG', 'en_GY', 'en_JE', 'en_CW', 'en_LC',
    'en_IM', 'en_BL', 'en_MC', 'en_SB', 'en_DZ', 'en_GL', 'en_HT', 'en_AG', 'en_GD', 'en_LA', 'en_UZ',
    'en_LI', 'en_PF', 'en_KN', 'en_DM', 'en_GG', 'en_NC', 'en_SC', 'en_GP', 'en_TC', 'en_VC', 'en_VG',
    'en_VU', 'en_PS', 'en_TN', 'en_MW', 'en_SX', 'en_SM', 'en_SR', 'en_SZ', 'en_FM', 'en_RE', 'en_RW',
    'en_SN', 'en_TJ', 'en_CM', 'en_AI', 'en_CK', 'en_LR', 'en_MG', 'en_LS', 'en_SL', 'en_TM', 'en_BJ',
    'en_MH', 'en_ML', 'en_WS', 'en_AS', 'en_BF', 'en_BQ', 'en_FK', 'en_GA', 'en_MP', 'en_MQ', 'en_CV',
    'en_GF', 'en_MF', 'en_MR', 'en_KR', 'en_NE', 'en_TL', 'en_RU', 'en_AX', 'en_BI', 'en_ID', 'en_TO',
    'en_FI', 'en_TR', 'en_SA', 'en_GM', 'en_GQ', 'en_HO', 'en_SP', 'en_AN', 'en_TA', 'en_SJ', 'en_IO',
    'en_PW', 'en_JA', 'en_CD', 'en_IR', 'en_UN', 'en_WW', 'en_CG', 'en_DJ', 'en_TD', 'en_TV', 'en_NF',
    'en_OS', 'en_DN', 'en_YE', 'en_ER', 'en_VA', 'en_BY', 'en_LB', 'en_IQ', 'en_MM', 'en_EH', 'en_LY',
    'en_BT', 'en_CF', 'en_SD', 'en_SS', 'en_KP', 'en_AQ', 'en_SH', 'en_CI', 'en_UM', 'en_WF',
    'en_KI', 'en_NU', 'en_SY', 'en_SO', 'en_TG', 'en_CU', 'en_HM', 'en_BV', 'en_MS',
  );
  CRM_Core_DAO::executeQuery("UPDATE civicrm_contact SET preferred_language = 'en' WHERE preferred_language IN('"
    . implode("', '", $nonUsefulEnglishes) . "')");
  // This only needs to run on production so hard-coding option_group_id seems OK.
  CRM_Core_DAO::executeQuery("UPDATE civicrm_option_value SET is_active = 0 WHERE option_group_id = 86 AND value IN('"
    . implode("', '", $nonUsefulEnglishes) . "')");
}

/**
 * Clean up legacy junk data from preferred_language field.
 *
 * This nulls out '_' junk data string (19690 rows)
 * and changes '_US' to 'en_US' (which is implied) (25387 rows).
 * plus some other oddities.
 *
 * Bug: T96410
 */
function wmf_civicrm_update_7275() {
  civicrm_initialize();
  // 19691 records.
  CRM_Core_DAO::executeQuery("UPDATE civicrm_contact SET preferred_language = NULL WHERE preferred_language = '_' OR preferred_language = '<c_US'");
  CRM_Core_DAO::executeQuery("UPDATE civicrm_contact SET preferred_language = 'en_US' WHERE preferred_language = '_US'");
  // There are some 14000 of these. They stopped being created 'half a database ago' and they have been
  // effectively treated as 'en' due to the fact the data is invalid. NULL has the same effect.
  // We could try to guess them by their country but that would break from what we have been doing and could be wrong.
  CRM_Core_DAO::executeQuery("UPDATE civicrm_contact SET preferred_language = NULL WHERE preferred_language LIKE '\_%'");
  // only 186, very old. Same consideration about choosing to set to NULL.
  CRM_Core_DAO::executeQuery("UPDATE civicrm_contact SET preferred_language = NULL WHERE preferred_language LIKE 'Do_%'");
  // 9356 with an extraneous '_' at the end
  CRM_Core_DAO::executeQuery("UPDATE civicrm_contact SET preferred_language = REPLACE(preferred_language, '_', '') WHERE RIGHT(preferred_language, 1) = '_'");
  // Just a single oddity.
  CRM_Core_DAO::executeQuery("UPDATE civicrm_contact SET preferred_language = 'zh_CN' WHERE preferred_language = '恩_CN'");
}

/**
 * Update offline message template to match thank you letter.
 *
 * The template is cut down from our standard thank you in the following ways
 *
 * 1) I pretty much by-passed translation - I’m thinking this is mostly for a
 * small number of English language receipts to be manually generated. I’d need
 * to do something more complex to get it translating well
 * 2) I ditched the RecurringRestarted & UnrecordedCharge logic. I figured you
 * would be sending these on request.
 * 3)I have assumed we have a first name & not done the fall-back to donor (on
 * assumption manual sends know the name).
 * 4) I did not include "{% if recurring %}<p> This donation is part of a
 * recurring subscription. Monthly payments will be debited by the Wikimedia
 * Foundation until you notify us to stop. If you’d like to cancel the payments
 * please see our
 * <a
 * href="https://wikimediafoundation.org/wiki/Special:LandingCheck?landing_page=Cancel_or_change_recurring_payment..
 *
 * In other words this is a pretty-simple English language solution.
 *
 * Bug T137496
 */
function wmf_civicrm_update_7280() {
  require_once 'update_receipt.php';
  _wmf_civicrm_update_offline_receipt();
}

/**
 * Add index to nick_name column as we have decided to use it for imports.
 *
 * We have decided the Benevity Import should accept org matches on nick_name
 * or organization_name in order to provide the option to refer to them with
 * 2 names. In order to use it it must be indexed. Note that I believe the
 * index size is relative to the number of values in it (currently a few
 * hundred).
 *
 * Bug: T115044
 */
function wmf_civicrm_update_7455() {
  civicrm_initialize();
  $tables = array('civicrm_contact' => array('nick_name'));
  CRM_Core_BAO_SchemaHandler::createIndexes($tables);
}

/**
 * Enable CiviCampaign.
 */
function wmf_civicrm_update_7525() {
  wmf_civicrm_bootstrap_civi();
  $components = civicrm_api3('Setting', 'getvalue', array(
    'name' => "enable_components",
  ));
  if (isset($components['is_error'])) {
    // weirdness.
    unset($components['is_error']);
  }
  $components[] = 'CiviCampaign';
  civicrm_api3('Setting', 'create', array('enable_components' => $components));
}

/**
 * Tidy up our dedupe rules.
 */
function wmf_civicrm_update_7570() {
  civicrm_initialize();
  CRM_Core_DAO::executeQuery("UPDATE civicrm_dedupe_rule_group SET name = 'IndividualSupervised' WHERE name = 'Kaldari Rule-9'");
  // This didn't cascade right in single query so 2 deletes.
  CRM_Core_DAO::executeQuery("DELETE r FROM civicrm_dedupe_rule_group rg LEFT JOIN civicrm_dedupe_rule r ON r.dedupe_rule_group_id = rg.id WHERE name = 'IndividualSupervised2_14'");
  CRM_Core_DAO::executeQuery("DELETE FROM civicrm_dedupe_rule_group WHERE name = 'IndividualSupervised2_14'");

  $generalRules = CRM_Core_DAO::singleValueQuery(
    "SELECT count(*) FROM civicrm_dedupe_rule_group WHERE used = 'General' AND is_reserved = 1 AND contact_type = 'Individual'"
  );
  if ($generalRules > 1) {
    // Otherwise we are probably on someone's dev environment. Goal here is to remove duff data from prod not mess with people (much).
    CRM_Core_DAO::executeQuery("
      DELETE r FROM civicrm_dedupe_rule_group rg
      LEFT JOIN civicrm_dedupe_rule r ON r.dedupe_rule_group_id = rg.id
      WHERE used = 'General' AND is_reserved = 1 AND contact_type = 'Individual' AND rg.id IN(10,11)
    ");
    CRM_Core_DAO::executeQuery("
      DELETE FROM civicrm_dedupe_rule_group
      WHERE used = 'General' AND is_reserved = 1 AND contact_type = 'Individual' AND id IN(10,11)
    ");
  }

  // Create a new rule group that will catch a broad range of contacts (but should only be
  // used against a narrow one for performance reasons.
  // This is to help major gifts pull up a screen of possible matches rather than
  // trawling for them.
  //
  // Struggling to think of a precise name / description so going for something
  // people should remember. Am tempted to add a 'Go Fish' button to contact dash now.
  // This rule is set up on staging and can be accessed from a contact record
  // under the drop down actions. I tried it on a few fairly common names (John Smith)
  // and there was some lag in those cases but not that bad & certainly better than doing searches.
  $ruleGroup = civicrm_api3('RuleGroup', 'create', array(
    'name' => 'fishing_net',
    'title' => 'Fishing Net',
    'contact_type' => 'Individual',
    'used' => 'General',
    'threshold' => 150,
  ));

  $queryStart = "INSERT INTO civicrm_dedupe_rule (dedupe_rule_group_id, rule_table, rule_field, rule_weight) VALUES ({$ruleGroup['id']}, ";

  // Only 5 rule-criteria can be configured in the UI but more will work if added.
  // An email match alone is enough to hit the threshold.
  CRM_Core_DAO::executeQuery($queryStart . "'civicrm_email', 'email', 150 )");

  // Last name is enough if the street address is the same OR the
  // first name is the same too and either state or city is the same.
  // There are some odd street address ones -
  CRM_Core_DAO::executeQuery($queryStart . "'civicrm_contact', 'last_name', 120 )");
  CRM_Core_DAO::executeQuery($queryStart . "'civicrm_contact', 'first_name', 25 )");
  CRM_Core_DAO::executeQuery($queryStart . "'civicrm_address', 'street_address', 30 )");
  CRM_Core_DAO::executeQuery($queryStart . "'civicrm_address', 'city', 10 )");
  CRM_Core_DAO::executeQuery($queryStart . "'civicrm_address', 'state_province_id', 5 )");
}

/**
 * Add report for Address History tab.
 *
 * Bug: T142549
 */
function wmf_civicrm_update_7585() {
  civicrm_initialize();
  civicrm_api3('ReportInstance', 'create', array(
    'title' => ts('Address History'),
    'report_id' => 'contact/addresshistory',
    'description' => 'ContactAddress History',
    'permission' => 'access CiviReport',
    'form_values' => serialize(array(
      'fields' => array(
        'address_display_address' => 1,
        'log_date' => 1,
        'address_location_type_id' => 1,
        'address_is_primary' => 1,
        'log_conn_id' => 1,
        'log_user_id' => 1,
        'log_action' => 1,
      ),
      'contact_dashboard_tab' => array('contact_dashboard_tab' => '1'),
    )),
  ));
}

/**
 * Add geocoder extension.
 *
 * Disable geocoders we don't want.
 *
 * Bug: T184830
 */
function wmf_civicrm_update_7615() {
  wmf_civicrm_ensure_correct_geocoder_enabled();
}

/**
 * Add index to civicrm_activity.location.
 *
 * Bug: T228106
 */
function wmf_civicrm_update_7890() {
  civicrm_initialize();
  $tables = ['civicrm_activity' => ['location']];
  CRM_Core_BAO_SchemaHandler::createIndexes($tables);
}

/**
 * Disable slow system checks.
 *
 * This allows us to remove the code that hacks the whole subsystem out & just
 * run the ones that don't hurt performance. I ran them all with logging on to pick what to
 * disable. Output:
 *
 * Feb 18 14:43:19  [info] calling checkLocaleSupportsAddressParsing
 *
 * Feb 18 14:43:19  [info] finished checkLocaleSupportsAddressParsing
 *
 * Feb 18 14:43:19  [info] calling checkPhpVersion
 *
 * Feb 18 14:43:19  [info] finished checkPhpVersion
 *
 * Feb 18 14:43:19  [info] calling checkPhpMysqli
 *
 * Feb 18 14:43:19  [info] finished checkPhpMysqli
 *
 * Feb 18 14:43:19  [info] calling checkMysqlTime
 *
 * Feb 18 14:43:19  [info] finished checkMysqlTime
 *
 * Feb 18 14:43:19  [info] calling checkDebug
 *
 * Feb 18 14:43:19  [info] finished checkDebug
 *
 * Feb 18 14:43:19  [info] calling checkOutboundMail
 *
 * Feb 18 14:43:19  [info] finished checkOutboundMail
 *
 * Feb 18 14:43:19  [info] calling checkDomainNameEmail
 *
 * Feb 18 14:43:19  [info] finished checkDomainNameEmail
 *
 * Feb 18 14:43:19  [info] calling checkDefaultMailbox
 *
 * Feb 18 14:43:19  [info] finished checkDefaultMailbox
 *
 * Feb 18 14:43:19  [info] calling checkLastCron
 *
 * Feb 18 14:43:19  [info] finished checkLastCron
 *
 * Feb 18 14:43:19  [info] calling checkUrlVariables
 *
 * Feb 18 14:43:19  [info] finished checkUrlVariables
 *
 * Feb 18 14:43:19  [info] calling checkDirVariables
 *
 * Feb 18 14:43:19  [info] finished checkDirVariables
 *
 * Feb 18 14:43:19  [info] calling checkDirsWritable
 *
 * Feb 18 14:43:19  [info] finished checkDirsWritable
 *
 * Feb 18 14:43:19  [info] calling checkVersion
 *
 * Feb 18 14:43:19  [info] finished checkVersion
 *
 * Feb 18 14:43:19  [info] calling checkExtensionUpgrades
 *
 * Feb 18 14:43:19  [info] finished checkExtensionUpgrades
 *
 * Feb 18 14:43:19  [info] calling checkDbVersion
 *
 * Feb 18 14:43:19  [info] finished checkDbVersion
 *
 * Feb 18 14:43:19  [info] calling checkDbEngine
 *
 * Feb 18 14:43:19  [info] finished checkDbEngine
 *
 * Feb 18 14:43:19  [info] calling checkReplyIdForMailing
 *
 * Feb 18 14:43:19  [info] finished checkReplyIdForMailing
 *
 * Feb 18 14:43:19  [info] calling checkMbstring
 *
 * Feb 18 14:43:19  [info] finished checkMbstring
 *
 * Feb 18 14:43:19  [info] calling checkEnvironment
 *
 * Feb 18 14:43:19  [info] finished checkEnvironment
 *
 * Feb 18 14:43:19  [info] calling checkResourceUrl
 *
 ****** Feb 18 14:43:24  [info] finished checkResourceUrl
 *
 * Feb 18 14:43:24  [info] calling checkMysqlUtf8mb4
 *
 * Feb 18 14:43:24  [info] finished checkMysqlUtf8mb4
 *
 * Feb 18 14:43:24  [info] calling checkFinancialAclReport
 *
 * Feb 18 14:43:24  [info] finished checkFinancialAclReport
 *
 * Feb 18 14:43:24  [info] calling checkOptionGroupValues
 *
 * Feb 18 14:43:24  [info] finished checkOptionGroupValues
 *
 * Feb 18 14:43:24  [info] calling checkPriceFields
 *
 * Feb 18 14:43:24  [info] finished checkPriceFields
 *
 * Feb 18 14:43:24  [info] calling checkIndices
 *
 * Feb 18 14:43:24  [info] finished checkIndices
 *
 * Feb 18 14:43:24  [info] calling checkMissingLogTables
 *
 * Feb 18 14:43:24  [info] finished checkMissingLogTables
 *
 * Feb 18 14:43:24  [info] calling checkLogFileIsNotAccessible
 *
 * Feb 18 14:43:24  [info] finished checkLogFileIsNotAccessible
 *
 * Feb 18 14:43:24  [info] calling checkUploadsAreNotAccessible
 *
 ***** Feb 18 14:43:34  [info] finished checkUploadsAreNotAccessible
 *
 * Feb 18 14:43:34  [info] calling checkDirectoriesAreNotBrowseable
 *
 ***** Feb 18 14:44:34  [info] finished checkDirectoriesAreNotBrowseable
 *
 * Feb 18 14:44:34  [info] calling checkFilesAreNotPresent
 *
 * Feb 18 14:44:34  [info] finished checkFilesAreNotPresent
 *
 * Feb 18 14:44:34  [info] calling checkRemoteProfile
 *
 * Feb 18 14:44:34  [info] finished checkRemoteProfile
 *
 * Feb 18 14:44:34  [info] calling checkCxnOverrides
 *
 * Feb 18 14:44:34  [info] finished checkCxnOverrides
 *
 * Feb 18 14:44:34  [info] calling checkOrphans
 *
 * Feb 18 14:44:34  [info] finished checkOrphans
 *
 * Feb 18 14:44:34  [info] calling checkSchema
 *
 * Feb 18 14:44:34  [info] finished checkSchema
 *
 * @throws \Civi\API\Exception\UnauthorizedException
 */
function wmf_civicrm_update_8015() {
  civicrm_initialize();
  $slowChecks = [
    'checkResourceUrl',
    'checkUploadsAreNotAccessible',
    'checkDirectoriesAreNotBrowseable',
    // These 2 did not show up as slow above but I'm pretty sure it's because the results
    // were already cached - they DO rely on crossing the firewall
    'checkVersion',
    'checkExtensions',
    // Let's disable this too as we are deliberately not running cron.
    'checkLastCron',
  ];
  foreach ($slowChecks as $slowCheck) {
    \Civi\Api4\StatusPreference::create()
      ->addValue('name', $slowCheck)
      ->addValue('is_active', 0)
      ->setCheckPermissions(FALSE)
      ->execute();
  }
}

/**
 * Create ts 2020 export group.
 *
 * This creates a group for the contacts to be updated in the 2020
 * ts export. From testing on staging it is possible to actually export this many rows
 * and by putting them in a group we give MG a chance to dedupe first if they wish.
 *
 * Bug: T247624
 *
 * @throws \CiviCRM_API3_Exception
 */
function wmf_civicrm_update_8035() {
  civicrm_initialize();
  $groupID = (int) civicrm_api3('Group', 'create', [
    'name' => 'targetsmart_export_2020',
    'title' => 'Target smart export 2020',
    'description' => 'Contacts to be exported for target smart this year',
  ])['id'];
  $communicationPreferencesTableName = civicrm_api3('CustomGroup', 'getvalue', ['return' => 'table_name', 'name' => 'Communication']);
  CRM_Core_DAO::executeQuery(
    "INSERT INTO civicrm_group_contact (group_id, status, contact_id)
    SELECT $groupID, 'Added', wmf.entity_id
    FROM wmf_donor AS wmf
    INNER JOIN civicrm_contact AS c ON c.id = wmf.entity_id
    INNER JOIN civicrm_address AS a ON (c.id = a.contact_id AND a.is_primary = 1)
    LEFT JOIN $communicationPreferencesTableName cv ON cv.entity_id = wmf.entity_id
    INNER JOIN civicrm_email e ON e.contact_id = c.id AND e.is_primary = 1 AND e.on_hold IS NOT NULL

    WHERE
      c.contact_type = 'Individual'
      AND a.country_id = 1228
      AND a.street_address IS NOT NULL
      # This complex clause gets the earliest of endowment_first_donation_date & first_donation_date
      # and ensures it is greater than 1 Jul 2019
      # effectively 'first gave this financial year'
      AND IF(wmf.first_donation_date IS NULL OR wmf.endowment_first_donation_date IS NULL,
         COALESCE(wmf.first_donation_date, wmf.endowment_first_donation_date),
         LEAST(wmf.first_donation_date,wmf.endowment_first_donation_date)) >= '2019-07-01'
      AND c.is_deleted = 0

      # Yep 3 forms of opt in / out & we have to be careful about NULL
      AND c.is_opt_out = 0
      AND (cv.do_not_solicit = 0 OR cv.do_not_solicit IS NULL)
      AND (cv.opt_in = 1 OR cv.opt_in IS NULL)

      # total of the 2 fields is greater than 5.
      AND (wmf.total_2019_2020 + wmf.endowment_total_2019_2020 ) >= 5

      # I took a look to see if there were many that needed deduping and
      # this list stood out as being intentionally invalid addresses.
      AND email NOT IN (
        'na@na.com',
        'name@domain.com',
        'no@gmail.com',
        'no@no.com',
        'noemail@gmail.com',
        'noemail@noemail.com',
        'noemail@yahoo.com',
        'none@none.com',
        'noneofyourbusiness@gmail.com',
        'nope@nope.com',
        'nothanks@gmail.com',
        'a@b.com'
      )
  ");

}

/**
 * Add index to civicrm_country.iso_code.
 *
 * To hone the silverpop queries we really want to join on this so we need an index.
 *
 * Bug: T253152
 */
function wmf_civicrm_update_8070() {
  civicrm_initialize();
  $tables = ['civicrm_country' => ['iso_code']];
  CRM_Core_BAO_SchemaHandler::createIndexes($tables);
}

/*
 * Fix the fixed next_sched_contribution date for ingenio recurrings that fall an hour to soon
 *
 * @throws \API_Exception
 *
 * Bug: T264954
 */
function wmf_civicrm_update_8090() {
  civicrm_initialize();

  CRM_Core_DAO::executeQuery("
    UPDATE civicrm_contribution_recur
    LEFT JOIN civicrm_contribution ON civicrm_contribution.contribution_recur_id = civicrm_contribution_recur.id
    SET next_sched_contribution_date = DATE_ADD(next_sched_contribution_date, INTERVAL 1 DAY)
    WHERE civicrm_contribution_recur.next_sched_contribution_date = '2020-11-03'
    AND civicrm_contribution.receive_date > '2020-10-10'
  ");
}

/**
 * Add civicrm_managed records for our wmf reports.
 *
 * We are converting them to being loaded through a mgd file.
 * However, since they already exist we need to add the mgd row on the prod
 * db - not required for dev dbs as the mgd will work when they don't already exist.
 *
 * This does not need to be transitioned to drupal code.
 *
 * @throws \API_Exception
 */
function wmf_civicrm_update_8095() {
  civicrm_initialize();
  OptionValue::delete(FALSE)->setWhere([
    ['option_group_id:name', '=', 'report_template'],
    ['name', '=', 'CRM_Report_Form_Contribute_Trends'],
  ])->execute();

  $reportsToKeep = OptionValue::get(FALSE)->setWhere([
    ['option_group_id:name', '=', 'report_template'],
    ['name', 'IN', ['CRM_Report_Form_Contribute_WmfLybunt', 'CRM_Report_Form_Contribute_GatewayReconciliation']],
   ])->setSelect(['id', 'name'])->execute();
  $nameMap = [
    'CRM_Report_Form_Contribute_GatewayReconciliation' => 'WMF gateway reconciliation report - used by Pats Pena',
    'CRM_Report_Form_Contribute_WmfLybunt' => 'WMF LYBUNT report (possibly dead)',
  ];
  foreach ($reportsToKeep as $report) {
    CRM_Core_DAO::executeQuery("
      INSERT INTO civicrm_managed (module, name, entity_type, entity_id)
      VALUES('wmf-civicrm', '{$nameMap[$report['name']]}', 'ReportTemplate', {$report['id']})
   ");
  }
}

/**
 * Add combined index on entity_id and lifetime_usd_total on wmf_donor table.
 *
 * In testing this made a significant difference when filtering for donors with
 * giving over x - which is a common usage.
 */
function wmf_civicrm_update_8110() {
  civicrm_initialize();
  CRM_Core_DAO::executeQuery('ALTER TABLE wmf_donor ADD INDEX entity_total (entity_id, lifetime_usd_total)');
}

/**
 * Update es_MX display name to "Spanish (Latin America)"
 */
function wmf_civicrm_update_8115() {
  civicrm_initialize();
  OptionValue::update(FALSE)
    ->addWhere('option_group_id:name', '=', 'languages')
    ->addWhere('name', '=', 'es_MX')
    ->addValue('label', 'Spanish (Latin America)')
    ->addValue('value', 'es_MX')
    ->execute();
}

/**
 * Update recurring contribution statuses to in progress.
 *
 * This fixes the status on recurring contributions where the status
 * is incorrectly 'completed' (a status we don't really use since
 * they are either in progress or cancelled).
 *
 * I've limited to updating ones with a contribution this year.
 *
 * Timing from staging
 *
 * Query OK, 189391 rows affected (1 min 25.869 sec)
 *
 * Bug: T277590
 */
function wmf_civicrm_update_8220() {
  civicrm_initialize();
  CRM_Core_DAO::executeQuery("UPDATE civicrm_contribution_recur
    SET contribution_status_id = 5
    WHERE id IN (
      SELECT cr.id
      FROM civicrm_contribution_recur cr
      INNER JOIN civicrm_contribution c
        ON c.contribution_recur_id = cr.id AND c.receive_date > '2021-01-01'
      WHERE cr.contribution_status_id = 1
      GROUP BY cr.id
    )"
  );
}

/**
 * Add index on civicrm_deleted_emails.
 *
 * Slow query spotted despite the table having only 206 rows.
 *
 * Bug: T280894
 */
function wmf_civicrm_update_8225() {
  civicrm_initialize();
  CRM_Core_DAO::executeQuery('ALTER TABLE civicrm_deleted_email ADD PRIMARY KEY (id)');
}

/**
 * Add Apple payment instrument
 */
function wmf_civicrm_update_8226() {
  wmf_civicrm_bootstrap_civi();
  require_once 'update_payment_instruments.php';
  wmf_install_add_missing_payment_instruments();
}

<?php

use Civi\Api4\ThankYou;
use Civi\Api4\Activity;
use Civi\Omnimail\MailFactory;
use Civi\WMFException\WMFException;
use Civi\WMFThankYou\From;
use SmashPig\Core\UtcDate;
use wmf_communication\CiviMailStore;
use wmf_communication\CiviMailingInsertException;
use wmf_communication\CiviMailingMissingException;
use wmf_communication\CiviQueueInsertException;

// TODO:
// * use more exceptions in place of watchdog/return false
// * encapsulate template params structure and validation
// * implement 'specials' contingency passthru
// * reconsider need for twig extensions, we already do calculated values
// * give template fragments a named key rather than using integers

// FIXME: this constant is for test code
const DUMB_BIG_TY_DAYS = 100000;

/**
 * Implements hook_permission().
 */
function thank_you_permission() {
  return [
    'administer thank you' => [
      'title' => t('Administer Thank-You'),
    ],
  ];
}

function thank_you_menu() {
  $items = [];

  $items['admin/config/thank_you'] = [
    'title' => 'Thank you settings',
    'access arguments' => ['administer thank you'],
    'page callback' => 'system_admin_menu_block_page',
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  ];

  $items['admin/config/thank_you/configure'] = [
    'title' => 'Configure thank you module',
    'description' => 'Configure thank you note options.',
    'access arguments' => ['administer thank you'],
    'page callback' => 'drupal_get_form',
    'page arguments' => ['thank_you_settings_form'],
  ];

  $items['admin/config/thank_you/test'] = [
    'title' => 'Send test thank-yous',
    'description' => 'Send a test letter',
    'access arguments' => ['access content'],
    'page callback' => 'drupal_get_form',
    'page arguments' => ['thank_you_send_test_form'],
  ];

  return $items;
}

/**
 * Send a test email
 */
function thank_you_send_test_form() {
  civicrm_initialize();
  global $language, $user;
  $user_lc = ($user->language ? $user->language : $language->language);

  $form['name'] = [
    '#type' => 'textfield',
    '#title' => t('Donor\'s name'),
    '#required' => FALSE,
    '#default_value' => 'Testy McTestersen',
  ];

  $form['recipient_address'] = [
    '#type' => 'textfield',
    '#title' => t('Send test email to'),
    '#default_value' => $user->mail,
    '#required' => TRUE,
  ];

  $form['from_name'] = [
    '#type' => 'textfield',
    '#title' => t('Sender\'s name'),
    '#default_value' => 'Thank-you Testmeister',
    '#required' => TRUE,
  ];

  $form['from_address'] = [
    '#type' => 'textfield',
    '#title' => t('Sender\'s email address'),
    '#default_value' => From::getFromAddress('thank_you'),
    '#required' => TRUE,
  ];

  // load the available languages to test
  // TODO: add a staging list so that one can test before enabling
  // TODO elsewhere: these locales should be in canonical form
  $langs = [];
  foreach (glob(__DIR__ . '/../../../default/civicrm/extensions/wmf-civicrm/msg_templates/thank_you/thank_you.*.html.txt') as $lang) {
    $lang = substr($lang, strrpos($lang, '/') + 1);
    $lang = substr($lang, strpos($lang, '.') + 1);
    $lang = substr($lang, 0, strpos($lang, '.'));
    // Special case: localization needs Portuguese (Portugal) to be passed in as
    // pt_PT but our filename is just thank_you.pt.html.
    if ($lang === 'pt') {
      $lang = 'pt_PT';
    }
    $langs[$lang] = $lang;
  }
  $langs['all'] = '- ALL -';
  ksort($langs);

  $form['locale'] = [
    '#type' => 'select',
    '#title' => t('Thank you message language or locale'),
    # TODO: parse a locale in whatever format
    '#description' => t('Examples: "en" or "pt-BR".  The special "all" jackpot will win you a thank-you letter in each supported language.'),
    '#required' => TRUE,
    '#default_value' => $user_lc,
    '#options' => $langs,
  ];

  $form['template'] = [
    '#type' => 'select',
    '#title' => t('Template'),
    '#description' => t('Template of the thank you email'),
    '#required' => TRUE,
    '#default_value' => 'thank_you',
    '#options' => [
      'thank_you' => 'thank_you',
      'endowment_thank_you' => 'endowment_thank_you',
      'monthly_convert' => 'monthly_convert',
    ],
  ];

  $form['currency'] = [
    '#type' => 'textfield',
    '#title' => t('Donation currency'),
    '#description' => t('Use the three-digit <a target="_blank" href="http://en.wikipedia.org/wiki/ISO_4217#Active_codes">ISO code</a>.'),
    '#default_value' => 'EUR',
    '#required' => TRUE,
  ];

  $form['amount'] = [
    '#type' => 'textfield',
    '#title' => t('Donation amount'),
    '#default_value' => '1.99',
    '#required' => TRUE,
  ];

  # TODO: optional day picker added using unobtrusive js
  $form['receive_date'] = [
    '#type' => 'textfield',
    '#title' => t('When do we say this donation took place?'),
    '#description' => t('Enter using any date format, or the day picker'),
    '#default_value' => date(DateTime::ISO8601),
  ];

  $form['transaction_id'] = [
    '#type' => 'textfield',
    '#title' => t('Transaction ID'),
    '#description' => t('ID to show in the text of the email, for example: "CNTCT-1234"'),
    '#default_value' => 'TEST-' . mt_rand(),
  ];

  $form['contribution_id'] = [
    '#type' => 'textfield',
    '#title' => t('Contribution ID'),
    '#description' => t('Actual ID of contribution to be thanked, for example: 12345'),
    '#default_value' => mt_rand(),
  ];

  $form['recurring'] = [
    '#type' => 'checkbox',
    '#title' => t('Is a recurring donation?'),
    '#default_value' => FALSE,
  ];

  $form['contribution_tags'] = [
    '#type' => 'textfield',
    '#title' => t('Contribution Tags'),
    '#description' => t('Comma or space-separated list of contribution tags, like "RecurringRestarted"'),
    '#default_value' => '',
  ];

  $form['submit'] = [
    '#value' => 'Send test email',
    '#type' => 'submit',
  ];

  return $form;
}

/**
 * TODO: document what code and configuration this test covers, and which it
 * does not
 */
function thank_you_send_test_form_submit($form_id, $form_values) {
  civicrm_initialize();
  $params = $form_values['values'];
  $params['contact_id'] = -1;

  # Massage the params a bit
  $names = preg_split('/ +/', $params['name'], 2, PREG_SPLIT_NO_EMPTY);
  if (count($names) == 2) {
    [$params['first_name'], $params['last_name']] = $names;
  }
  else {
    $params['first_name'] = $params['last_name'] = '';
  }

  $params['locale'] = wmf_common_legacy_locale_civi_to_template($params['locale']);
  $mw_locale = wmf_common_locale_civi_to_mediawiki($params['locale']);
  $params['unsubscribe_link'] = build_unsub_link(-1, $params['recipient_address'], $mw_locale);

  // Turn a comma space separated list into an array
  if (array_key_exists('contribution_tags', $params)) {
    $params['contribution_tags'] = preg_split('/[\s,]+/', $params['contribution_tags']);
  }

  // Day of month for monthly convert template
  $ordinal = new \NumberFormatter($params['locale'], \NumberFormatter::ORDINAL);
  $params['day_of_month'] = $ordinal->format(date('j'));

  if ($params['locale'] === "all") {
    $langs = [];
    foreach (glob(__DIR__ . '/../../../default/civicrm/extensions/wmf-civicrm/msg_templates/thank_you/thank_you.*.html.txt') as $lang) {
      $lang = substr($lang, strrpos($lang, '/') + 1);
      $lang = substr($lang, strpos($lang, '.') + 1);
      $lang = substr($lang, 0, strpos($lang, '.'));
      // Special case: localization needs Portuguese (Portugal) to be passed in as
      // pt_PT but our filename is just thank_you.pt.html.
      if ($lang === 'pt') {
        $lang = 'pt_PT';
      }
      $langs[$lang] = $lang;
    }

    foreach ($langs as $lc) {
      $params['locale'] = $lc;
      thank_you_send_test($params);
    }
  }
  else {
    thank_you_send_test($params);
  }

  return TRUE;
}

function thank_you_get_languages() {
  return array_map(
    function ($path) {
      return preg_replace('/^.+[.]([^.]+)[.]html$/', '\1', $path);
    },
    glob(__DIR__ . '/templates/html/thank_you.*.html')
  );
}

/**
 * Test thank you.
 *
 * @param $params
 *
 * @throws \Civi\WMFException\WMFException
 */
function thank_you_send_test($params) {
  watchdog('thank_you', "Starting thank_you test send to {$params['recipient_address']} in {$params['locale']}", [], WATCHDOG_INFO);

  if (thank_you_send_mail($params)) {
    drupal_set_message("Test thank you email sent to {$params['recipient_address']} in {$params['locale']}", 'info');
  }
  else {
    drupal_set_message("FAILED to send test thank you email to {$params['recipient_address']} in {$params['locale']}.", 'error');
  }
}

/**
 * Send a TY letter, and do bookkeeping on the Civi records
 * TODO: rewrite the civi api stuff to work like other code
 *
 * @param int $contribution_id
 *
 * @param bool $manualSend
 *   Manual send functions as an override -ignoring the time limit, previous thank yous and no_thankyou reason.
 *
 * @return bool
 * @throws \CiviCRM_API3_Exception
 * @throws \Civi\WMFException\WMFException
 */
function thank_you_for_contribution($contribution_id, $manualSend = FALSE) {
  civicrm_initialize();
  if (!isset(Civi::$statics['thank_you']['giftTableName'])) {
    Civi::$statics['thank_you']['giftTableName'] = civicrm_api3('CustomGroup', 'getvalue', [
      'name' => 'Gift_Data',
      'return' => 'table_name',
    ]);
  }
  $giftTable = Civi::$statics['thank_you']['giftTableName'];
  if (!isset(Civi::$statics['thank_you']['StockTableName'])) {
    Civi::$statics['thank_you']['StockTableName'] = civicrm_api3('CustomGroup', 'getvalue', [
      'name' => 'Stock_Information',
      'return' => 'table_name',
    ]);
  }
  $stockTable = Civi::$statics['thank_you']['StockTableName'];
  $mailingData = CRM_Core_DAO::executeQuery("
		SELECT
			cntr.id AS contribution_id,
			cntr.currency,
			cntr.receive_date,
			cntr.thankyou_date,
			cntr.total_amount,
			cntr.trxn_id,
			cntc.id AS contact_id,
			cntc.display_name,
			cntc.first_name,
			cntc.last_name,
			cntc.preferred_language,
			f.name AS financial_type,
			e.email,
			x.gateway,
			x.no_thank_you,
			x.original_amount,
			x.original_currency,
			g.campaign AS gift_source,
			s.stock_value,
			s.description_of_stock
		FROM civicrm_contribution cntr
		INNER JOIN civicrm_contact cntc ON cntr.contact_id = cntc.id
		LEFT JOIN civicrm_financial_type f ON f.id = cntr.financial_type_id
		LEFT JOIN civicrm_email e ON e.contact_id = cntc.id AND e.is_primary = 1
		INNER JOIN wmf_contribution_extra x ON cntr.id = x.entity_id
		LEFT JOIN $giftTable g ON cntr.id = g.entity_id
		LEFT JOIN $stockTable s ON cntr.id = s.entity_id
		WHERE cntr.id = %1
	", [
    1 => [
      $contribution_id,
      'Int',
    ],
  ]);
  $found = $mailingData->fetch();

  // check that the API result is a valid contribution result
  if (!$found) {
    // the API result is bad
    $msg = 'Could not retrieve contribution record for: ' . $contribution_id . '<pre>' . print_r($mailingData, TRUE) . '</pre>';
    throw new WMFException(WMFException::GET_CONTRIBUTION, $msg);
  }
  $mailingData = $mailingData->toArray();

  // don't send a Thank You email if one has already been sent
  if (!empty($mailingData['thankyou_date']) && !$manualSend) {
    watchdog('thank_you', 'Thank you email already sent for this transaction.', [], WATCHDOG_INFO);
    return FALSE;
  }
  // only send a Thank You email if we are within the specified window
  $ageInSeconds = UtcDate::getUtcTimestamp() - UtcDate::getUtcTimestamp($mailingData['receive_date']);
  if (!$manualSend && $ageInSeconds > 86400 * variable_get('thank_you_days', 14)) {
    watchdog('thank_you', 'Contribution is older than limit, ignoring.', [], WATCHDOG_INFO);
    return FALSE;
  }

  // check for contacts without an email address
  if (empty($mailingData['email']) or $mailingData['email'] === 'nobody@wikimedia.org') {
    watchdog('thank_you', 'No email address found. Processing as anonymous.', [], WATCHDOG_INFO);
    wmf_civicrm_set_no_thank_you($contribution_id, 'anonymous');
    return FALSE;
  }

  if (!$manualSend && $mailingData['no_thank_you']) {
    watchdog('thank_you', "Contribution has been marked no_thank_you={$mailingData['no_thank_you']}, skipping.", [], WATCHDOG_INFO);
    return FALSE;
  }

  $amount = $mailingData['original_amount'];
  $currency = $mailingData['original_currency'];

  // Use settlement currency if the original currency is virtual, for tax reasons.
  if ($mailingData['original_currency'] === 'BTC') {
    $amount = $mailingData['total_amount'];
    $currency = $mailingData['currency'];
  }

  $is_recurring = FALSE;
  try {
    $transaction = WmfTransaction::from_unique_id($mailingData['trxn_id']);
    $is_recurring = $transaction->is_recurring;
  } catch (WMFException $ex) {
    watchdog('thank_you', $ex->getMessage(), NULL, WATCHDOG_NOTICE);
  }

  $locale = $mailingData['preferred_language'];
  if (!$locale) {
    watchdog('thank_you', 'Donor language unknown.  Defaulting to English...', NULL, WATCHDOG_INFO);
    $locale = 'en';
  }
  $mw_locale = wmf_common_locale_civi_to_mediawiki($locale);

  $locale = wmf_common_legacy_locale_civi_to_template( $locale );

  // Select the email template
  if ($mailingData['financial_type'] === 'Endowment Gift') {
    $template = 'endowment_thank_you';
  }
  else {
    $template = 'thank_you';
  }

  $params = [
    'amount' => $amount,
    'contact_id' => $mailingData['contact_id'],
    'currency' => $currency,
    'first_name' => $mailingData['first_name'],
    'from_name' => From::getFromName($template),
    'from_address' => From::getFromAddress($template),
    'last_name' => $mailingData['last_name'],
    'language' => $mailingData['preferred_language'] ?: 'en_US',
    'name' => $mailingData['display_name'],
    'receive_date' => $mailingData['receive_date'],
    'recipient_address' => $mailingData['email'],
    'recurring' => $is_recurring,
    'transaction_id' => "CNTCT-{$mailingData['contact_id']}",
    // shown in the body of the text
    'contribution_id' => $contribution_id,
    // used for the bounce header
    'unsubscribe_link' => build_unsub_link($contribution_id, $mailingData['email'], $mw_locale),
    'contribution_tags' => wmf_civicrm_get_tag_names($contribution_id),
    'template' => $template,
    'gift_source' => $mailingData['gift_source'],
    'stock_value' => $mailingData['stock_value'],
    'description_of_stock' => $mailingData['description_of_stock'],
  ];
  $success = thank_you_send_mail($params);
  $counter = Queue2civicrmTrxnCounter::instance();

  if ($success) {
    watchdog('thank_you', "Thank you mail sent successfully for contribution id: $contribution_id to " . $params['recipient_address'], [], WATCHDOG_INFO);
    thank_you_update_ty_date($mailingData);
    $counter->increment($mailingData['gateway']);
    $counter->addAgeMeasurement($mailingData['gateway'], $ageInSeconds);
    return TRUE;
  }
  else {
    $msg = "Thank you mail failed for contribution id: $contribution_id to " . $params['recipient_address'];
    throw new WMFException(WMFException::BAD_EMAIL, $msg);
  }
}

function thank_you_update_ty_date($contribution) {
  $date = wmf_common_date_unix_to_civicrm(time());
  watchdog('thank_you', "Updating TY send date to: $date", [], WATCHDOG_INFO);

  // We go directly to the database table here to avoid setting off a cascade
  // of line item updates and recalculations.
  $query = 'UPDATE civicrm_contribution
		SET thankyou_date = %1
		WHERE id = %2';

  try {
    CRM_Core_DAO::executeQuery($query, [
      1 => [$date, 'String'],
      2 => [$contribution['contribution_id'], 'Integer'],
    ]);
    return TRUE;
  } catch (Exception $ex) {
    watchdog('thank_you', 'Updating successful TY send failed with details: ' . print_r($ex, TRUE), [], WATCHDOG_ERROR);
  }
  return FALSE;
}

/**
 * Just send the letter
 *
 * @param array $params
 *
 * @return bool
 * @throws \Civi\WMFException\WMFException
 * @throws \Exception
 */
function thank_you_send_mail($params) {
  $require_params = [
    'amount',
    'contribution_id',
    'currency',
    'from_name',
    'from_address',
    'receive_date',
    'recipient_address',
    'recurring',
    'transaction_id',
    'unsubscribe_link',
  ];

  $missing = [];
  foreach ($require_params as $key) {
    if (!isset($params[$key]) || $params[$key] === '') {
      $missing[] = $key;
    }
  }
  if ($missing) {
    $as_list = implode(', ', $missing);
    watchdog('thank_you', "Missing stuff from the TY params: {$as_list} " . check_plain(print_r($params, TRUE)), [], WATCHDOG_ERROR);
    $msg = "FAILED TO RENDER HTML EMAIL because of missing parameters {$as_list} in " . __FUNCTION__;
    throw new WMFException(WMFException::MISSING_MANDATORY_DATA, $msg);
  }
  if (empty($params['language'])) {
    $params['language'] = Civi\WMFHelpers\Language::getLanguageCode($params['locale'] ?? 'en');
  }
  $rendered = ThankYou::render(FALSE)
    // @todo switch to passing in 'raw' contact language.
    ->setLanguage($params['language'])
    ->setTemplateName($params['template'])
    ->setReceiveDate($params['receive_date'])
    ->setTemplateParameters($params)
    ->execute()->first();
  $html = $rendered['html'];
  $subject = $rendered['subject'];

  if (!$html || !$subject) {
    $msg = "HTML rendering of template failed in {$params['locale']}.";
    throw new WMFException(WMFException::UNKNOWN, $msg, ['thank_you_params' => $params]);
  }

  $civi_queue_record = NULL;
  $create_civi_mail = variable_get('thank_you_add_civimail_records', 'false');
  $rate = variable_get('thank_you_civimail_rate', 1.0);
  if ($create_civi_mail === 'true' && mt_rand(0, 10000) <= $rate * 10000 && isset($params['contact_id']) && $params['contact_id'] > 0) {
    $civi_queue_record = thank_you_add_civi_queue(
      $params['recipient_address'],
      $params['contact_id'],
      $subject,
      $html
    );
  }

  $email = [
    'from_name' => $params['from_name'],
    'from_address' => $params['from_address'],
    'to_name' => $params['name'],
    'to_address' => $params['recipient_address'],
    'locale' => $params['language'],
    'html' => $html,
    'subject' => $subject,
    'reply_to' => $civi_queue_record ? $civi_queue_record->getVerp() : "ty.{$params['contact_id']}.{$params['contribution_id']}@donate.wikimedia.org",
  ];

  try {
    watchdog('thank_you', "Sending ty email to: " . $email['to_address'], [], WATCHDOG_INFO);
    $email_success = MailFactory::singleton()->send(
      $email,
      ['List-Unsubscribe' => '<' . $params['unsubscribe_link'] . '>']
    );

    if ($civi_queue_record) {
      $civi_queue_record->markDelivered();
    }

    return $email_success;
  } catch (PHPMailer\PHPMailer\Exception $e) {
    //TODO: don't assume phpmailer
    //TODO: something with the CiviMail queue record to indicate it failed;
    $debug = array_merge($email, ["html" => '', "plaintext" => '']);
    watchdog('thank_you', 'Sending thank you message failed in phpmailer for contribution: ' .
      '<pre>' . check_plain(print_r($params, TRUE)) . "\n\n" .
      $e->errorMessage() . '</pre>', [], WATCHDOG_ERROR);

    if (strpos($e->errorMessage(), "Invalid address:") === FALSE) {
      watchdog('thank_you', "PhpMailer died unexpectedly: {$e->errorMessage()} at {$e->getTraceAsString()}", [], WATCHDOG_ERROR);
      $msg = "UNHANDLED PHPMAILER EXCEPTION SENDING THANK YOU MESSAGE\n"
        . __FUNCTION__ . "\n\n" . $e->errorMessage() . "\n\n"
        . $e->getTraceAsString();
      throw new WMFException(WMFException::EMAIL_SYSTEM_FAILURE, $msg, $debug);
    }

    return FALSE;
  } catch (Exception $e) {
    $debug = array_merge($email, ["html" => '', "plaintext" => '']);
    watchdog('thank_you', 'Sending thank you message failed with generic exception for contribution: ' .
      '<pre>' . check_plain(print_r($params, TRUE)) . "\n\n" .
      check_plain(print_r($debug, TRUE)) . "\n\n" .
      $e->getMessage() . '</pre>', [], WATCHDOG_ERROR);

    $msg = "UNHANDLED EXCEPTION SENDING THANK YOU MESSAGE\n" . __FUNCTION__
      . "\n\n" . $e->getMessage() . "\n\n" . $e->getTraceAsString();

    throw new WMFException(WMFException::EMAIL_SYSTEM_FAILURE, $msg, $debug);
  }
}

/**
 * Gets the template name and revision number from an html comment
 *
 * @param string $html HTML source of the thank you email
 *  This should contain a string like
 *  <!-- TI_BEGIN["version":1,"name":"endowment_thank_you.sv.html","revision":20200107]TI_END -->
 *
 * @returns stdClass, 'revision' contains rev no, 'name' contains template name
 *
 * @return mixed|null
 *
 * @throws TemplateInfoMissingException if comment is not found
 */
function thank_you_get_template_info($html) {
  $matches = [];
  $info = NULL;
  if (preg_match('/<!-- TI_BEGIN(.+)TI_END -->/', $html, $matches)) {
    // The '{' in the template was upsetting smarty. This permits *any* open & close
    // delimiter (in practice [ ....] ).
    $info = json_decode('{' . substr($matches[1], 1, -1) . '}');
  }
  if ($info === NULL || !is_object($info)) {
    throw new TemplateInfoMissingException();
  }
  return $info;
}

/**
 * Add record of the sent email to CiviMail
 *
 * @param string $email recipient address
 * @param int $contact_id recipient contact id
 * @param string $subject subject header to insert in case of missing mailing
 * @param string $html HTML email body, which should have a template info
 *   comment
 *
 * @return \wmf_communication\CiviMailQueueRecord mail queue record with VERP
 *   header
 */
function thank_you_add_civi_queue($email, $contact_id, $subject, $html) {
  $civi_mailing = NULL;
  $civi_queue_record = NULL;
  $civimail_store = new CiviMailStore();
  try {
    $template_info = thank_you_get_template_info($html);
    try {
      $civi_mailing = $civimail_store->getMailing('thank_you', $template_info->name, $template_info->revision);
    } catch (CiviMailingMissingException $e) {
      watchdog(
        'thank_you',
        'Could not find mailing record for email with subject ' . $subject,
        [],
        WATCHDOG_INFO
      );
      $civi_mailing = $civimail_store->addMailing('thank_you', $template_info->name, 'missing body', $subject, $template_info->revision);
    }
    $civi_queue_record = $civimail_store->addQueueRecord($civi_mailing, $email, $contact_id);

    Activity::create(FALSE)->setValues([
      'source_contact_id' => $civi_queue_record->getContactID(),
      'target_contact_id' => $civi_queue_record->getContactID(),
      'activity_type_id:name' => 'Email',
      'activity_date_time' => 'now',
      'subject' => $subject,
      'details' => $html,
      'status_id' => 2,
    ])->execute();

  } catch (TemplateInfoMissingException $e) {
    watchdog(
      'thank_you',
      'Could not find template info comment in thank you email template with subject ' . $subject,
      [],
      WATCHDOG_INFO
    );
  } catch (CiviQueueInsertException $e) {
    watchdog(
      'thank_you',
      'CiviMail queue insert failed: ' . $e->getMessage(),
      [],
      WATCHDOG_INFO
    );
  } catch (CiviMailingInsertException $e) {
    watchdog(
      'thank_you',
      'Could not insert fallback mailing: ' . $e->getMessage(),
      [],
      WATCHDOG_INFO
    );
  }
  return $civi_queue_record;
}

function thank_you_settings_form() {
  $form = [];

  $form['thank_you_enabled'] = [
    '#type' => 'radios',
    '#title' => t('Enable Thank You send job'),
    '#options' => [
      'false' => t('Do not send Thank You emails'),
      'true' => t('Send Thank You emails'),
    ],
    '#default_value' => variable_get('thank_you_enabled', 'true'),
  ];

  $form['thank_you_days'] = [
    '#type' => 'textfield',
    '#title' => t('Days before considering transaction too old to automatically thank'),
    '#default_value' => variable_get('thank_you_days', 14),
    '#required' => TRUE,
  ];

  $form['thank_you_batch'] = [
    '#type' => 'textfield',
    '#title' => t('Cron batch size'),
    '#required' => TRUE,
    '#default_value' => variable_get('thank_you_batch', 1),
  ];

  $form['thank_you_batch_time'] = [
    '#type' => 'textfield',
    '#title' => t('Job time limit (in seconds)'),
    '#description' => t('Maximum elapsed duration of a thank you job, after which we will abort from the loop.  This can be used to set a reliable duty cycle for the job.  A time limit is required.'),
    '#required' => TRUE,
    '#default_value' => variable_get('thank_you_batch_time', 90),
  ];

  // this is still in use
  $form['thank_you_onestep_unsubscribe'] = [
    '#type' => 'radios',
    '#title' => t('Unsubscription Confirmation'),
    '#required' => TRUE,
    '#options' => [
      'false' => t('Require confirmation'),
      'true' => t('Do not require confirmation'),
    ],
    '#default_value' => variable_get('thank_you_onestep_unsubscribe', 'false'),
  ];

  $form['thank_you_add_civimail_records'] = [
    '#type' => 'radios',
    '#title' => t('Track thank you emails to CiviMail'),
    '#required' => TRUE,
    '#options' => [
      'false' => t('Do not create CiviMail records'),
      'true' => t('Create CiviMail records'),
    ],
    '#default_value' => variable_get('thank_you_add_civimail_records', 'false'),
  ];

  $form['thank_you_civimail_rate'] = [
    '#type' => 'textfield',
    '#title' => t('CiviMail sample rate, from 0 (never) to 1 (always)'),
    '#default_value' => variable_get('thank_you_civimail_rate', 1),
    '#required' => TRUE,
  ];

  $form['thank_you_failure_threshold'] = [
    '#type' => 'textfield',
    '#title' => t('Number of consecutive failures to allow before disabling thank you job'),
    '#default_value' => variable_get('thank_you_failure_threshold', 5),
    '#required' => TRUE,
  ];

  return system_settings_form($form);
}

/**
 * Main thank you batch processing function.
 *
 * @param int|null $batch
 *   Number of contributions to process
 * @param int|null $days
 *   Number of days to go back in selecting contributions
 * @param int|null $timeLimit
 *   Time in seconds after which to end the job.
 *
 * @throws \CiviCRM_API3_Exception
 */
function thank_you_batch_process($batch = NULL, $days = NULL, $timeLimit = NULL) {
  civicrm_initialize();
  // If available, use the time the drush script started as the start time
  // This way we're less likely to run past the start of the next run.
  if (isset($_SERVER['REQUEST_TIME'])) {
    $startTime = $_SERVER['REQUEST_TIME'];
  }
  else {
    $startTime = time();
  }
  // the following variables should be set in the module settings, not here
  $timeLimit = $timeLimit ?? variable_get('thank_you_batch_time', 90);
  $days = $days ?? variable_get('thank_you_days', FALSE);
  $batch = $batch ?? variable_get('thank_you_batch', FALSE);
  $enabled = variable_get('thank_you_enabled', 'true');

  if ($enabled === 'false') {
    watchdog('thank_you', 'Thank You send job is disabled', [], WATCHDOG_INFO);
    return;
  }
  if (!$days) {
    watchdog('thank_you', 'Number of days to send thank you mails not configured', [], WATCHDOG_ERROR);
    return;
  }
  if (!is_numeric($batch)) {
    watchdog('thank_you', 'Thank you mail batch size not configured', [], WATCHDOG_ERROR);
    return;
  }

  // FIXME: refactor this whole module to be more object oriented, so we can
  // just set these properties and override during the test.
  // This code resets the thank_you_days variable in case it's been left in
  // a bad state by an aborted simulation run
  if ($days == DUMB_BIG_TY_DAYS) {
    $days = variable_get('old_thank_you_days', FALSE);
    variable_set('thank_you_days', $days);
  }

  watchdog('thank_you', "Attempting to send $batch thank you mails for contributions from the last $days days.", [], WATCHDOG_INFO);

  $earliest = UtcDate::getUtcDatabaseString("-$days days");
  $ty_query = <<<EOT
		SELECT civicrm_contribution.id, trxn_id
		FROM civicrm_contribution
		JOIN wmf_contribution_extra
			ON wmf_contribution_extra.entity_id = civicrm_contribution.id
		WHERE
			receive_date > %1 AND
			thankyou_date IS NULL AND
			(
			  no_thank_you IS NULL OR
			  no_thank_you IN ('', '0')
			)
		ORDER BY receive_date ASC LIMIT {$batch};
EOT;

  $contribution = CRM_Core_DAO::executeQuery($ty_query, [
    1 => [$earliest, 'String'],
  ]);

  $consecutiveFailures = 0;
  $failureThreshold = variable_get('thank_you_failure_threshold', 5);
  $abort = FALSE;
  $endTime = $startTime + $timeLimit;
  while ($contribution->fetch()) {
    if (time() >= $endTime) {
      watchdog("thank_you", "Batch time limit ($timeLimit s) elapsed", [], WATCHDOG_INFO);
      break;
    }
    watchdog(
      'thank_you',
      "Attempting to send thank you mail for contribution ID [{$contribution->id}], trxn_id [{$contribution->trxn_id}]",
      [],
      WATCHDOG_INFO
    );
    try {
      thank_you_for_contribution($contribution->id);
      $consecutiveFailures = 0;
    } catch (WMFException $ex) {
      $errName = $ex->getErrorName();
      $noThankYou = "failed: $errName";

      $logMessage = $ex->getMessage()
        . "<br/>Setting no_thank_you to '$noThankYou'";
      wmf_civicrm_set_no_thank_you($contribution->id, $noThankYou);

      $consecutiveFailures++;
      $msg = "Disabling thank you job after $consecutiveFailures consecutive failures";
      if ($consecutiveFailures > $failureThreshold) {
        $abort = TRUE;
        watchdog('thank_you', $msg, [], WATCHDOG_ALERT);
        $logMessage .= "<br/>$msg";
      }

      // Always email if we're disabling the job
      if ($ex->isNoEmail() && !$abort) {
        watchdog('thank_you', $logMessage, [], WATCHDOG_ERROR);
      }
      else {
        try {
          // Make an exception for failmail with the updated message,
          // but avoid doubling the type prefix.
          $logMessage = substr($logMessage, strlen($errName) + 1);
          $mailException = new WMFException($ex->getCode(), $logMessage);

          // Failmail also logs a WATCHDOG_ERROR
          wmf_common_failmail('thank_you', '', $mailException);
        } catch (Exception $innerEx) {
          watchdog(
            'thank_you',
            'Can\'t even send failmail, disabling thank you job',
            [],
            WATCHDOG_ALERT
          );
          $abort = TRUE;
        }
      }

      if ($abort) {
        variable_set('thank_you_enabled', 'false');
        break;
      }
    }
  }

  $counter = Queue2civicrmTrxnCounter::instance();
  $metrics = [];
  foreach ($counter->getTrxnCounts() as $gateway => $count) {
    $metrics["${gateway}_thank_you_emails"] = $count;
  }
  $metrics['total_thank_you_emails'] = $counter->getCountTotal();
  module_invoke(
    'metrics_reporting',
    'report_metrics',
    'thank_you_emails_sent',
    $metrics
  );
  $ageMetrics = [];
  foreach ($counter->getAverageAges() as $gateway => $age) {
    $ageMetrics["${gateway}_thank_you_donation_age"] = $age;
  }
  module_invoke(
    'metrics_reporting',
    'report_metrics',
    'thank_you_donation_age',
    $ageMetrics
  );
  watchdog(
    'thank_you',
    "Sent {$metrics['total_thank_you_emails']} thank you emails.",
    [],
    WATCHDOG_INFO
  );
}

function build_unsub_link($contributionId, $emailAddr, $language) {
  # TODO: transform locale to a MediaWiki language code
  $unsub_params = [
    'p' => 'thankyou',
    'c' => $contributionId,
    'e' => $emailAddr,
    'h' => sha1($contributionId . $emailAddr . CRM_Utils_Constant::value('WMF_UNSUB_SALT')),
    'uselang' => $language,
  ];

  return Civi::settings()->get('wmf_unsubscribe_url') . '?' . http_build_query($unsub_params, '', '&');
}

function thank_you_batch_test() {
  if (!defined('WMF_UNSUB_SALT')) {
    define('WMF_UNSUB_SALT', 'aslkdhaslkdjasd');
  }
  civicrm_initialize();

  $create_civi_mail = variable_get('thank_you_add_civimail_records', 'false');
  $rate = variable_get('thank_you_civimail_rate', 1.0);

  // Don't actually send any emails
  wmf_communication\Mailer::$defaultSystem = 'test';

  // Don't want to skip anything due to age
  $oldTyDays = variable_get('thank_you_days', 14);
  variable_set('old_thank_you_days', $oldTyDays);
  variable_set('thank_you_days', DUMB_BIG_TY_DAYS);

  watchdog('thank_you', 'Simulating up to 1000 thank you mails.', [], WATCHDOG_INFO);
  watchdog('thank_you', "Civimail creation: $create_civi_mail. Sample rate: $rate", [], WATCHDOG_INFO);

  $start = time();
  $sent = 0;

  $dbs = wmf_civicrm_get_dbs();
  $dbs->push('civicrm');
  try {

    $ty_query = <<<EOT
		SELECT civicrm_contribution.id, trxn_id
		FROM civicrm_contribution
		JOIN wmf_contribution_extra
			ON wmf_contribution_extra.entity_id = civicrm_contribution.id
		JOIN civicrm_email
			ON civicrm_email.contact_id = civicrm_contribution.contact_id
		WHERE trxn_id IS NOT NULL
		AND civicrm_email.email <> 'nobody@wikimedia.org'
		AND thankyou_date IS NULL
		AND no_thank_you IS NULL
		ORDER BY id DESC LIMIT 1000;
EOT;

    $result = db_query($ty_query);
    foreach ($result as $contribution) {
      watchdog(
        'thank_you',
        "Pretending to send thank you mail for contribution ID [{$contribution->id}], trxn_id [{$contribution->trxn_id}]",
        [],
        WATCHDOG_INFO
      );
      if (thank_you_for_contribution($contribution->id)) {
        $sent++;
      }
    }
  } catch (Exception $ex) {
    // Just need to make sure we reset the TY days
  }
  $dbs->pop();
  $elapsed = time() - $start;
  variable_set('thank_you_days', $oldTyDays);
  watchdog('thank_you', "Simulated sending $sent emails in $elapsed seconds.", [], WATCHDOG_INFO);
}

class ThankYouException extends Exception {

}

class TemplateInfoMissingException extends Exception {

}

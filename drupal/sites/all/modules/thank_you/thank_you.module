<?php

use Civi\Api4\ThankYou;
use Civi\Omnimail\MailFactory;
use Civi\WMFException\WMFException;
use Civi\WMFStatistic\Queue2civicrmTrxnCounter;
use Civi\WMFTransaction;
use SmashPig\Core\UtcDate;

// TODO:
// * use more exceptions in place of logging/return false
// * encapsulate template params structure and validation
// * implement 'specials' contingency passthru
// * reconsider need for twig extensions, we already do calculated values
// * give template fragments a named key rather than using integers

// FIXME: this constant is for test code
const DUMB_BIG_TY_DAYS = 100000;
const MAX_RENDER_ATTEMPTS = 3;

/**
 * Send a TY letter, and do bookkeeping on the Civi records
 * TODO: rewrite the civi api stuff to work like other code
 *
 * @param int $contribution_id
 *
 * @param bool $manualSend
 *   Manual send functions as an override -ignoring the time limit, previous thank yous and no_thankyou reason.
 *
 * @return bool
 * @throws \CRM_Core_Exception
 * @throws \Civi\WMFException\WMFException
 */
function thank_you_for_contribution($contribution_id, $manualSend = FALSE, $template = NULL) {
  if (!isset(Civi::$statics['thank_you']['giftTableName'])) {
    Civi::$statics['thank_you']['giftTableName'] = civicrm_api3('CustomGroup', 'getvalue', [
      'name' => 'Gift_Data',
      'return' => 'table_name',
    ]);
  }
  $giftTable = Civi::$statics['thank_you']['giftTableName'];
  if (!isset(Civi::$statics['thank_you']['StockTableName'])) {
    Civi::$statics['thank_you']['StockTableName'] = civicrm_api3('CustomGroup', 'getvalue', [
      'name' => 'Stock_Information',
      'return' => 'table_name',
    ]);
  }
  $stockTable = Civi::$statics['thank_you']['StockTableName'];
  $mailingData = CRM_Core_DAO::executeQuery("
		SELECT
			cntr.id AS contribution_id,
			cntr.currency,
			cntr.receive_date,
			cntr.thankyou_date,
			cntr.total_amount,
			cntr.trxn_id,
			cntr.payment_instrument_id,
			cntc.id AS contact_id,
			cntc.display_name,
			cntc.first_name,
			cntc.last_name,
			cntc.organization_name,
			cntc.contact_type,
			cntc.email_greeting_display,
			cntc.preferred_language,
			f.name AS financial_type,
			e.email,
			x.gateway,
			x.no_thank_you,
			x.original_amount,
			x.original_currency,
			g.campaign AS gift_source,
			s.stock_value,
			s.description_of_stock,
			s.stock_ticker,
			s.stock_qty,
			eci.venmo_user_name
		FROM civicrm_contribution cntr
		INNER JOIN civicrm_contact cntc ON cntr.contact_id = cntc.id
		LEFT JOIN civicrm_financial_type f ON f.id = cntr.financial_type_id
		LEFT JOIN civicrm_email e ON e.contact_id = cntc.id AND e.is_primary = 1
		INNER JOIN wmf_contribution_extra x ON cntr.id = x.entity_id
		LEFT JOIN $giftTable g ON cntr.id = g.entity_id
		LEFT JOIN $stockTable s ON cntr.id = s.entity_id
		LEFT JOIN wmf_external_contact_identifiers eci ON cntr.contact_id = eci.entity_id
		WHERE cntr.id = %1
	", [
    1 => [
      $contribution_id,
      'Int',
    ],
  ]);
  $found = $mailingData->fetch();

  // check that the API result is a valid contribution result
  if (!$found || !$mailingData->contact_id) {
    // the API result is bad
    $msg = 'Could not retrieve contribution record for: ' . $contribution_id . '<pre>' . print_r($mailingData, TRUE) . '</pre>';
    throw new WMFException(WMFException::GET_CONTRIBUTION, $msg);
  }
  $mailingData = $mailingData->toArray();

  // don't send a Thank You email if one has already been sent
  if (!empty($mailingData['thankyou_date']) && !$manualSend) {
    \Civi::log('wmf')->info('thank_you: Thank you email already sent for this transaction.');
    return FALSE;
  }
  // only send a Thank You email if we are within the specified window
  $ageInSeconds = UtcDate::getUtcTimestamp() - UtcDate::getUtcTimestamp($mailingData['receive_date']);
  if (!$manualSend && $ageInSeconds > 86400 * Civi::settings()->get('thank_you_days')) {
    \Civi::log('wmf')->info('thank_you: Contribution is older than limit, ignoring.');
    return FALSE;
  }

  // check for contacts without an email address
  if (empty($mailingData['email'])) {
    \Civi::log('wmf')->info('thank_you: No usable email address found');
    wmf_civicrm_set_no_thank_you($contribution_id, 'no email');
    return FALSE;
  }

  if (!$manualSend && $mailingData['no_thank_you']) {
    \Civi::log('wmf')->info('thank_you: Contribution has been marked no_thank_you={no_thank_you_reason}, skipping.', ['no_thank_you_reason' => $mailingData['no_thank_you']]);
    return FALSE;
  }

  $amount = $mailingData['original_amount'];
  $currency = $mailingData['original_currency'];

  // Use settlement currency if the original currency is virtual, for tax reasons.
  if ($mailingData['original_currency'] === 'BTC') {
    $amount = $mailingData['total_amount'];
    $currency = $mailingData['currency'];
  }

  $is_recurring = FALSE;
  try {
    $transaction = WMFTransaction::from_unique_id($mailingData['trxn_id']);
    $is_recurring = $transaction->is_recurring;
  }
  catch (WMFException $ex) {
    \Civi::log('wmf')->notice('thank_you: {message}', ['message', $ex->getMessage()]);
  }

  $locale = $mailingData['preferred_language'];
  if (!$locale) {
    \Civi::log('wmf')->info('thank_you: Donor language unknown.  Defaulting to English...');
    $locale = 'en';
  }

  // Select the email template
  if (!$template) {
    if ($mailingData['financial_type'] === 'Endowment Gift') {
      $template = 'endowment_thank_you';
    }
    else {
      $template = 'thank_you';
    }
  }

  $params = [
    'amount' => $amount,
    'contact_id' => $mailingData['contact_id'],
    'currency' => $currency,
    'first_name' => $mailingData['first_name'],
    'last_name' => $mailingData['last_name'],
    'contact_type' => $mailingData['contact_type'],
    'organization_name' => $mailingData['organization_name'],
    'email_greeting_display' => $mailingData['email_greeting_display'],
    'language' => $mailingData['preferred_language'] ?: 'en_US',
    'name' => $mailingData['display_name'],
    'receive_date' => $mailingData['receive_date'],
    'recipient_address' => $mailingData['email'],
    'recurring' => $is_recurring,
    'transaction_id' => "CNTCT-{$mailingData['contact_id']}",
    // shown in the body of the text
    'contribution_id' => $contribution_id,
    // used for the bounce header
    'template' => $template,
    'gift_source' => $mailingData['gift_source'],
    'stock_value' => $mailingData['stock_value'],
    'stock_ticker' => $mailingData['stock_ticker'],
    'stock_qty' => $mailingData['stock_qty'],
    'description_of_stock' => $mailingData['description_of_stock'],
  ];
  // if this transaction is braintree venmo, add template var venmo_user_name for additional reference
  if ( $mailingData['gateway'] === 'braintree' && 'Venmo' === CRM_Core_PseudoConstant::getName('CRM_Contribute_BAO_Contribution', 'payment_instrument_id', $mailingData['payment_instrument_id']) ) {
    $params['venmo_user_name'] = $mailingData['venmo_user_name'];
  }
  $success = thank_you_send_mail($params);
  $counter = Queue2civicrmTrxnCounter::instance();

  if ($success) {
    \Civi::log('wmf')->info('thank_you: Thank you mail sent successfully to contact_id {contact_id} for contribution id: {contribution_id} to {recipient_address}', [
      'contact_id' => $mailingData['contact_id'],
      'contribution_id' => $contribution_id,
      'recipient_address' => $params['recipient_address'],
    ]);
    thank_you_update_ty_date($mailingData);
    $counter->increment($mailingData['gateway']);
    $counter->addAgeMeasurement($mailingData['gateway'], $ageInSeconds);
    return TRUE;
  }
  else {
    $msg = "Thank you mail failed for contribution id: $contribution_id to " . $params['recipient_address'];
    throw new WMFException(WMFException::BAD_EMAIL, $msg);
  }
}

function thank_you_update_ty_date($contribution) {
  $date = wmf_common_date_unix_to_civicrm(time());
  \Civi::log('wmf')->info('thank_you: Updating TY send date to: {date}', ['date' => $date]);

  // We go directly to the database table here to avoid setting off a cascade
  // of line item updates and recalculations.
  $query = 'UPDATE civicrm_contribution
		SET thankyou_date = %1
		WHERE id = %2';

  try {
    CRM_Core_DAO::executeQuery($query, [
      1 => [$date, 'String'],
      2 => [$contribution['contribution_id'], 'Integer'],
    ]);
    return TRUE;
  }
  catch (Exception $ex) {
    \Civi::log('wmf')->error('thank_you: Updating successful TY send failed with details: {message}', ['message' => $ex->getMessage()]);
  }
  return FALSE;
}

/**
 * Just send the letter
 *
 * @param array $params
 *
 * @deprecated we can start to move to calling the send api directly.
 *
 * @return bool
 * @throws \Civi\WMFException\WMFException
 * @throws \Exception
 */
function thank_you_send_mail($params) {
  $templateName = $params['template'];
  $displayName = $params['name'];
  unset($params['template'], $params['name']);
  $require_params = [
    'amount',
    'contribution_id',
    'currency',
    'receive_date',
    'recipient_address',
    'recurring',
    'transaction_id',
  ];

  $missing = [];
  foreach ($require_params as $key) {
    if (!isset($params[$key]) || $params[$key] === '') {
      $missing[] = $key;
    }
  }
  if ($missing) {
    $as_list = implode(', ', $missing);
    \Civi::log('wmf')->error('thank_you: Missing stuff from the TY params: {missing} {params}', ['missing' => $missing, 'params' => $params]);
    $msg = "FAILED TO RENDER HTML EMAIL because of missing parameters {$as_list} in " . __FUNCTION__;
    throw new WMFException(WMFException::MISSING_MANDATORY_DATA, $msg);
  }
  return ThankYou::send(FALSE)
    ->setDisplayName($displayName)
    ->setLanguage($params['language'])
    ->setTemplateName($templateName)
    ->setParameters($params)
    ->execute()->first()['is_success'];
}

/**
 * Main thank you batch processing function.
 *
 * @param int|null $messageLimit
 *   Number of contributions to process
 * @param int|null $days
 *   Number of days to go back in selecting contributions
 * @param int|null $timeLimit
 *   Time in seconds after which to end the job.
 *
 * @throws \CRM_Core_Exception
 */
function thank_you_batch_process($messageLimit = NULL, $days = NULL, $timeLimit = NULL) {
  civicrm_initialize();
  // If available, use the time the drush script started as the start time
  // This way we're less likely to run past the start of the next run.
  if (isset($_SERVER['REQUEST_TIME'])) {
    $startTime = $_SERVER['REQUEST_TIME'];
  }
  else {
    $startTime = time();
  }

  $timeLimit = $timeLimit ?? \Civi::settings()->get('thank_you_batch_time');
  $days = $days ?? \Civi::settings()->get('thank_you_days');
  $messageLimit = $messageLimit ?? \Civi::settings()->get('thank_you_batch');
  $enabled = \Civi::settings()->get('thank_you_enabled');

  if ($enabled === 'false') {
    \Civi::log('wmf')->info('thank_you: Thank You send job is disabled');
    return;
  }
  if (!$days) {
    \Civi::log('wmf')->error('thank_you: Number of days to send thank you mails not configured');
    return;
  }
  if (!is_numeric($messageLimit)) {
    \Civi::log('wmf')->error('thank_you: Thank you mail message limit not configured');
    return;
  }

  // FIXME: refactor this whole module to be more object oriented, so we can
  // just set these properties and override during the test.
  // This code resets the thank_you_days variable in case it's been left in
  // a bad state by an aborted simulation run
  if ($days == DUMB_BIG_TY_DAYS) {
    $days = Civi::settings()->get('old_thank_you_days');
    Civi::settings()->set('thank_you_days', $days);
  }

  \Civi::log('wmf')->info('thank_you: Attempting to send {message_limit} thank you mails for contributions from the last {number_of_days} days.', [
    'number_of_days' => $days,
    'message_limit' => $messageLimit,
  ]);

  $earliest = UtcDate::getUtcDatabaseString("-$days days");
  $ty_query = <<<EOT
		SELECT civicrm_contribution.id, trxn_id, contact_id
		FROM civicrm_contribution
		JOIN wmf_contribution_extra
			ON wmf_contribution_extra.entity_id = civicrm_contribution.id
		WHERE
			receive_date > %1 AND
			thankyou_date IS NULL AND
			(
			  no_thank_you IS NULL OR
			  no_thank_you IN ('', '0')
			)
		ORDER BY receive_date ASC LIMIT {$messageLimit};
EOT;

  $contribution = CRM_Core_DAO::executeQuery($ty_query, [
    1 => [$earliest, 'String'],
  ]);

  $consecutiveFailures = 0;
  $failureThreshold = \Civi::settings()->get('thank_you_failure_threshold');
  $abort = FALSE;
  $endTime = $startTime + $timeLimit;
  while ($contribution->fetch()) {
    if (time() >= $endTime) {
      \Civi::log('wmf')->info('thank_you: Batch time limit ({time_limit} s) elapsed', ['time_limit' => $timeLimit]);
      break;
    }
    \Civi::log('wmf')->info(
      'thank_you: Attempting to send thank you mail for contribution ID [{contribution_id}], trxn_id [{trxn_id}], contact_id [{contact_id}]', [
       'contribution_id' => $contribution->id,
        'trxn_id' => $contribution->trxn_id,
        'contact_id' => $contribution->contact_id,

    ]);
    try {
      thank_you_for_contribution($contribution->id);
      $consecutiveFailures = 0;
    } catch (WMFException $ex) {
      $errName = $ex->getErrorName();
      $noThankYou = "failed: $errName";

      $logMessage = $ex->getMessage()
        . "<br/>Setting no_thank_you to '$noThankYou'";
      wmf_civicrm_set_no_thank_you($contribution->id, $noThankYou);

      $consecutiveFailures++;
      $msg = "Disabling thank you job after $consecutiveFailures consecutive failures";
      if ($consecutiveFailures > $failureThreshold) {
        $abort = TRUE;
        \Civi::log('wmf')->alert('thank_you: {message}', ['message' => $msg]);
        $logMessage .= "<br/>$msg";
      }

      // Always email if we're disabling the job
      if ($ex->isNoEmail() && !$abort) {
        \Civi::log('wmf')->error('thank_you: {log_message}', ['log_message' => $logMessage]);
      }
      else {
        try {
          // Make an exception for failmail with the updated message,
          // but avoid doubling the type prefix.
          $logMessage = substr($logMessage, strlen($errName) + 1);
          $mailException = new WMFException($ex->getCode(), $logMessage);

          // Failmail also logs an ERROR
          wmf_common_failmail('thank_you', '', $mailException);
        }
        catch (Exception $innerEx) {
          \Civi::log('wmf')->alert('thank_you: Can\'t even send failmail, disabling thank you job');
          $abort = TRUE;
        }
      }

      if ($abort) {
        variable_set('thank_you_enabled', 'false');
        break;
      }
    }
  }

  $counter = Queue2civicrmTrxnCounter::instance();
  $metrics = [];
  foreach ($counter->getTrxnCounts() as $gateway => $count) {
    $metrics["${gateway}_thank_you_emails"] = $count;
  }
  $metrics['total_thank_you_emails'] = $counter->getCountTotal();
  module_invoke(
    'metrics_reporting',
    'report_metrics',
    'thank_you_emails_sent',
    $metrics
  );
  $ageMetrics = [];
  foreach ($counter->getAverageAges() as $gateway => $age) {
    $ageMetrics["${gateway}_thank_you_donation_age"] = $age;
  }
  module_invoke(
    'metrics_reporting',
    'report_metrics',
    'thank_you_donation_age',
    $ageMetrics
  );
  \Civi::log('wmf')->info(
    'thank_you: Sent {total_thank_you_emails} thank you emails.',
    ['total_thank_you_emails' => $metrics['total_thank_you_emails']]
  );
}

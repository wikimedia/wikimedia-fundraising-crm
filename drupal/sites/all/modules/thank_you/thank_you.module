<?php

use Civi\Api4\ThankYou;
use Civi\WMFException\WMFException;
use Civi\WMFStatistic\PrometheusReporter;
use Civi\WMFStatistic\Queue2civicrmTrxnCounter;
use Civi\WMFTransaction;
use SmashPig\Core\UtcDate;

// FIXME: this constant is for test code
const DUMB_BIG_TY_DAYS = 100000;
const MAX_RENDER_ATTEMPTS = 3;

/**
 * Retrieve full contribution and contact record for mailing
 * @param int $contribution_id
 * @param string $giftTable
 * @param string $stockTable
 * @throws \Civi\WMFException\WMFException
 * @return array
 */
function get_mailing_data(int $contribution_id): array {
  if (!isset(Civi::$statics['thank_you']['giftTableName'])) {
    Civi::$statics['thank_you']['giftTableName'] = civicrm_api3('CustomGroup', 'getvalue', [
      'name' => 'Gift_Data',
      'return' => 'table_name',
    ]);
  }
  $giftTable = Civi::$statics['thank_you']['giftTableName'];
  if (!isset(Civi::$statics['thank_you']['StockTableName'])) {
    Civi::$statics['thank_you']['StockTableName'] = civicrm_api3('CustomGroup', 'getvalue', [
      'name' => 'Stock_Information',
      'return' => 'table_name',
    ]);
  }
  $stockTable = Civi::$statics['thank_you']['StockTableName'];
  \Civi::log('wmf')->info(
    'thank_you: Selecting data for TY mail'
  );

  $mailingData = CRM_Core_DAO::executeQuery("
    SELECT
      cntr.id AS contribution_id,
      cntr.currency,
      cntr.receive_date,
      cntr.thankyou_date,
      cntr.total_amount,
      cntr.trxn_id,
      cntr.payment_instrument_id,
      cntc.id AS contact_id,
      cntc.display_name,
      cntc.first_name,
      cntc.last_name,
      cntc.organization_name,
      cntc.contact_type,
      cntc.email_greeting_display,
      cntc.preferred_language,
      f.name AS financial_type,
      e.email,
      x.gateway,
      x.no_thank_you,
      x.original_amount,
      x.original_currency,
      x.source_type,
      g.campaign AS gift_source,
      s.stock_value,
      s.description_of_stock,
      s.stock_ticker,
      s.stock_qty,
      eci.venmo_user_name,
      recur.frequency_unit
    FROM civicrm_contribution cntr
    INNER JOIN civicrm_contact cntc ON cntr.contact_id = cntc.id
    LEFT JOIN civicrm_financial_type f ON f.id = cntr.financial_type_id
    LEFT JOIN civicrm_email e ON e.contact_id = cntc.id AND e.is_primary = 1
    LEFT JOIN civicrm_contribution_recur recur ON cntr.contribution_recur_id = recur.id
    INNER JOIN wmf_contribution_extra x ON cntr.id = x.entity_id
    LEFT JOIN $giftTable g ON cntr.id = g.entity_id
    LEFT JOIN $stockTable s ON cntr.id = s.entity_id
    LEFT JOIN wmf_external_contact_identifiers eci ON cntr.contact_id = eci.entity_id
    WHERE cntr.id = %1
  ", [
    1 => [
      $contribution_id,
      'Int',
    ],
  ]);
  $found = $mailingData->fetch();
  \Civi::log('wmf')->info('thank_you: Got data');
  // check that the API result is a valid contribution result
  if (!$found || !$mailingData->contact_id) {
    // the API result is bad
    $msg = 'Could not retrieve contribution record for: ' . $contribution_id . '<pre>' . print_r($mailingData, TRUE) . '</pre>';
    throw new WMFException(WMFException::GET_CONTRIBUTION, $msg);
  }
  return $mailingData->toArray();
}

/**
 * Send a TY letter, and do bookkeeping on the Civi records
 * TODO: rewrite the civi api stuff to work like other code
 *
 * @param int $contribution_id
 *
 * @return bool
 * @throws \CRM_Core_Exception
 * @throws \Civi\WMFException\WMFException
 */
function thank_you_for_contribution(int $contribution_id) {
  // get contact mailing data from records
  $mailingData = get_mailing_data($contribution_id);
  // don't send a Thank You email if one has already been sent
  if (!empty($mailingData['thankyou_date'])) {
    \Civi::log('wmf')->info('thank_you: Thank you email already sent for this transaction.');
    return FALSE;
  }
  // only send a Thank You email if we are within the specified window
  $ageInSeconds = UtcDate::getUtcTimestamp() - UtcDate::getUtcTimestamp($mailingData['receive_date']);
  if ($ageInSeconds > 86400 * Civi::settings()->get('thank_you_days')) {
    \Civi::log('wmf')->info('thank_you: Contribution is older than limit, ignoring.');
    return FALSE;
  }

  // check for contacts without an email address
  if (empty($mailingData['email'])) {
    \Civi::log('wmf')->info('thank_you: No usable email address found');
    \Civi\Api4\Contribution::update(FALSE)
      ->addValue('contribution_extra.no_thank_you', 'no email')
      ->addWhere('id', '=', $contribution_id)
      ->execute();
    return FALSE;
  }

  if ($mailingData['no_thank_you']) {
    \Civi::log('wmf')->info('thank_you: Contribution has been marked no_thank_you={no_thank_you_reason}, skipping.', ['no_thank_you_reason' => $mailingData['no_thank_you']]);
    return FALSE;
  }

  $amount = $mailingData['original_amount'];
  $currency = $mailingData['original_currency'];

  // Use settlement currency if the original currency is virtual, for tax reasons.
  if ($mailingData['original_currency'] === 'BTC') {
    $amount = $mailingData['total_amount'];
    $currency = $mailingData['currency'];
  }

  $is_recurring = FALSE;
  try {
    $transaction = WMFTransaction::from_unique_id($mailingData['trxn_id']);
    $is_recurring = $transaction->is_recurring;
  }
  catch (WMFException $ex) {
    \Civi::log('wmf')->notice('thank_you: {message}', ['message', $ex->getMessage()]);
  }

  $locale = $mailingData['preferred_language'];
  if (!$locale) {
    \Civi::log('wmf')->info('thank_you: Donor language unknown.  Defaulting to English...');
    $locale = 'en';
  }

  // Select the email template
  if ($mailingData['financial_type'] === 'Endowment Gift') {
    $template = 'endowment_thank_you';
  }
  else {
    $template = 'thank_you';
  }

  $params = [
    'amount' => $amount,
    'contact_id' => $mailingData['contact_id'],
    'currency' => $currency,
    'first_name' => $mailingData['first_name'],
    'last_name' => $mailingData['last_name'],
    'contact_type' => $mailingData['contact_type'],
    'organization_name' => $mailingData['organization_name'],
    'email_greeting_display' => $mailingData['email_greeting_display'],
    'frequency_unit' => $mailingData['frequency_unit'],
    'language' => $mailingData['preferred_language'] ?: 'en_US',
    'receive_date' => $mailingData['receive_date'],
    'recipient_address' => $mailingData['email'],
    'recurring' => $is_recurring,
    'transaction_id' => "CNTCT-{$mailingData['contact_id']}",
    // shown in the body of the text
    'gift_source' => $mailingData['gift_source'],
    'stock_value' => $mailingData['stock_value'],
    'stock_ticker' => $mailingData['stock_ticker'],
    'stock_qty' => $mailingData['stock_qty'],
    'description_of_stock' => $mailingData['description_of_stock'],
  ];

  if (!empty($mailingData['venmo_user_name'])) {
    $params['venmo_user_name'] = $mailingData['venmo_user_name'];
  }

  \Civi::log('wmf')->info('thank_you: Calling thank_you_send_mail');

  $require_params = [
    'amount',
    'currency',
    'receive_date',
    'recipient_address',
    'recurring',
    'transaction_id',
  ];

  $missing = [];
  foreach ($require_params as $key) {
    if (!isset($params[$key]) || $params[$key] === '') {
      $missing[] = $key;
    }
  }
  if ($missing) {
    $as_list = implode(', ', $missing);
    \Civi::log('wmf')->error('thank_you: Missing stuff from the TY params: {missing} {params}', ['missing' => $missing, 'params' => $params]);
    $msg = "FAILED TO RENDER HTML EMAIL because of missing parameters {$as_list} in " . __FUNCTION__;
    // Actually using WMFException only actually is better than CRM_Core_Exception in queue processing context (sometimes).
    throw new WMFException(WMFException::MISSING_MANDATORY_DATA, $msg);
  }
  $success = ThankYou::send(FALSE)
    ->setDisplayName($mailingData['display_name'])
    ->setLanguage($params['language'])
    ->setTemplateName($template)
    ->setParameters($params)
    ->setContributionID($contribution_id)
    ->execute()->first()['is_success'];
  $counter = Queue2civicrmTrxnCounter::instance();

  if ($success) {
    $counter->increment($mailingData['gateway']);
    if ($mailingData['source_type'] === 'payments') {
      $counter->addAgeMeasurement($mailingData['gateway'], $ageInSeconds);
    }
    return TRUE;
  }
}

/**
 * Main thank you batch processing function.
 *
 * @param int|null $messageLimit
 *   Number of contributions to process
 * @param int|null $days
 *   Number of days to go back in selecting contributions
 * @param int|null $timeLimit
 *   Time in seconds after which to end the job.
 *
 * @throws \CRM_Core_Exception
 */
function thank_you_batch_process($messageLimit = NULL, $days = NULL, $timeLimit = NULL) {
  civicrm_initialize();
  ThankYou::batchSend(FALSE)->execute();
}

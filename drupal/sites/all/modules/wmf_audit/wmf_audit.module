<?php

define('WMF_AUDIT_PAYMENTS_LOGS_DIR', '/usr/local/src/logs/');

/**
 * Wrapper for echo
 * Lets us switch on things we only want to see in verbose mode.
 * Also allows us to impose a char limit per line for the benefit of jenkins
 * output logs.
 * Without this, the viz blocks would just ride merrily off the right end of the
 * screen and cause stupid amounts of side scrolling.
 *
 * @staticvar int $chars The number of single chars we've already added to this
 * line.
 * @staticvar int $limit The char limit, set at the command line
 *
 * @param string $echo The thing you want to echo. Single chars will be added to
 * the current line, while longer strings will get their own new line.
 * @param boolean $verbose If true, this message will only appear when we are
 * running in verbose mode. The verbose option is set at the command line.
 *
 * @return null
 */
function wmf_audit_echo($echo, $verbose = FALSE) {
  if (($verbose && wmf_audit_runtime_options('verbose') === FALSE)
    || wmf_audit_runtime_options('quiet')) {
    return;
  }
  static $chars = 0;
  static $limit = NULL;
  if (is_null($limit)) {
    $limit = wmf_audit_runtime_options('charlimit');
  }

  if (strlen($echo) === 1) {
    echo $echo;
    ++$chars;
    if ($limit > 0 && $chars > $limit) {
      echo "\n";
      $chars = 0;
    }
  }
  else {
    //echo a whole line. Gets a little tricky.
    if ($chars != 0) {
      echo "\n";
    }
    echo "$echo\n";
    $chars = 0;
  }
}

/**
 * A confusing function for holding local runtime vars without having to goof
 * around with globals. Works as both get and set, depending on what you pass
 * in
 * with $confusing_thing
 * TODO: Stop that.  Some vars should be global, most should be private to the
 * audit class.
 *
 * @staticvar array $args The arguments set at runtime via drush command
 *
 * @param array|string|null $confusing_thing A confusing thing.
 * * When it is an array, sets the internal static $args variable to that array
 * * When it is a string, it interprets the string to be the key for which
 *   there
 *   should be a value in $args, and returns that value (or false if not
 *   present).
 * * When it is null, it returns the whole $args array.
 *
 * @return mixed Either a boolean, or a specific runtime setting (if
 * $confusing_thing is neither an array nor null)
 */
function wmf_audit_runtime_options($confusing_thing = NULL) {
  if (!isset(\Civi::$statics['wmf_audit_runtime'])) {
    \Civi::$statics['wmf_audit_runtime'] = [];
  }
  if (is_array($confusing_thing)) { //we're setting up the function for later use, and $confusing_thing is the array of current settings.
    \Civi::$statics['wmf_audit_runtime'] = $confusing_thing;
    return TRUE;
  }
  elseif (is_null($confusing_thing)) { //we want all the settings
    return \Civi::$statics['wmf_audit_runtime'];
  }
  elseif (array_key_exists($confusing_thing, \Civi::$statics['wmf_audit_runtime'])) { //we are after a specific setting
    return \Civi::$statics['wmf_audit_runtime'][$confusing_thing];
  }
  return FALSE;
}

<?php

use SmashPig\Core\Context;
use SmashPig\Core\DataStores\DamagedDatabase;
use SmashPig\Core\DataStores\QueueWrapper;
use SmashPig\Core\GlobalConfiguration;
use SmashPig\Core\Logging\Logger;
use SmashPig\Core\ProviderConfiguration;
use Civi\WMFQueue\QueueConsumer;

require_once 'failmail.php';
require_once 'wmf_dates.php';

/**
 * Drupal hook function setting up the configuration page.
 *
 * @return array Menu entries
 */
function wmf_common_menu() {
  $items = [];

  $items['admin/config/wmf_common'] = [
    'title' => 'WMF Common',
    'access arguments' => ['administer wmf_common'],
    'page callback' => 'system_admin_menu_block_page',
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  ];

  $items['admin/config/wmf_common/configure'] = [
    'title' => 'Common Settings',
    'access arguments' => ['administer wmf_common'],
    'page callback' => 'drupal_get_form',
    'page arguments' => ['wmf_common_settings'],
  ];

  return $items;
}

/**
 * Implements hook_permission.
 *
 * Exported permissions are:
 *    administer wmf_common
 *    manipulate queues
 *
 * @return array of exported permissions.
 */
function wmf_common_permission() {
  return [
    'administer wmf_common' => [
      'title' => 'Configure the wmf_common module',
    ],
    'manipulate queues' => [
      'title' => 'Edit and resend queue items',
    ],
  ];
}

function wmf_common_settings() {
  $form = [];

  $form['wmf_common_no_failmail'] = [
    '#type' => 'textfield',
    '#title' => t('Failmail Message Exceptions for Email'),
    '#required' => FALSE,
    '#default_value' => variable_get('wmf_common_no_failmail', ''),
    '#description' => t('Comma-delimited (no spaces) list of donor email addresses that will never trigger failmail'),
  ];

  $form['wmf_common_requeue_delay'] = [
    '#type' => 'textfield',
    '#title' => t('Requeue Delay Time'),
    '#default_value' => variable_get('wmf_common_requeue_delay', 20 * 60),
    '#required' => TRUE,
    '#description' => t('Seconds to wait before retrying a failed queue message.'),
  ];

  $form['wmf_common_requeue_max'] = [
    '#type' => 'textfield',
    '#title' => t('Maximum Requeue Attempts'),
    '#default_value' => variable_get('wmf_common_requeue_max', 10),
    '#required' => TRUE,
    '#description' => t('Number of allowed message requeue attempts before the message is moved to the "badmsg" queue.'),
  ];

  return system_settings_form($form);
}

/**
 * Return the deployed source revision of this subsystem
 *
 * @return string
 *
 * TODO: This is a site-specific kludge.  Move to deployment configuration,
 * set a variable in settings_local.php
 */
function wmf_common_get_my_revision() {
  static $sourceRevision;

  if (defined('WMF_SOURCE_REVISION')) {
    return WMF_SOURCE_REVISION;
  }
  else {
    if (!$sourceRevision) {
      $versionStampPath = DRUPAL_ROOT . "/.version-stamp";
      if (file_exists($versionStampPath)) {
        $versionId = file_get_contents($versionStampPath);
        $sourceRevision = trim($versionId);
      }
      else {
        $sourceRevision = 'unknown';
      }
    }
  }
  return $sourceRevision;
}

function wmf_common_locale_civi_to_mediawiki($locale) {
  // FIXME: This may prevent some localization but will allow more donors
  // to see translated pages
  return strtolower(substr($locale, 0, 2));
}

/**
 * Takes a list of selected and unselected ids provided by tableselect
 * and returns just those which are selected.
 *
 * @param array $ids
 *
 * @return array
 */
function wmf_common_get_selected($ids) {
  $selected = array_filter($ids, function($n) {
    return $n;
  });
  return array_keys($selected);
}

function wmf_common_create_smashpig_context($logPrefix, $provider = ProviderConfiguration::NO_PROVIDER) {
  // Initialize SmashPig, or set provider configuration if already initialized
  $ctx = Context::get();
  if ($ctx) {
    $globalConfig = $ctx->getGlobalConfiguration();
    $config = ProviderConfiguration::createForProvider($provider, $globalConfig);
    $ctx->setProviderConfiguration($config);
  }
  else {
    $globalConfig = GlobalConfiguration::create();
    $config = ProviderConfiguration::createForProvider($provider, $globalConfig);
    Context::init($globalConfig, $config);
    wmf_common_set_smashpig_message_source('direct', 'CiviCRM');
  }
  Logger::setPrefix($logPrefix);
}

function wmf_common_set_smashpig_message_source($type, $name) {
  $ctx = Context::get();
  $ctx->setSourceType($type);
  $ctx->setSourceName($name);
  $ctx->setVersionFromFile(DRUPAL_ROOT . "/.version-stamp");
}

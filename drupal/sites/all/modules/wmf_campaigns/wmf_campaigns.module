<?php

use Civi\Omnimail\MailFactory;
use wmf_communication\Templating;

/**
 * Implementation of hook_menu().
 */
function wmf_campaigns_menu() {
  $items = [];

  $items['admin/config/wmf_campaigns'] = [
    'title' => 'WMF Fundraising Campaigns',
    'access arguments' => ['administer WMF campaigns'],
    'page callback' => 'system_admin_menu_block_page',
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  ];

  $items['admin/config/wmf_campaigns/list'] = [
    'title' => 'Campaigns',
    'description' => 'Manage campaigns.',
    'access arguments' => ['administer WMF campaigns'],
    'page callback' => 'drupal_get_form',
    'page arguments' => ['wmf_campaigns_index_form'],
  ];

  $items['admin/config/wmf_campaigns/edit/%'] = [
    'title' => 'Campaigns',
    'description' => 'Manage campaigns.',
    'access arguments' => ['administer WMF campaigns'],
    'page callback' => 'drupal_get_form',
    'page arguments' => ['wmf_campaigns_edit_form', 4],
  ];

  return $items;
}

/**
 * Implementation of hook_permission().
 */
function wmf_campaigns_permission() {
  return [
    'administer WMF campaigns' => [
      'title' => t('Administer WMF Campaigns'),
    ],
  ];
}

/**
 * Callback for menu path "admin/config/wmf_campaigns".
 */
function wmf_campaigns_index_form() {
  $form = [];
  civicrm_initialize();
  $options = \Civi\Api4\CustomField::get(FALSE)
    ->addWhere('name', '=', 'Appeal')
    ->setSelect(['id', 'option_group_id', 'option_value.value', 'option_value.label', 'option_value.is_active'])
    ->addJoin('OptionValue AS option_value', 'LEFT', ['option_value.option_group_id', '=', 'option_group_id'])
    ->setLimit(1000)
    ->execute();

  $link = CRM_Utils_System::url(
    'civicrm/admin/custom/group/field/option',
    'reset=1&action=browse&gid=' . $options->first()['option_group_id'] . '&fid=' . $options->first()['id'],
    TRUE
  );

  $rows = [];
  foreach ($options as $option) {
    $notificationAddress = !empty(WmfCampaign::getNotificationAddressesFromKey($option['option_value.value']));
    $rows[] = [
      l($option['option_value.label'], "admin/config/wmf_campaigns/edit/" . $option['option_value.value']),
      $option['option_value.value'],
      $option['option_value.is_active'] ? t('Yes') : t('No'),
      $notificationAddress ? t('Yes') : t('No'),
    ];
  }

  usort($rows, function ($campaign1, $campaign2) {
    // Sort by active first
    if ($campaign1[2] != $campaign2[2]) {
      if ($campaign1[2] === t('No')) {
        return 1;
      }
      return -1;
    }
    // Then by value descending, for some reason
    return strcasecmp($campaign2[1], $campaign1[1]);
  });

  $headers = [
    'Campaign',
    'Key',
    'Enabled',
    'Notification',
  ];
  $table_html = theme_table([
    'header' => $headers,
    'rows' => $rows,
    'caption' => t('Campaigns'),
    'empty' => t('No campaigns!'),
    'sticky' => FALSE,
    'colgroups' => [],
    'attributes' => [],
  ]);

  $form['header'] = [
    '#markup' => "<a href='$link'>Click here to add, enable, or disable campaigns</a>",
  ];
  $form['table'] = [
    '#markup' => $table_html,
  ];

  return $form;
}

function wmf_campaigns_edit_form($form, $formState, $campaignValue) {
  drupal_add_js(drupal_get_path('module', 'wmf_campaigns') . '/wmf_campaigns.js');

  $form = [];
  civicrm_initialize();
  $optionValues = civicrm_api3('OptionValue', 'get', [
    'option_group_id' => wmf_civicrm_get_direct_mail_field_option_id(),
    'value' => $campaignValue,
    'sequential' => TRUE,
  ])['values'];
  if (count($optionValues) !== 1) {
    drupal_set_message("No such campaign value: {$campaignValue}");
    return;
  }
  $campaign = $optionValues[0];

  $result = db_select('wmf_campaigns_campaign')
    ->fields('wmf_campaigns_campaign')
    ->condition('campaign_key', $campaign['value'])
    ->execute()
    ->fetchAssoc();
  if (!$result) {
    $email = NULL;
  }
  else {
    $email = $result['notification_email'];
  }

  $form['label'] = [
    '#markup' => "<h2>{$campaign['label']}</h2>",
  ];

  $form['key'] = [
    '#markup' => "<b>utm_campaign key</b>: <code>{$campaign['value']}</code>",
  ];

  $form['notification'] = [
    '#type' => 'fieldset',
    '#title' => t('Notifications'),
  ];

  $form['notification']['notification_enabled'] = [
    '#type' => 'checkbox',
    '#title' => t('Enable notifications'),
    '#description' => t('Select if you wish to receive emails when donations containing this campaign identifier are received.'),
    '#required' => FALSE,
    '#default_value' => !empty($email),
  ];

  $form['notification']['notification_email'] = [
    '#type' => 'textfield',
    '#title' => t('Email recipient'),
    '#description' => t('Any notifications will be sent to this address.  To use multiple addresses, separate with a comma.'),
    '#required' => FALSE,
    '#default_value' => $email,
  ];

  $form['campaign_key'] = [
    '#type' => 'hidden',
    '#value' => $campaign['value'],
  ];

  $form['submit'] = [
    '#value' => t('Save'),
    '#type' => 'submit',
  ];

  return $form;
}

function wmf_campaigns_edit_form_submit($formId, &$formState) {
  $params = $formState['values'];

  if ($params['notification_enabled']) {
    $email = $params['notification_email'];
  }
  else {
    $email = NULL;
  }

  db_merge('wmf_campaigns_campaign')
    ->key(['campaign_key' => $params['campaign_key']])
    ->fields([
      'campaign_key' => $params['campaign_key'],
      'notification_email' => $email,
    ])
    ->execute();

  drupal_set_message(t("Successfully saved settings."));

  $formState['redirect'] = "admin/config/wmf_campaigns/list";
}

/**
 * Implements hook_civicrm_custom
 *
 * @throws \Exception
 */
function wmf_campaigns_civicrm_custom($action, $groupId, $entityId, $params) {
  switch ($action) {
    case 'create':
    case 'edit':
      if (!isset(Civi::$statics['wmf_campaigns']['giftDataGroupId'])) {
        $result = civicrm_api3('CustomGroup', 'get', [
          'name' => 'Gift_Data',
        ]);
        Civi::$statics['wmf_campaigns']['giftDataGroupId'] = (int) $result['id'];
      }

      if ((int) $groupId !== Civi::$statics['wmf_campaigns']['giftDataGroupId']) {
        // We're not editing/creating a gift data record, so do nothing
        return;
      }
      $campaignKey = NULL;
      $contributionId = NULL;

      foreach ($params as $values) {
        if ($values['column_name'] === 'appeal') {
          $contributionId = $values['entity_id'];
          $campaignKey = $values['value'];
          break;
        }
      }

      if (!$campaignKey) {
        // The gift data record has no appeal/campaign set, so we have no key to
        // look up notifications by.
        return;
      }

      $notificationEmail = WmfCampaign::getNotificationAddressesFromKey($campaignKey);

      if (!$notificationEmail) {
        // Most campaigns have no notifications configured - no need to do
        // anything special.
        return;
      }

      $result = civicrm_api3('Contribution', 'get', [
        'id' => $contributionId,
      ]);
      $contribution = array_pop($result['values']);

      watchdog('wmf_campaigns', "Notifying " . implode(',', $notificationEmail) . " about match on campaign {$campaignKey}", NULL, WATCHDOG_INFO);

      $mailer = MailFactory::singleton();
      foreach ($notificationEmail as $toAddress) {

        //TODO: addresses should come from GUI config.
        $letter = [
          'from_address' => "fr-tech+wmf_campaigns@wikimedia.org",
          'from_name' => "Campaign notifier",
          'reply_to' => "fr-tech+wmf_campaigns-bounce@wikimedia.org",
          'subject' => "Campaign donation: {$campaignKey}",
          'to_address' => $toAddress,
        ];
        $civiUrl = CRM_Utils_System::url('civicrm/contact/view/contribution',
          [
            'reset' => 1,
            'id' => $contribution['id'],
            'cid' => $contribution['contact_id'],
            'action' => 'view',
          ],
          TRUE // absolute link
        );
        $params = [
          'civiUrl' => $civiUrl,
          'campaignKey' => $campaignKey,
          'contribution' => $contribution,
        ];
        $template = new Templating(__DIR__ . '/templates', 'notification', 'en', $params, 'html');
        $letter['html'] = $template->render();
        $mailer->send($letter, []);
      }
  }

}

<?php

use Civi\Omnimail\MailFactory;
use wmf_communication\Templating;

/**
 * Implementation of hook_menu().
 */
function large_donation_menu() {

  $items = [];

  $items['admin/config/large_donation'] = [
    'title' => 'Large Donation Processor',
    'access arguments' => ['administer large_donation'],
    'page callback' => 'system_admin_menu_block_page',
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  ];

  $items['admin/config/large_donation/configure'] = [
    'title' => 'Configure',
    'description' => 'Configure large donation settings.',
    'access arguments' => ['administer large_donation'],
    'page callback' => 'drupal_get_form',
    'page arguments' => ['large_donation_settings'],
  ];

  return $items;
}

/**
 * Implementation of hook_permission().
 */
function large_donation_permission() {
  return [
    'administer large_donation' => [
      'title' => t('Administer Large Donations'),
    ],
  ];
}

/**
 * Callback for menu path "admin/config/large_donation".
 */
function large_donation_settings($formId, $formState) {
  civicrm_initialize();
  $form = [];

  // Should we display a blank new entry for adding a threshold level?
  $plus_new_level = isset($formState['clicked_button'])
    && $formState['clicked_button']['#attributes']['id'] === 'add_threshold';

  // Are we deleting something?
  $is_deleting = isset($formState['clicked_button'])
    && $formState['clicked_button']['#attributes']['class'] === ['delete'];

  if ($is_deleting) {
    preg_match('/^delete_(\d+|NEW)$/', $formState['clicked_button']['#attributes']['id'], $matches);
    $id = $matches[1];
    if ($id !== 'NEW') {
      db_delete('large_donation_notification')
        ->condition('id', $id, '=')
        ->execute();

      drupal_set_message("Deleted notification threshold with id={$id}.", 'warning');
    }
  }

  $result = db_select('large_donation_notification')
    ->fields('large_donation_notification')
    ->condition('enabled', TRUE, '=')
    ->orderBy('threshold', 'ASC')
    ->execute();

  $levels = $result->fetchAllAssoc('id', PDO::FETCH_ASSOC);

  if ($plus_new_level) {
    $levels[] = [
      'id' => 'NEW',
      'threshold' => '',
      'addressee' => '',
    ];
  }

  $uiIndex = 1;
  foreach ($levels as $row) {
    $form["group_{$row['id']}"] = [
      '#type' => 'fieldset',
    ];

    $form["group_{$row['id']}"]["delete_{$row['id']}"] = [
      '#type' => 'button',
      '#value' => t('Delete notification !index', ['!index' => $uiIndex]),
      '#attributes' => [
        'id' => "delete_{$row['id']}",
        'class' => ['delete'],
      ],
    ];

    $form["group_{$row['id']}"]["threshold_{$row['id']}"] = [
      '#type' => 'textfield',
      '#title' => t('Large donation value !index', ['!index' => $uiIndex]),
      '#required' => TRUE,
      '#default_value' => $row['threshold'],
      '#description' => t('Donations over this amount (USD) will trigger an email.'),
    ];

    $form["group_{$row['id']}"]["financial_types_excluded_{$row['id']}"] = [
      '#type' => 'select',
      '#multiple' => TRUE,
      '#title' => t('Financial types to be excluded'),
      '#required' => FALSE,
      '#options' => civicrm_api3('Contribution', 'getoptions', ['field' => 'financial_type_id'])['values'],
      '#size' => 5,
      '#default_value' => explode(',', $row['financial_types_excluded']),
    ];

    $form["group_{$row['id']}"]["addressee_{$row['id']}"] = [
      '#type' => 'textarea',
      '#title' => t('Email Notification Addresses !index', ['!index' => $uiIndex]),
      '#required' => FALSE,
      '#default_value' => $row['addressee'],
      '#description' => t('Addresses, separated by commas or newlines, to be notified on large contributions.'),
    ];

    $uiIndex++;
  }

  $form['add_threshold'] = [
    '#type' => 'button',
    '#value' => t('Add threshold level'),
    '#attributes' => [
      'id' => 'add_threshold',
    ],
  ];

  $form['submit'] = [
    '#type' => 'submit',
    '#value' => t('Save configuration'),
  ];

  return $form;
}

function large_donation_settings_submit($form, $formState) {
  foreach ($formState['values'] as $field => $value) {
    if (preg_match('/^threshold_(\d+|NEW)$/', $field, $matches)) {
      $id = $matches[1];
      $addressee = $formState['values']["addressee_{$id}"];
      $financialTypesExcluded = implode(',', $formState['values']["financial_types_excluded_{$id}"]);

      if ($id === 'NEW') {
        drupal_set_message("Added a new threshold level.");
        $id = NULL;
      }
      db_merge('large_donation_notification')
        ->key(['id' => $id])
        ->fields([
          'threshold' => $value,
          'addressee' => $addressee,
          'financial_types_excluded' => $financialTypesExcluded,
        ])
        ->execute();
    }
  }

  drupal_set_message("Saved the configuration.");
}

/**
 * Implements hook_civicrm_post
 */
function large_donation_civicrm_post($action, $type, $id, &$contribution) {
  switch ($action) {
    case 'create':
      if ($type === 'Contribution') {

        if ($contribution->total_amount <= large_donation_get_minimum_threshold()) {
          return;
        }

        foreach (large_donation_get_notification_thresholds() as $notification) {
          $excludedFinancialTypes = explode(',', $notification['financial_types_excluded']);
          if (!in_array($contribution->financial_type_id, $excludedFinancialTypes)) {
            if ($contribution->total_amount > $notification['threshold']) {
              watchdog('large_donation', "Notifying of large donation, contribution: {$contribution->id} above threshold {$notification['threshold']}");
              large_donation_notification_send($contribution, $notification);
            }
          }
        }
      }
      break;
    default:
  }
}

/**
 * Get large donation thresholds.
 */
function large_donation_get_notification_thresholds() {
  $notifications = &drupal_static(__FUNCTION__);
  if (!isset($notifications)) {
    $notifications = db_select('large_donation_notification')
      ->fields('large_donation_notification')
      ->condition('enabled', TRUE, '=')
      ->execute()
      ->fetchAllAssoc('id', PDO::FETCH_ASSOC);
  }
  return $notifications;
}

/**
 * Get the minimum amount that could trigger a notification..
 *
 * @return float
 */
function large_donation_get_minimum_threshold() {
  $minThreshold = &drupal_static(__FUNCTION__);
  if (!isset($minThreshold)) {
    $minThreshold = 100000000000000;
    $notifications = large_donation_get_notification_thresholds();
    foreach ($notifications as $threshold) {
      if ($threshold['threshold'] < $minThreshold) {
        $minThreshold = $threshold['threshold'];
      }
    }
  }
  return $minThreshold;
}

/**
 * large_donation_notification
 *
 * The email should include the total amount, source amount, contact and
 * contribution ids, and a link to the contact/contribution.
 *
 * No personally identifiable information should be included.
 *
 * @param CRM_Contribute_BAO_Contribution $contribution
 * @param array $notification
 */
function large_donation_notification_send($contribution, $notification) {
  $contact_link = CRM_Utils_System::url(
    'civicrm/contact/view',
    [
      'selectedChild' => 'contribute',
      'cid' => $contribution->contact_id,
      'reset' => 1,
    ],
    TRUE,
    'Contributions'
  );

  $contribution_link = CRM_Utils_System::url(
    'civicrm/contact/view/contribution',
    [
      'action' => 'view',
      'id' => $contribution->id,
      'reset' => 1,
    ],
    TRUE
  );

  $to = $notification['addressee'];

  $params = [
    'threshold' => (float) $notification['threshold'],
    'contribution' => $contribution,
    'contact_link' => $contact_link,
    'contribution_link' => $contribution_link,
  ];

  if (!$to) {
    watchdog('large_donation', 'Notification recipient address is not set up!', NULL, WATCHDOG_ERROR);
    return;
  }

  $mailer = MailFactory::singleton()->getMailer();

  $template = new Templating(__DIR__ . '/templates', 'notification', 'en', $params, 'html');
  $message = $template->render();

  try {
    $email = [
      'to' => $to,
      'from_address' => 'fr-tech+large_donation@wikimedia.org',
      'from_name' => 'Large Donation Bot',
      'subject' => "WMF - large donation: \${$contribution->total_amount}",
      'html' => $message,
    ];
    $mailer->send($email);
    watchdog('large_donation', 'A large donation notification was sent to: ' . print_r($to, TRUE));
  }
  catch (Exception $e) {
    watchdog('large_donation', 'Sending large donation message failed for contribution: ' . $contribution->id . '<pre>' . check_plain(print_r($contribution, TRUE)) . "\n\n" . $e->getMessage() . '</pre>', [], WATCHDOG_ERROR);
  }
}

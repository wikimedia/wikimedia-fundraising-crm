<?php

use queue2civicrm\banner_history\BannerHistoryQueueConsumer;

/**
 * Implements hook_menu
 */
function banner_history_menu() {
  $items['admin/config/queue2civicrm/banner_history'] = [
    'title' => 'Banner history',
    'description' => t('Configure banner history queue'),
    'access arguments' => ['administer queue2civicrm'],
    'page callback' => 'drupal_get_form',
    'page arguments' => ['banner_history_settings_page_args'],
  ];
  return $items;
}

/**
 * Constructs the settings page for this module.
 *
 * @return array Of form components.
 */
function banner_history_settings_page_args() {
  $form = [];

  $form['description'] = [
    '#type' => 'markup',
    '#description' =>
      t('<p>Banner history log ID associations are consumed from a' .
        ' queue and placed in a table.</p>'),
  ];

  $form['banner_history_batch'] = [
    '#type' => 'textfield',
    '#title' => t('Batch size'),
    '#description' => t(
      'Maximum number of items processed by a banner history job. Use ' .
      '0 for no limit.'
    ),
    '#default_value' => variable_get('banner_history_batch', 0),
  ];

  $form['banner_history_batch_time'] = [
    '#type' => 'textfield',
    '#title' => t('Job time limit (in seconds)'),
    '#description' => t(
      'Maximum elapsed duration of an banner history job, after which ' .
      'we will abort from the loop. This can be used to set a reliable ' .
      'duty cycle for the job. Use 0 for no limit. Either a time limit ' .
      'or batch size limit is required.'
    ),
    '#required' => TRUE,
    '#default_value' => variable_get('banner_history_batch_time', 0),
  ];

  return system_settings_form($form);
}

/**
 * Entry point from banner-history-queue-consume drush command
 */
function banner_history_queue_consume() {
  watchdog('banner_history', 'Executing: banner_history_queue_consume');

  civicrm_initialize();

  wmf_common_create_smashpig_context('banner_history');

  $qc = new BannerHistoryQueueConsumer(
    'banner-history',
    variable_get('banner_history_batch_time', 0),
    variable_get('banner_history_batch', 0)
  );
  $processed = $qc->dequeueMessages();

  if ($processed > 0) {
    watchdog('banner_history',
      "Processed $processed banner_history log ID association(s).");

  }
  else {
    watchdog('banner_history',
      'No banner history log ID associations processed.');
  }
}

<?php
/**
 * An extension of the queue2civicrm module to handle processing recurring payment
 * related messages from a queue.
 *
 * You may notice the use of the words 'recurring' and 'subscription' - they are
 * essentially interchangable.  They have slightly different meanings in the
 * PayPal land of subscription/recurring payments, but essentially they function
 * the same.  'Recurring' more clearly captures the idea behind how the WMF uses
 * PayPal's subscription payments and is how the fundraising team colloquially refers
 * to the 'subscription' service, so 'recurring' is used here in attempt to promote
 * greater clarity.  'Subscription' or its derivations are used in places where PayPal
 * uses the word in its field/variable names (eg subscr_payment).
 */

use Civi\Api4\ContributionRecur;
use Civi\WMFQueue\RecurringQueueConsumer;

/**
 * Implementation of hook_menu
 */
function recurring_menu() {
  $items['admin/config/queue2civicrm/recurring'] = [
    'title' => 'Recurring payments',
    'description' => t('Configure the recurring payments queue'),
    'access arguments' => ['administer queue2civicrm'],
    'page callback' => 'drupal_get_form',
    'page arguments' => ['recurring_settings'],
  ];
  return $items;
}

/**
 * Settings form for recurring payments configuration
 */
function recurring_settings() {
  $form = [];

  $form['recurring_disable'] = [
    '#type' => 'checkbox',
    '#title' => t('Disable job'),
    '#description' => t('If checked, no message processing will be performed.'),
    '#default_value' => variable_get('recurring_disable', FALSE),
  ];

  $form['recurring_description'] = [
    '#type' => 'markup',
    '#markup' => t('<p>The recurring queue contains notifications pertaining to subscription donations, such as monthly payments, cancellation,and expiration.</p>'),
  ];

  $form['recurring_batch'] = [
    '#type' => 'select',
    '#title' => t('Cron batch size'),
    '#description' => t('Maximum number of items processed by the recurring job'),
    '#default_value' => variable_get('recurring_batch', 0),
    '#options' => [
      0 => 'Unlimited',
      1 => 1,
      5 => 5,
      10 => 10,
      20 => 20,
      30 => 30,
      40 => 40,
      50 => 50,
      75 => 75,
      100 => 100,
      120 => 120,
      150 => 150,
    ],
  ];

  $form['recurring_batch_time'] = [
    '#type' => 'textfield',
    '#title' => t('Job time limit (in seconds)'),
    '#description' => t('Maximum elapsed duration of a recurring job, after which we will abort from the loop.  This can be used to set a reliable duty cycle for the job.  Either a time limit or batch size limit is required.'),
    '#required' => TRUE,
    '#default_value' => variable_get('recurring_batch_time', 90),
  ];

  return system_settings_form($form);
}

function recurring_batch_process($queue) {
  civicrm_initialize();
  wmf_common_create_smashpig_context('recurring');

  if (variable_get("recurring_disable", FALSE)) {
    \Civi::log('wmf')->notice('recurring: Recurring is disabled. No contributions processed.');
    return 0;
  }

  $consumer = new RecurringQueueConsumer(
    $queue,
    variable_get('recurring_batch_time', 0),
    variable_get('recurring_batch', 0)
  );

  $recurring_processed = $consumer->dequeueMessages();

  if ($recurring_processed > 0) {
    \Civi::log('wmf')->notice('recurring: Processed {number_processed} subscription messages.', ['number_processed' => $recurring_processed]);
  }
  else {
    \Civi::log('wmf')->notice('recurring: No contributions processed.');
  }

  return $recurring_processed;
}

<?php

use Civi\WMFQueue\AntifraudQueueConsumer;
use Civi\WMFQueue\PaymentsInitQueueConsumer;

/**
 * Implements hook_menu
 */
function wmf_fredge_qc_menu() {
  $items['admin/config/queue2civicrm/fredge_qc'] = [
    'title' => 'fredge',
    'description' => t('Configure fredge queue consumers'),
    'access arguments' => ['administer queue2civicrm'],
    'page callback' => 'drupal_get_form',
    'page arguments' => ['fredge_qc_settings'],
  ];
  return $items;
}

/**
 * Constructs the settings page for this module.
 *
 * @return array Of form components.
 */
function fredge_qc_settings() {
  $form = [];

  $form['fredge_antifraud_qc_disable'] = [
    '#type' => 'checkbox',
    '#title' => t('Disable antifraud job'),
    '#description' => t('If checked, no message processing will be performed for the antifraud queue.'),
    '#default_value' => variable_get('fredge_antifraud_qc_disable', FALSE),
  ];

  $form['fredge_antifraud_batch'] = [
    '#type' => 'select',
    '#title' => t('Cron batch size'),
    '#description' => t('Maximum number of items processed by an antifraud job'),
    '#default_value' => variable_get('fredge_antifraud_batch', 0),
    '#options' => [
      0 => 'Unlimited',
      1 => 1,
      5 => 5,
      10 => 10,
      50 => 50,
      75 => 75,
      100 => 100,
      150 => 150,
      300 => 300,
      500 => 500,
      750 => 750,
      1000 => 1000,
    ],
  ];

  $form['fredge_antifraud_batch_time'] = [
    '#type' => 'textfield',
    '#title' => t('Job time limit (in seconds)'),
    '#description' => t('Maximum elapsed duration of an antifraud job, after which we will abort from the loop.  This can be used to set a reliable duty cycle for the job.  Either a time limit or batch size limit is required.'),
    '#required' => TRUE,
    '#default_value' => variable_get('fredge_antifraud_batch_time', 90),
  ];

  $form['fredge_paymentsinit_qc_disable'] = [
    '#type' => 'checkbox',
    '#title' => t('Disable payments-init job'),
    '#description' => t('If checked, no message processing will be performed for the payments-init queue.'),
    '#default_value' => variable_get('fredge_qc_disable', FALSE),
  ];

  $form['fredge_paymentsinit_batch'] = [
    '#type' => 'select',
    '#title' => t('Cron batch size'),
    '#description' => t('Maximum number of items processed by an paymentsinit job'),
    '#default_value' => variable_get('fredge_paymentsinit_batch', 0),
    '#options' => [
      0 => 'Unlimited',
      1 => 1,
      5 => 5,
      10 => 10,
      50 => 50,
      75 => 75,
      100 => 100,
      150 => 150,
      300 => 300,
      500 => 500,
      750 => 750,
      1000 => 1000,
    ],
  ];

  $form['fredge_paymentsinit_batch_time'] = [
    '#type' => 'textfield',
    '#title' => t('Job time limit (in seconds)'),
    '#description' => t('Maximum elapsed duration of an payments-init job, after which we will abort from the loop.  This can be used to set a reliable duty cycle for the job.  Either a time limit or batch size limit is required.'),
    '#required' => TRUE,
    '#default_value' => variable_get('fredge_paymentsinit_batch_time', 90),
  ];

  return system_settings_form($form);
}

/**
 * Callback from Drush that actually executes the loop for processing messages in the queue.
 *
 * @see fredge_antifraud_queue_consume_drush_command()
 * @see AntifraudQueueConsumer::processMessage()
 */
function fredge_antifraud_batch_process() {
  civicrm_initialize();
  if (variable_get("fredge_antifraud_qc_disable", FALSE)) {
    \Civi::log('wmf')->notice('fredge_antifraud_qc_disable: fredge_antifraud_qc is disabled. No contributions processed.');
    return 0;
  }

  \Civi::log('wmf')->notice('fredge: Executing: fredge_antifraud_batch_process');

  wmf_common_create_smashpig_context('fredge_antifraud_batch_process');

  $fraudQueueConsumer = new AntifraudQueueConsumer(
    'payments-antifraud',
    variable_get('fredge_antifraud_batch_time', 0),
    variable_get('fredge_antifraud_batch', 0)
  );

  $processed = $fraudQueueConsumer->dequeueMessages();

  if ($processed > 0) {
    \Civi::log('wmf')->notice('fredge: Successfully processed {number_processed} antifraud message(s).', ['number_processed' => $processed]);
  }
  else {
    \Civi::log('wmf')->notice('fredge: No antifraud messages processed.');
  }
}

/**
 * Callback from Drush that actually executes the loop for processing messages in the queue.
 *
 * @see \fredge_paymentsinit_queue_consume_drush_command()
 * @see PaymentsInitQueueConsumer::processMessage()
 */
function fredge_paymentsinit_batch_process() {
  civicrm_initialize();
  if (variable_get("fredge_paymentsinit_qc_disable", FALSE)) {
    \Civi::log('wmf')->notice('fredge_paymentsinit_qc_disable: fredge_paymentsinit_qc is disabled. No contributions processed.');
    return 0;
  }

  \Civi::log('wmf')->notice('fredge: Executing: fredge_paymentsinit_batch_process');

  wmf_common_create_smashpig_context('fredge_paymentsinit_batch_process');

  $paymentsInitConsumer = new PaymentsInitQueueConsumer(
    'payments-init',
    variable_get('fredge_paymentsinit_batch_time', 0),
    variable_get('fredge_paymentsinit_batch', 0)
  );

  $processed = $paymentsInitConsumer->dequeueMessages();

  if ($processed > 0) {
    \Civi::log('wmf')->notice('fredge: Successfully processed {number_processed} paymentsinit message(s).', ['number_processed' => $processed]);
  }
  else {
    \Civi::log('wmf')->notice('fredge: No paymentsinit messages processed.');
  }
}

<?php
use queue2civicrm\fredge\AntifraudQueueConsumer;
use queue2civicrm\fredge\PaymentsInitQueueConsumer;
use Civi\WMFException\FredgeDataValidationException;

/**
 * Implements hook_menu
 */
function wmf_fredge_qc_menu() {
  $items[ 'admin/config/queue2civicrm/fredge_qc' ] = array(
    'title'            => 'fredge',
    'description'      => t('Configure fredge queue consumers'),
    'access arguments' => array( 'administer queue2civicrm' ),
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array( 'fredge_qc_settings' ),
  );
  return $items;
}

/**
 * Constructs the settings page for this module.
 *
 * @return array Of form components.
 */
function fredge_qc_settings() {
  $form = array();

  $form['fredge_antifraud_qc_disable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Disable antifraud job'),
    '#description' => t('If checked, no message processing will be performed for the antifraud queue.'),
    '#default_value' => variable_get('fredge_antifraud_qc_disable', false),
  );

  $form['fredge_antifraud_batch'] = array(
    '#type'          => 'select',
    '#title'         => t('Cron batch size'),
    '#description'   => t('Maximum number of items processed by an antifraud job'),
    '#default_value' => variable_get('fredge_antifraud_batch', 0),
    '#options'       => array(
      0   => 'Unlimited',
      1   => 1,
      5   => 5,
      10  => 10,
      50  => 50,
      75  => 75,
      100 => 100,
      150 => 150,
      300 => 300,
      500 => 500,
      750 => 750,
      1000 => 1000
    ),
  );

  $form['fredge_antifraud_batch_time'] = array(
    '#type' => 'textfield',
    '#title' => t('Job time limit (in seconds)'),
    '#description' => t('Maximum elapsed duration of an antifraud job, after which we will abort from the loop.  This can be used to set a reliable duty cycle for the job.  Either a time limit or batch size limit is required.'),
    '#required' => TRUE,
    '#default_value' => variable_get('fredge_antifraud_batch_time', 90),
  );

  $form['fredge_paymentsinit_qc_disable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Disable payments-init job'),
    '#description' => t('If checked, no message processing will be performed for the payments-init queue.'),
    '#default_value' => variable_get('fredge_qc_disable', false),
  );

  $form['fredge_paymentsinit_batch'] = array(
    '#type'          => 'select',
    '#title'         => t('Cron batch size'),
    '#description'   => t('Maximum number of items processed by an paymentsinit job'),
    '#default_value' => variable_get('fredge_paymentsinit_batch', 0),
    '#options'       => array(
      0   => 'Unlimited',
      1   => 1,
      5   => 5,
      10  => 10,
      50  => 50,
      75  => 75,
      100 => 100,
      150 => 150,
      300 => 300,
      500 => 500,
      750 => 750,
      1000 => 1000
    ),
  );

  $form['fredge_paymentsinit_batch_time'] = array(
    '#type' => 'textfield',
    '#title' => t('Job time limit (in seconds)'),
    '#description' => t('Maximum elapsed duration of an payments-init job, after which we will abort from the loop.  This can be used to set a reliable duty cycle for the job.  Either a time limit or batch size limit is required.'),
    '#required' => TRUE,
    '#default_value' => variable_get('fredge_paymentsinit_batch_time', 90),
  );

  return system_settings_form($form);
}

/**
 * Callback from Drush that actually executes the loop for processing messages in the queue.
 * @see fredge_antifraud_queue_consume_drush_command()
 * @see AntifraudQueueConsumer::processMessage()
 */
function fredge_antifraud_batch_process() {
  civicrm_initialize();
  if (variable_get( "fredge_antifraud_qc_disable", false )){
    \Civi::log('wmf')->notice('fredge_antifraud_qc_disable: fredge_antifraud_qc is disabled. No contributions processed.');
    return 0;
  }

  \Civi::log('wmf')->notice('fredge: Executing: fredge_antifraud_batch_process');

  wmf_common_create_smashpig_context( 'fredge_antifraud_batch_process');

  $fraudQueueConsumer = new AntifraudQueueConsumer(
    'payments-antifraud',
    variable_get('fredge_antifraud_batch_time', 0),
    variable_get('fredge_antifraud_batch', 0)
  );

  $processed = $fraudQueueConsumer->dequeueMessages();

  if ($processed > 0) {
    \Civi::log('wmf')->notice('fredge: Successfully processed {number_processed} antifraud message(s).', ['number_processed' => $processed]);
  }
  else {
    \Civi::log('wmf')->notice('fredge: No antifraud messages processed.');
  }
}
/**
 * Callback from Drush that actually executes the loop for processing messages in the queue.
 * @see \fredge_paymentsinit_queue_consume_drush_command()
 * @see PaymentsInitQueueConsumer::processMessage()
 */
function fredge_paymentsinit_batch_process() {
  civicrm_initialize();
  if (variable_get( "fredge_paymentsinit_qc_disable", false )){
    \Civi::log('wmf')->notice('fredge_paymentsinit_qc_disable: fredge_paymentsinit_qc is disabled. No contributions processed.');
    return 0;
  }

  \Civi::log('wmf')->notice('fredge: Executing: fredge_paymentsinit_batch_process');

  wmf_common_create_smashpig_context( 'fredge_paymentsinit_batch_process');

  $paymentsInitConsumer = new PaymentsInitQueueConsumer(
    'payments-init',
    variable_get('fredge_paymentsinit_batch_time', 0),
    variable_get('fredge_paymentsinit_batch', 0)
  );

  $processed = $paymentsInitConsumer->dequeueMessages();


  if ($processed > 0) {
    \Civi::log('wmf')->notice('fredge: Successfully processed {number_processed} paymentsinit message(s).', ['number_processed' => $processed]);
  }
  else {
    \Civi::log('wmf')->notice('fredge: No paymentsinit messages processed.');
  }
}

/**
 * Check a message against a table schema, and complain if it doesn't fit. Also
 * format date fields and discard fields with no matching column.
 *
 * @param array $msg the array-converted message body
 * @param string $table the table you're trying to put $msg into
 * @param string $log_identifier Some small string for the log that will help id
 * the message if something goes amiss and we have to log about it.
 * @param bool $require_all if true, throw an exception on missing fields
 *
 * @return array an array of the relevant fields, with dates in the right format
 * @throws FredgeDataValidationException
 */
function fredge_prep_data( $msg, $table, $log_identifier, $require_all = true ) {
  if ( !is_array($msg) || empty($msg) ){
    $error = "$log_identifier: Trying to insert nothing into $table. Dropping message on floor.";
    throw new FredgeDataValidationException( $error );
  }

  static $schemata = null;
  if (is_null($schemata)) {
    require_once('wmf_fredge_qc.install'); //annoyed I have to do this, but this seems the cleanest way from here
    $schemata = wmf_fredge_qc_schema();
    //and then, because we only care about the stuff we're inserting, remove the 'type' => 'serial' fields, because autonumber
    foreach ($schemata as $schema_table => $schema) {
      foreach ($schema['fields'] as $field => $definition) {
        if (isset($definition['type']) && $definition['type'] === 'serial') {
          unset($schemata[$schema_table]['fields'][$field]);
        }
      }
    }
  }
  // FIXME: schema should match wire format & frontend name
  // renaming message field here to match column.
  if (empty($msg['currency_code']) && !empty($msg['currency'])) {
    $msg['currency_code'] = $msg['currency'];
    unset($msg['currency']);
  }
  $data = array();
  foreach ($schemata[$table]['fields'] as $field => $definition) {
    if (!array_key_exists($field, $msg)) {
      if ($require_all) {
        $error = "$log_identifier: Expected field $field bound for table $table not present! Dropping message on floor.";
        throw new FredgeDataValidationException($error);
        //so... add fields to DI first when you do schema changes.
      }
    } else {
      //the field exists. Woot.
      // Check data length.
      if ( array_key_exists( 'length', $definition )
        && $definition['length'] < strlen( $msg[$field] )
      ) {
        $error = "$log_identifier: Data in field $field is too long! Dropping message on floor.";
        throw new FredgeDataValidationException($error);
      }

      // Convert timestamps to native SQL format datetime.
      if (array_key_exists('mysql_type', $definition) && $definition['mysql_type'] === 'DATETIME') {
        $msg[$field] = wmf_common_date_unix_to_sql($msg[$field]);
      }
      // e.g. 3.5848273556811E+38 breaks the db - use 100 mill as 'infinitely dubious'
      if (!empty($msg['risk_score']) && $msg['risk_score'] > 100000000) {
        $msg['risk_score'] = 100000000;
      }

      $data[$field] = $msg[$field];
    }
  }
  return $data;
}


<?php

require_once 'offline2civicrm.common.inc';

use Civi\WMFException\WMFException;
use SmashPig\Core\UtcDate;

/**
 * Implementation of hook_menu().
 */
function offline2civicrm_menu() {
  $items = array();

  $items['admin/config/offline2civicrm'] = array(
    'title' => 'Offline to CiviCRM',
    'access arguments' => array('administer offline2civicrm'),
    'page callback' => 'system_admin_menu_block_page',
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  /*
  TODO
  $items['admin/config/offline2civicrm/settings'] = array(
    'title' => 'Offline to CiviCRM',
    'description' => t('Configure offline import interface.'),
    'access arguments' => array('administer offline2civicrm'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('offline2civicrm_settings'),
  );
  */

  $items['admin/import_checks'] = array(
    'title' => 'Import Checks',
    'access arguments' => array('offline2civicrm bulk import'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('offline2civicrm_import_checks_form'),
  );

  $items['import_output'] = array(
    'title' => 'Import Output',
    'access arguments' => array('offline2civicrm bulk import'),
    'page callback' => 'offline2civicrm_download_csv',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementation of hook_permission().
 */
function offline2civicrm_permission() {
  return array(
    'administer offline2civicrm' => array(
      'title' => t("Administer offline2civicrm"),
    ),
    'offline2civicrm bulk import' => array(
      'title' => t("Import batch files with offline2civicrm"),
    ),
  );
}

/**
 * Callback for menu path "admin/config/offline2civicrm".
 */
function offline2civicrm_settings() {
  $form = array();

  return system_settings_form($form);
}

function offline2civicrm_import_checks_form($form, &$form_state) {
  $dir = drupal_get_path('module', 'offline2civicrm');
  drupal_add_js($dir . '/upload_form.js');

  $log_events = ChecksImportLog::recentEvents();
  $headers = array('Time', 'Who', 'Done');
  $rows = array();
  foreach ($log_events as $event) {
    $rows[] = [
      $event['time'],
      $event['who'],
      $event['done'],
    ];
  }
  $log_html = theme_table(array(
      'header' => $headers,
      'rows' => $rows,
      'empty' => "No events yet.",
      'attributes' => array(),
      'caption' => t('Latest import events'),
      'colgroups' => array(),
      'sticky' => TRUE,
    )) . theme('pager');
  $form['#tree'] = TRUE;
  $form['#validate'] = array('offline2civicrm_import_checks_form_validate');

  $form['load_info_text'] = array(
    '#markup' => '<p>' . t('CiviCRM server load: In the last 5 minutes ' . offline2civicrm_get_contribution_load() . ' contributions have been added to CiviCRM') . '</p>'
  );

  $form['import_upload_file'] = array(
    '#title' => t('Upload checks file'),
    '#type' => 'file',
  );
  $form['import_batch_limit'] = array(
    '#title' => t('Number of items to process each batch'),
    '#description' => t('Higher values perform somewhat better, lower values have less risk of timeout'),
    '#type' => 'textfield',
    '#attributes' => array(
      ' type' => 'number', // insert space before attribute name :)
    ),
    '#required' => TRUE,
    '#default_value' => 100,
  );
  // Will be replaced by import specific fields.
  $form['offline2civicrm_settings'] = array(
    '#type' => 'fieldset',
    '#title' => 'Import specific fields',
    '#prefix' => '<div id="offline2civicrm_settings">',
    '#suffix' => '</div>',
  );
  if (isset($form_state['values'])) {
    $form['offline2civicrm_settings'] = array_merge($form['offline2civicrm_settings'], offline2civicrm_import_fields($form, $form_state));
  }

  $form['offline2civicrm_settings']['import_upload_format'] = array(
    '#title' => t('File format'),
    '#type' => 'radios',
    '#default_value' => 'generic_ind',
    '#options' => array(
      'benevity' => t('Benevity'),
      'citibank_individuals' => t('Citibank Individuals'),
      'engage' => t('Engage'),
      'fidelity' => t('Fidelity'),
      'foreign_checks' => t('Foreign Checks'),
      'generic_ind' => t('Generic Individuals'),
    ),
    '#ajax' => array(
      'callback' => 'offline2civicrm_import_ajax',
      'wrapper' => 'offline2civicrm_settings',
      'method' => 'replace',
      'event' => 'change',
    ),
  );
  $form['import_upload_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Upload'),
  );
  $form['log'] = array(
    '#markup' => $log_html,
  );

  $form['#attributes'] = array('enctype' => "multipart/form-data");

  return $form;
}

/**
 * Get the number of contributions added to CiviCRM in the last 5 minutes.
 *
 * This is presented to users to help them decide whether it is a good time
 * to do an import. (hint if the server is under a lot of load & donations are
 * crashing in the answer may be no).
 */
function offline2civicrm_get_contribution_load() {
  civicrm_initialize();
  $sinceDateTime = date('YmdHis', UtcDate::getUtcTimestamp('- 5 minutes'));
  return CRM_Core_DAO::singleValueQuery('SELECT count(*) FROM civicrm_contribution WHERE receive_date > %1',
    array(1 => array($sinceDateTime, 'Timestamp'))
  );
}

/**
 * Custom callback to build form fields.
 */
function offline2civicrm_import_ajax($form, &$form_state) {
  return $form['offline2civicrm_settings'];
}

/**
 * Custom callback to build form fields.
 *
 * @throws \Exception
 */
function offline2civicrm_import_fields($form, &$form_state) {
  $values = $form_state['values'];
  $importer = offline2civicrm_get_importer_class($values['offline2civicrm_settings']['import_upload_format'], NULL);
  return $importer->getImportFields();
}

/**
 * Download a results csv.
 *
 * @param $file_name
 */
  function offline2civicrm_download_csv($file_name) {
  global $user;
  if (!preg_match('/\.' . $user->uid . '$/', $file_name)) {
    return drupal_access_denied();
  }
  $fileURI = 'temporary://' . $file_name . '.csv';
  if ($file_name && file_exists($fileURI)) {
    file_transfer($fileURI, array(
      'Content-Type' => 'text/csv',
      'Content-Disposition' => 'attachment; filename="' . $file_name . '.csv"',
    ));
  }
  else {
    return drupal_access_denied();
  }
}

/**
 * Validate form input.
 *
 * @param $form
 * @param $form_state
 *
 * @throws \Exception
 */
function offline2civicrm_import_checks_form_validate($form, $form_state) {
  $additionalFields = offline2civicrm_get_gateway_specific_fields($form_state);
  $importer = offline2civicrm_get_importer_class($form_state['values']['offline2civicrm_settings']['import_upload_format'], '', $additionalFields);
  try {
    $importer->validateFormFields($additionalFields);
  }
  catch (Exception $e) {
    form_set_error(t('Invalid form data'), $e->getMessage());
  }
}

function offline2civicrm_import_checks_form_submit($form, $form_state) {
  civicrm_initialize();
  \CRM_SmashPig_ContextWrapper::createContext('offline2civicrm');

  if (!empty($form_state['values']['import_upload_submit'])) {
    try {
      $validators = array(
        'file_validate_extensions' => array('csv'),
      );
      $file = file_save_upload('import_upload_file', $validators);
      if (!$file) {
        throw new Exception(t("Form upload failed!"));
      }

      // This workaround... does not always work.  Will be deprecated in Civi 4.3
      civicrm_initialize();
      CRM_Core_TemporaryErrorScope::useException();
      $additionalFields = offline2civicrm_get_gateway_specific_fields($form_state);

      $importer = offline2civicrm_get_importer_class($form_state['values']['offline2civicrm_settings']['import_upload_format'], $file->uri, $additionalFields);

      $batch = array(
        'operations' => [],
        'finished' => 'offline2civicrm_import_batch_finished', // runs after batch is finished
        'title' => t('Processing Import'),
        'init_message' => t('Import is starting.'),
        // https://www.drupal.org/docs/7/api/batch-api/overview
        // "Placeholders note the progression by operation, i.e. if there are"
        // so we can use @current & @total but that will be the number of
        // batches not rows which might be confusing.
        'progress_message' => t('Processed @percentage%'),
        'error_message' => t('OMG OMG something has gone wrong.'),
      );
      $progress = 0;
      // how many to process for each run
      $limit = $form_state['values']['import_batch_limit'];
      $max = $importer->getRowCount();
      while ($progress < $max) {
        $batchSize = (($max - $progress) > $limit) ? $limit : ($max - $progress);
        // We pass the $importer here - this is the original importer instance that we have just
        // instantiated. Any changes to this object are not retained between batches. The $context object
        // can be used to pass information between batches - but only information that can be serialised,
        // not file resources.
        $batch['operations'][] = array('offline2civicrm_import_batch', [$progress, $batchSize, $importer]);
        $progress = $progress + $batchSize;
      }
      batch_set($batch);
      batch_process('admin/import_checks'); // page to return to after complete

    }
    catch (WMFException $ex) {
      $message = t("Import error: !err", array('!err' => $ex->getMessage()));
      form_set_error('import_upload_file', $message);
      ChecksImportLog::record($message);
    }
    catch (Exception $ex) {
      $message = t("Unknown import error: !err", array('!err' => $ex->getMessage()));
      form_set_error('import_upload_file', $message);
      ChecksImportLog::record($message);
    }
    if ($file) {
      file_delete($file, TRUE);
    }
  }
}

/**
 * Import batch of rows from csv file.
 *
 * @param int $offset
 * @param int $limit
 * @param \ChecksFile $importer
 * @param array $context
 *
 * @throws \League\Csv\Exception
 */
function offline2civicrm_import_batch($offset, $limit, $importer, &$context) {
  civicrm_initialize();
  $lock = Civi::lockManager()->acquire('worker.offline_batch.' . $offset . '_' . $limit . md5($importer->getFileUri()));
  if (!$lock->isAcquired()) {
    $importer->setTotalBatchSkippedRows($importer->getTotalBatchSkippedRows() + $limit);
    $importer->setMessage(NULL, 'Not attempted due to possible dual process', $importer->getTotalBatchSkippedRows());
    $context['results'] = $importer->getProgress() ?? [
      'isSuccess' => FALSE,
      'messages' => 'There was a process conflict of some sort. Please re-upload the file and missing ones will be retried',
    ];
    $context['message'] = 'There appear to be 2 processes running. This process will continue and import all the rows it can but should be rerun at the end';
    drupal_set_message('
      Please re-run the import to ensure all rows are imported.
      This error occurs when 2 processes attempt to run at once
      (potentially due to slow internet connections in parts of Wales).
       Re-uploading the file will skip any rows that have imported and ensure any
       skipped ones are imported.', 'error', FALSE);
    return;
  }
  \CRM_SmashPig_ContextWrapper::createContext('offline2civicrm');

  $context['message'] = t('Be very excited - we are doing your thing');
  $importer->setProgress($context['results']);

  $messages = $importer->import($offset, $limit);
  $context['results'] = $importer->getProgress();
  $context['message'] = implode('<br>', $messages);
  $lock->release();

}

function offline2civicrm_import_batch_finished($success, $results, $operations, $timeTaken) {
  civicrm_initialize();
  $status = $results['isSuccess'] ? ($results['numberErrorRows'] ? 'warning' : 'status') : 'error';
  drupal_set_message((implode('<br>', $results['messages'])), $status);
  foreach ($results['messages'] as $message) {
    ChecksImportLog::record($message);
  }
  \Civi::log('wmf')->info('offline2civicrm: {message}', ['message' => implode(' ', $results['messages'])]);
}

/**
 * @param $form_state
 *
 * @return array
 */
function offline2civicrm_get_gateway_specific_fields($form_state) {
  $additionalFields = array_diff_key($form_state['values']['offline2civicrm_settings'], array('import_upload_format' => TRUE));
  return $additionalFields;
}

/**
 * Get the class for the import.
 *
 * @param string $uploadFormat
 * @param string $fileUri
 * @param array $additionalFields
 *
 * @return \ChecksFile
 *
 * @throws \Exception
 */
function offline2civicrm_get_importer_class($uploadFormat, $fileUri, $additionalFields = array()) {
  switch ($uploadFormat) {

    case 'citibank_individuals':
      return new CitibankIndividualsFile($fileUri, $additionalFields);
      break;

    case 'engage':
      return new EngageChecksFile($fileUri, $additionalFields);

    case 'generic_ind':
      return new WmfImportFile($fileUri, $additionalFields);

    case 'benevity':
      return new BenevityFile($fileUri, $additionalFields);

    case 'fidelity':
      return new FidelityFile($fileUri, $additionalFields);

    case 'foreign_checks':
      return new ForeignChecksFile($fileUri, $additionalFields);


    default:
      throw new Exception('Bad file format selection');
  }

}

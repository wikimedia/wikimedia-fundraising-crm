<?php

/**
 * @package CRM
 * @copyright CiviCRM LLC https://civicrm.org/licensing
 *
 * Generated from org.wikimedia.wmffraud/xml/schema/CRM/WMFFraud/PaymentsFraudBreakdown.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 * (GenCodeChecksum:8f82d4e162fa28eefe6396c1d542e74a)
 */
use CRM_WMFFraud_ExtensionUtil as E;

/**
 * Database access object for the PaymentsFraudBreakdown entity.
 */
class CRM_WMFFraud_DAO_PaymentsFraudBreakdown extends CRM_Core_DAO {
  const EXT = E::LONG_NAME;
  const TABLE_ADDED = '';

  /**
   * Static instance to hold the table name.
   *
   * @var string
   */
  public static $_tableName = 'payments_fraud_breakdown';

  /**
   * Should CiviCRM log any modifications to this table in the civicrm_log table.
   *
   * @var bool
   */
  public static $_log = FALSE;

  /**
   * Unique PaymentsInitial ID
   *
   * @var int|string|null
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $id;

  /**
   * @var int|string|null
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $payments_fraud_id;

  /**
   * @var string
   *   (SQL type: varchar(0))
   *   Note that values will be retrieved from the database as a string.
   */
  public $filter_name;

  /**
   * @var float|string
   *   (SQL type: decimal(20,2))
   *   Note that values will be retrieved from the database as a string.
   */
  public $risk_score;

  /**
   * Class constructor.
   */
  public function __construct() {
    $this->__table = 'payments_fraud_breakdown';
    parent::__construct();
  }

  /**
   * Returns localized title of this entity.
   *
   * @param bool $plural
   *   Whether to return the plural version of the title.
   */
  public static function getEntityTitle($plural = FALSE) {
    return $plural ? E::ts('Payments Fraud Breakdowns') : E::ts('Payments Fraud Breakdown');
  }

  /**
   * Returns all the column names of this table
   *
   * @return array
   */
  public static function &fields() {
    if (!isset(Civi::$statics[__CLASS__]['fields'])) {
      Civi::$statics[__CLASS__]['fields'] = [
        'id' => [
          'name' => 'id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('ID'),
          'description' => E::ts('Unique Payments Fraud Breakdown ID'),
          'required' => TRUE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'payments_fraud_breakdown.id',
          'table_name' => 'payments_fraud_breakdown',
          'entity' => 'PaymentsFraudBreakdown',
          'bao' => 'CRM_WMFFraud_DAO_PaymentsFraudBreakdown',
          'localizable' => 0,
          'html' => [
            'type' => 'Number',
          ],
          'readonly' => TRUE,
          'add' => NULL,
        ],
        'payments_fraud_id' => [
          'name' => 'payments_fraud_id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Payments Fraud ID'),
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'payments_fraud_breakdown.payments_fraud_id',
          'table_name' => 'payments_fraud_breakdown',
          'entity' => 'PaymentsFraudBreakdown',
          'bao' => 'CRM_WMFFraud_DAO_PaymentsFraudBreakdown',
          'localizable' => 0,
          'FKClassName' => 'CRM_WMFFraud_DAO_PaymentsFraud',
          'FKColumnName' => 'id',
          'html' => [
            'type' => 'EntityRef',
            'label' => E::ts("PaymentsFraud"),
          ],
          'add' => NULL,
        ],
        'filter_name' => [
          'name' => 'filter_name',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Filter Name'),
          'required' => FALSE,
          'maxlength' => 0,
          'size' => CRM_Utils_Type::TWO,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'payments_fraud_breakdown.filter_name',
          'table_name' => 'payments_fraud_breakdown',
          'entity' => 'PaymentsFraudBreakdown',
          'bao' => 'CRM_WMFFraud_DAO_PaymentsFraudBreakdown',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
          'add' => NULL,
        ],
        'risk_score' => [
          'name' => 'risk_score',
          'type' => CRM_Utils_Type::T_MONEY,
          'title' => E::ts('risk_score'),
          'required' => FALSE,
          'precision' => [
            20,
            2,
          ],
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'payments_fraud_breakdown.risk_score',
          'table_name' => 'payments_fraud_breakdown',
          'entity' => 'PaymentsFraudBreakdown',
          'bao' => 'CRM_WMFFraud_DAO_PaymentsFraudBreakdown',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
          'add' => NULL,
        ],
      ];
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'fields_callback', Civi::$statics[__CLASS__]['fields']);
    }
    return Civi::$statics[__CLASS__]['fields'];
  }

  /**
   * Returns the list of fields that can be imported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &import($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getImports(__CLASS__, '_fraud_breakdown', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of fields that can be exported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &export($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getExports(__CLASS__, '_fraud_breakdown', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of indices
   *
   * @param bool $localize
   *
   * @return array
   */
  public static function indices($localize = TRUE) {
    $indices = [];
    return ($localize && !empty($indices)) ? CRM_Core_DAO_AllCoreTables::multilingualize(__CLASS__, $indices) : $indices;
  }

}

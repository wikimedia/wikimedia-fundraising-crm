DELIMITER //
DROP FUNCTION IF EXISTS civicrm_strip_non_numeric //

    CREATE FUNCTION civicrm_strip_non_numeric(input VARCHAR(255))
      RETURNS VARCHAR(255)
      DETERMINISTIC
      NO SQL
    BEGIN
      DECLARE output   VARCHAR(255) DEFAULT '';
      DECLARE iterator INT          DEFAULT 1;
      WHILE iterator < (LENGTH(input) + 1) DO
        IF SUBSTRING(input, iterator, 1) IN ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9') THEN
          SET output = CONCAT(output, SUBSTRING(input, iterator, 1));
        END IF;
        SET iterator = iterator + 1;
      END WHILE;
      RETURN output;
    END //
DROP TRIGGER IF EXISTS civicrm_acl_before_insert //
DROP TRIGGER IF EXISTS civicrm_acl_before_update //
DROP TRIGGER IF EXISTS civicrm_acl_before_delete //
DROP TRIGGER IF EXISTS civicrm_acl_after_insert //
DROP TRIGGER IF EXISTS civicrm_acl_after_update //
DROP TRIGGER IF EXISTS civicrm_acl_after_delete //
DROP TRIGGER IF EXISTS civicrm_acl_entity_role_before_insert //
DROP TRIGGER IF EXISTS civicrm_acl_entity_role_before_update //
DROP TRIGGER IF EXISTS civicrm_acl_entity_role_before_delete //
DROP TRIGGER IF EXISTS civicrm_acl_entity_role_after_insert //
DROP TRIGGER IF EXISTS civicrm_acl_entity_role_after_update //
DROP TRIGGER IF EXISTS civicrm_acl_entity_role_after_delete //
DROP TRIGGER IF EXISTS civicrm_action_schedule_before_insert //
DROP TRIGGER IF EXISTS civicrm_action_schedule_before_update //
DROP TRIGGER IF EXISTS civicrm_action_schedule_before_delete //
DROP TRIGGER IF EXISTS civicrm_action_schedule_after_insert //
DROP TRIGGER IF EXISTS civicrm_action_schedule_after_update //
DROP TRIGGER IF EXISTS civicrm_action_schedule_after_delete //
DROP TRIGGER IF EXISTS civicrm_activity_before_insert //
DROP TRIGGER IF EXISTS civicrm_activity_before_update //
DROP TRIGGER IF EXISTS civicrm_activity_before_delete //
DROP TRIGGER IF EXISTS civicrm_activity_after_insert //
DROP TRIGGER IF EXISTS civicrm_activity_after_update //
DROP TRIGGER IF EXISTS civicrm_activity_after_delete //
DROP TRIGGER IF EXISTS civicrm_activity_contact_before_insert //
DROP TRIGGER IF EXISTS civicrm_activity_contact_before_update //
DROP TRIGGER IF EXISTS civicrm_activity_contact_before_delete //
DROP TRIGGER IF EXISTS civicrm_activity_contact_after_insert //
DROP TRIGGER IF EXISTS civicrm_activity_contact_after_update //
DROP TRIGGER IF EXISTS civicrm_activity_contact_after_delete //
DROP TRIGGER IF EXISTS civicrm_activity_tracking_before_insert //
DROP TRIGGER IF EXISTS civicrm_activity_tracking_before_update //
DROP TRIGGER IF EXISTS civicrm_activity_tracking_before_delete //
DROP TRIGGER IF EXISTS civicrm_activity_tracking_after_insert //
DROP TRIGGER IF EXISTS civicrm_activity_tracking_after_update //
DROP TRIGGER IF EXISTS civicrm_activity_tracking_after_delete //
DROP TRIGGER IF EXISTS civicrm_address_before_insert //
DROP TRIGGER IF EXISTS civicrm_address_before_update //
DROP TRIGGER IF EXISTS civicrm_address_before_delete //
DROP TRIGGER IF EXISTS civicrm_address_after_insert //
DROP TRIGGER IF EXISTS civicrm_address_after_update //
DROP TRIGGER IF EXISTS civicrm_address_after_delete //
DROP TRIGGER IF EXISTS civicrm_address_format_before_insert //
DROP TRIGGER IF EXISTS civicrm_address_format_before_update //
DROP TRIGGER IF EXISTS civicrm_address_format_before_delete //
DROP TRIGGER IF EXISTS civicrm_address_format_after_insert //
DROP TRIGGER IF EXISTS civicrm_address_format_after_update //
DROP TRIGGER IF EXISTS civicrm_address_format_after_delete //
DROP TRIGGER IF EXISTS civicrm_afform_submission_before_insert //
DROP TRIGGER IF EXISTS civicrm_afform_submission_before_update //
DROP TRIGGER IF EXISTS civicrm_afform_submission_before_delete //
DROP TRIGGER IF EXISTS civicrm_afform_submission_after_insert //
DROP TRIGGER IF EXISTS civicrm_afform_submission_after_update //
DROP TRIGGER IF EXISTS civicrm_afform_submission_after_delete //
DROP TRIGGER IF EXISTS civicrm_batch_before_insert //
DROP TRIGGER IF EXISTS civicrm_batch_before_update //
DROP TRIGGER IF EXISTS civicrm_batch_before_delete //
DROP TRIGGER IF EXISTS civicrm_batch_after_insert //
DROP TRIGGER IF EXISTS civicrm_batch_after_update //
DROP TRIGGER IF EXISTS civicrm_batch_after_delete //
DROP TRIGGER IF EXISTS civicrm_campaign_before_insert //
DROP TRIGGER IF EXISTS civicrm_campaign_before_update //
DROP TRIGGER IF EXISTS civicrm_campaign_before_delete //
DROP TRIGGER IF EXISTS civicrm_campaign_after_insert //
DROP TRIGGER IF EXISTS civicrm_campaign_after_update //
DROP TRIGGER IF EXISTS civicrm_campaign_after_delete //
DROP TRIGGER IF EXISTS civicrm_campaign_group_before_insert //
DROP TRIGGER IF EXISTS civicrm_campaign_group_before_update //
DROP TRIGGER IF EXISTS civicrm_campaign_group_before_delete //
DROP TRIGGER IF EXISTS civicrm_campaign_group_after_insert //
DROP TRIGGER IF EXISTS civicrm_campaign_group_after_update //
DROP TRIGGER IF EXISTS civicrm_campaign_group_after_delete //
DROP TRIGGER IF EXISTS civicrm_case_before_insert //
DROP TRIGGER IF EXISTS civicrm_case_before_update //
DROP TRIGGER IF EXISTS civicrm_case_before_delete //
DROP TRIGGER IF EXISTS civicrm_case_after_insert //
DROP TRIGGER IF EXISTS civicrm_case_after_update //
DROP TRIGGER IF EXISTS civicrm_case_after_delete //
DROP TRIGGER IF EXISTS civicrm_case_activity_before_insert //
DROP TRIGGER IF EXISTS civicrm_case_activity_before_update //
DROP TRIGGER IF EXISTS civicrm_case_activity_before_delete //
DROP TRIGGER IF EXISTS civicrm_case_activity_after_insert //
DROP TRIGGER IF EXISTS civicrm_case_activity_after_update //
DROP TRIGGER IF EXISTS civicrm_case_activity_after_delete //
DROP TRIGGER IF EXISTS civicrm_case_contact_before_insert //
DROP TRIGGER IF EXISTS civicrm_case_contact_before_update //
DROP TRIGGER IF EXISTS civicrm_case_contact_before_delete //
DROP TRIGGER IF EXISTS civicrm_case_contact_after_insert //
DROP TRIGGER IF EXISTS civicrm_case_contact_after_update //
DROP TRIGGER IF EXISTS civicrm_case_contact_after_delete //
DROP TRIGGER IF EXISTS civicrm_case_type_before_insert //
DROP TRIGGER IF EXISTS civicrm_case_type_before_update //
DROP TRIGGER IF EXISTS civicrm_case_type_before_delete //
DROP TRIGGER IF EXISTS civicrm_case_type_after_insert //
DROP TRIGGER IF EXISTS civicrm_case_type_after_update //
DROP TRIGGER IF EXISTS civicrm_case_type_after_delete //
DROP TRIGGER IF EXISTS civicrm_component_before_insert //
DROP TRIGGER IF EXISTS civicrm_component_before_update //
DROP TRIGGER IF EXISTS civicrm_component_before_delete //
DROP TRIGGER IF EXISTS civicrm_component_after_insert //
DROP TRIGGER IF EXISTS civicrm_component_after_update //
DROP TRIGGER IF EXISTS civicrm_component_after_delete //
DROP TRIGGER IF EXISTS civicrm_contact_before_insert //
DROP TRIGGER IF EXISTS civicrm_contact_before_update //
DROP TRIGGER IF EXISTS civicrm_contact_before_delete //
DROP TRIGGER IF EXISTS civicrm_contact_after_insert //
DROP TRIGGER IF EXISTS civicrm_contact_after_update //
DROP TRIGGER IF EXISTS civicrm_contact_after_delete //
DROP TRIGGER IF EXISTS civicrm_contact_layout_before_insert //
DROP TRIGGER IF EXISTS civicrm_contact_layout_before_update //
DROP TRIGGER IF EXISTS civicrm_contact_layout_before_delete //
DROP TRIGGER IF EXISTS civicrm_contact_layout_after_insert //
DROP TRIGGER IF EXISTS civicrm_contact_layout_after_update //
DROP TRIGGER IF EXISTS civicrm_contact_layout_after_delete //
DROP TRIGGER IF EXISTS civicrm_contact_name_pair_before_insert //
DROP TRIGGER IF EXISTS civicrm_contact_name_pair_before_update //
DROP TRIGGER IF EXISTS civicrm_contact_name_pair_before_delete //
DROP TRIGGER IF EXISTS civicrm_contact_name_pair_after_insert //
DROP TRIGGER IF EXISTS civicrm_contact_name_pair_after_update //
DROP TRIGGER IF EXISTS civicrm_contact_name_pair_after_delete //
DROP TRIGGER IF EXISTS civicrm_contact_name_pair_family_before_insert //
DROP TRIGGER IF EXISTS civicrm_contact_name_pair_family_before_update //
DROP TRIGGER IF EXISTS civicrm_contact_name_pair_family_before_delete //
DROP TRIGGER IF EXISTS civicrm_contact_name_pair_family_after_insert //
DROP TRIGGER IF EXISTS civicrm_contact_name_pair_family_after_update //
DROP TRIGGER IF EXISTS civicrm_contact_name_pair_family_after_delete //
DROP TRIGGER IF EXISTS civicrm_contact_type_before_insert //
DROP TRIGGER IF EXISTS civicrm_contact_type_before_update //
DROP TRIGGER IF EXISTS civicrm_contact_type_before_delete //
DROP TRIGGER IF EXISTS civicrm_contact_type_after_insert //
DROP TRIGGER IF EXISTS civicrm_contact_type_after_update //
DROP TRIGGER IF EXISTS civicrm_contact_type_after_delete //
DROP TRIGGER IF EXISTS civicrm_contribution_before_insert //
DROP TRIGGER IF EXISTS civicrm_contribution_before_update //
DROP TRIGGER IF EXISTS civicrm_contribution_before_delete //
DROP TRIGGER IF EXISTS civicrm_contribution_after_insert //
DROP TRIGGER IF EXISTS civicrm_contribution_after_update //
DROP TRIGGER IF EXISTS civicrm_contribution_after_delete //
DROP TRIGGER IF EXISTS civicrm_contribution_page_before_insert //
DROP TRIGGER IF EXISTS civicrm_contribution_page_before_update //
DROP TRIGGER IF EXISTS civicrm_contribution_page_before_delete //
DROP TRIGGER IF EXISTS civicrm_contribution_page_after_insert //
DROP TRIGGER IF EXISTS civicrm_contribution_page_after_update //
DROP TRIGGER IF EXISTS civicrm_contribution_page_after_delete //
DROP TRIGGER IF EXISTS civicrm_contribution_product_before_insert //
DROP TRIGGER IF EXISTS civicrm_contribution_product_before_update //
DROP TRIGGER IF EXISTS civicrm_contribution_product_before_delete //
DROP TRIGGER IF EXISTS civicrm_contribution_product_after_insert //
DROP TRIGGER IF EXISTS civicrm_contribution_product_after_update //
DROP TRIGGER IF EXISTS civicrm_contribution_product_after_delete //
DROP TRIGGER IF EXISTS civicrm_contribution_recur_before_insert //
DROP TRIGGER IF EXISTS civicrm_contribution_recur_before_update //
DROP TRIGGER IF EXISTS civicrm_contribution_recur_before_delete //
DROP TRIGGER IF EXISTS civicrm_contribution_recur_after_insert //
DROP TRIGGER IF EXISTS civicrm_contribution_recur_after_update //
DROP TRIGGER IF EXISTS civicrm_contribution_recur_after_delete //
DROP TRIGGER IF EXISTS civicrm_contribution_recur_smashpig_before_insert //
DROP TRIGGER IF EXISTS civicrm_contribution_recur_smashpig_before_update //
DROP TRIGGER IF EXISTS civicrm_contribution_recur_smashpig_before_delete //
DROP TRIGGER IF EXISTS civicrm_contribution_recur_smashpig_after_insert //
DROP TRIGGER IF EXISTS civicrm_contribution_recur_smashpig_after_update //
DROP TRIGGER IF EXISTS civicrm_contribution_recur_smashpig_after_delete //
DROP TRIGGER IF EXISTS civicrm_contribution_soft_before_insert //
DROP TRIGGER IF EXISTS civicrm_contribution_soft_before_update //
DROP TRIGGER IF EXISTS civicrm_contribution_soft_before_delete //
DROP TRIGGER IF EXISTS civicrm_contribution_soft_after_insert //
DROP TRIGGER IF EXISTS civicrm_contribution_soft_after_update //
DROP TRIGGER IF EXISTS civicrm_contribution_soft_after_delete //
DROP TRIGGER IF EXISTS civicrm_contribution_widget_before_insert //
DROP TRIGGER IF EXISTS civicrm_contribution_widget_before_update //
DROP TRIGGER IF EXISTS civicrm_contribution_widget_before_delete //
DROP TRIGGER IF EXISTS civicrm_contribution_widget_after_insert //
DROP TRIGGER IF EXISTS civicrm_contribution_widget_after_update //
DROP TRIGGER IF EXISTS civicrm_contribution_widget_after_delete //
DROP TRIGGER IF EXISTS civicrm_country_before_insert //
DROP TRIGGER IF EXISTS civicrm_country_before_update //
DROP TRIGGER IF EXISTS civicrm_country_before_delete //
DROP TRIGGER IF EXISTS civicrm_country_after_insert //
DROP TRIGGER IF EXISTS civicrm_country_after_update //
DROP TRIGGER IF EXISTS civicrm_country_after_delete //
DROP TRIGGER IF EXISTS civicrm_county_before_insert //
DROP TRIGGER IF EXISTS civicrm_county_before_update //
DROP TRIGGER IF EXISTS civicrm_county_before_delete //
DROP TRIGGER IF EXISTS civicrm_county_after_insert //
DROP TRIGGER IF EXISTS civicrm_county_after_update //
DROP TRIGGER IF EXISTS civicrm_county_after_delete //
DROP TRIGGER IF EXISTS civicrm_currency_before_insert //
DROP TRIGGER IF EXISTS civicrm_currency_before_update //
DROP TRIGGER IF EXISTS civicrm_currency_before_delete //
DROP TRIGGER IF EXISTS civicrm_currency_after_insert //
DROP TRIGGER IF EXISTS civicrm_currency_after_update //
DROP TRIGGER IF EXISTS civicrm_currency_after_delete //
DROP TRIGGER IF EXISTS civicrm_custom_field_before_insert //
DROP TRIGGER IF EXISTS civicrm_custom_field_before_update //
DROP TRIGGER IF EXISTS civicrm_custom_field_before_delete //
DROP TRIGGER IF EXISTS civicrm_custom_field_after_insert //
DROP TRIGGER IF EXISTS civicrm_custom_field_after_update //
DROP TRIGGER IF EXISTS civicrm_custom_field_after_delete //
DROP TRIGGER IF EXISTS civicrm_custom_group_before_insert //
DROP TRIGGER IF EXISTS civicrm_custom_group_before_update //
DROP TRIGGER IF EXISTS civicrm_custom_group_before_delete //
DROP TRIGGER IF EXISTS civicrm_custom_group_after_insert //
DROP TRIGGER IF EXISTS civicrm_custom_group_after_update //
DROP TRIGGER IF EXISTS civicrm_custom_group_after_delete //
DROP TRIGGER IF EXISTS civicrm_cxn_before_insert //
DROP TRIGGER IF EXISTS civicrm_cxn_before_update //
DROP TRIGGER IF EXISTS civicrm_cxn_before_delete //
DROP TRIGGER IF EXISTS civicrm_cxn_after_insert //
DROP TRIGGER IF EXISTS civicrm_cxn_after_update //
DROP TRIGGER IF EXISTS civicrm_cxn_after_delete //
DROP TRIGGER IF EXISTS civicrm_dashboard_before_insert //
DROP TRIGGER IF EXISTS civicrm_dashboard_before_update //
DROP TRIGGER IF EXISTS civicrm_dashboard_before_delete //
DROP TRIGGER IF EXISTS civicrm_dashboard_after_insert //
DROP TRIGGER IF EXISTS civicrm_dashboard_after_update //
DROP TRIGGER IF EXISTS civicrm_dashboard_after_delete //
DROP TRIGGER IF EXISTS civicrm_dashboard_contact_before_insert //
DROP TRIGGER IF EXISTS civicrm_dashboard_contact_before_update //
DROP TRIGGER IF EXISTS civicrm_dashboard_contact_before_delete //
DROP TRIGGER IF EXISTS civicrm_dashboard_contact_after_insert //
DROP TRIGGER IF EXISTS civicrm_dashboard_contact_after_update //
DROP TRIGGER IF EXISTS civicrm_dashboard_contact_after_delete //
DROP TRIGGER IF EXISTS civicrm_dedupe_exception_before_insert //
DROP TRIGGER IF EXISTS civicrm_dedupe_exception_before_update //
DROP TRIGGER IF EXISTS civicrm_dedupe_exception_before_delete //
DROP TRIGGER IF EXISTS civicrm_dedupe_exception_after_insert //
DROP TRIGGER IF EXISTS civicrm_dedupe_exception_after_update //
DROP TRIGGER IF EXISTS civicrm_dedupe_exception_after_delete //
DROP TRIGGER IF EXISTS civicrm_dedupe_rule_before_insert //
DROP TRIGGER IF EXISTS civicrm_dedupe_rule_before_update //
DROP TRIGGER IF EXISTS civicrm_dedupe_rule_before_delete //
DROP TRIGGER IF EXISTS civicrm_dedupe_rule_after_insert //
DROP TRIGGER IF EXISTS civicrm_dedupe_rule_after_update //
DROP TRIGGER IF EXISTS civicrm_dedupe_rule_after_delete //
DROP TRIGGER IF EXISTS civicrm_dedupe_rule_group_before_insert //
DROP TRIGGER IF EXISTS civicrm_dedupe_rule_group_before_update //
DROP TRIGGER IF EXISTS civicrm_dedupe_rule_group_before_delete //
DROP TRIGGER IF EXISTS civicrm_dedupe_rule_group_after_insert //
DROP TRIGGER IF EXISTS civicrm_dedupe_rule_group_after_update //
DROP TRIGGER IF EXISTS civicrm_dedupe_rule_group_after_delete //
DROP TRIGGER IF EXISTS civicrm_discount_before_insert //
DROP TRIGGER IF EXISTS civicrm_discount_before_update //
DROP TRIGGER IF EXISTS civicrm_discount_before_delete //
DROP TRIGGER IF EXISTS civicrm_discount_after_insert //
DROP TRIGGER IF EXISTS civicrm_discount_after_update //
DROP TRIGGER IF EXISTS civicrm_discount_after_delete //
DROP TRIGGER IF EXISTS civicrm_domain_before_insert //
DROP TRIGGER IF EXISTS civicrm_domain_before_update //
DROP TRIGGER IF EXISTS civicrm_domain_before_delete //
DROP TRIGGER IF EXISTS civicrm_domain_after_insert //
DROP TRIGGER IF EXISTS civicrm_domain_after_update //
DROP TRIGGER IF EXISTS civicrm_domain_after_delete //
DROP TRIGGER IF EXISTS civicrm_email_before_insert //
DROP TRIGGER IF EXISTS civicrm_email_before_update //
DROP TRIGGER IF EXISTS civicrm_email_before_delete //
DROP TRIGGER IF EXISTS civicrm_email_after_insert //
DROP TRIGGER IF EXISTS civicrm_email_after_update //
DROP TRIGGER IF EXISTS civicrm_email_after_delete //
DROP TRIGGER IF EXISTS civicrm_entity_batch_before_insert //
DROP TRIGGER IF EXISTS civicrm_entity_batch_before_update //
DROP TRIGGER IF EXISTS civicrm_entity_batch_before_delete //
DROP TRIGGER IF EXISTS civicrm_entity_batch_after_insert //
DROP TRIGGER IF EXISTS civicrm_entity_batch_after_update //
DROP TRIGGER IF EXISTS civicrm_entity_batch_after_delete //
DROP TRIGGER IF EXISTS civicrm_entity_file_before_insert //
DROP TRIGGER IF EXISTS civicrm_entity_file_before_update //
DROP TRIGGER IF EXISTS civicrm_entity_file_before_delete //
DROP TRIGGER IF EXISTS civicrm_entity_file_after_insert //
DROP TRIGGER IF EXISTS civicrm_entity_file_after_update //
DROP TRIGGER IF EXISTS civicrm_entity_file_after_delete //
DROP TRIGGER IF EXISTS civicrm_entity_financial_account_before_insert //
DROP TRIGGER IF EXISTS civicrm_entity_financial_account_before_update //
DROP TRIGGER IF EXISTS civicrm_entity_financial_account_before_delete //
DROP TRIGGER IF EXISTS civicrm_entity_financial_account_after_insert //
DROP TRIGGER IF EXISTS civicrm_entity_financial_account_after_update //
DROP TRIGGER IF EXISTS civicrm_entity_financial_account_after_delete //
DROP TRIGGER IF EXISTS civicrm_entity_tag_before_insert //
DROP TRIGGER IF EXISTS civicrm_entity_tag_before_update //
DROP TRIGGER IF EXISTS civicrm_entity_tag_before_delete //
DROP TRIGGER IF EXISTS civicrm_entity_tag_after_insert //
DROP TRIGGER IF EXISTS civicrm_entity_tag_after_update //
DROP TRIGGER IF EXISTS civicrm_entity_tag_after_delete //
DROP TRIGGER IF EXISTS civicrm_event_before_insert //
DROP TRIGGER IF EXISTS civicrm_event_before_update //
DROP TRIGGER IF EXISTS civicrm_event_before_delete //
DROP TRIGGER IF EXISTS civicrm_event_after_insert //
DROP TRIGGER IF EXISTS civicrm_event_after_update //
DROP TRIGGER IF EXISTS civicrm_event_after_delete //
DROP TRIGGER IF EXISTS civicrm_event_cart_participant_before_insert //
DROP TRIGGER IF EXISTS civicrm_event_cart_participant_before_update //
DROP TRIGGER IF EXISTS civicrm_event_cart_participant_before_delete //
DROP TRIGGER IF EXISTS civicrm_event_cart_participant_after_insert //
DROP TRIGGER IF EXISTS civicrm_event_cart_participant_after_update //
DROP TRIGGER IF EXISTS civicrm_event_cart_participant_after_delete //
DROP TRIGGER IF EXISTS civicrm_event_carts_before_insert //
DROP TRIGGER IF EXISTS civicrm_event_carts_before_update //
DROP TRIGGER IF EXISTS civicrm_event_carts_before_delete //
DROP TRIGGER IF EXISTS civicrm_event_carts_after_insert //
DROP TRIGGER IF EXISTS civicrm_event_carts_after_update //
DROP TRIGGER IF EXISTS civicrm_event_carts_after_delete //
DROP TRIGGER IF EXISTS civicrm_events_in_carts_before_insert //
DROP TRIGGER IF EXISTS civicrm_events_in_carts_before_update //
DROP TRIGGER IF EXISTS civicrm_events_in_carts_before_delete //
DROP TRIGGER IF EXISTS civicrm_events_in_carts_after_insert //
DROP TRIGGER IF EXISTS civicrm_events_in_carts_after_update //
DROP TRIGGER IF EXISTS civicrm_events_in_carts_after_delete //
DROP TRIGGER IF EXISTS civicrm_exchange_rate_before_insert //
DROP TRIGGER IF EXISTS civicrm_exchange_rate_before_update //
DROP TRIGGER IF EXISTS civicrm_exchange_rate_before_delete //
DROP TRIGGER IF EXISTS civicrm_exchange_rate_after_insert //
DROP TRIGGER IF EXISTS civicrm_exchange_rate_after_update //
DROP TRIGGER IF EXISTS civicrm_exchange_rate_after_delete //
DROP TRIGGER IF EXISTS civicrm_extension_before_insert //
DROP TRIGGER IF EXISTS civicrm_extension_before_update //
DROP TRIGGER IF EXISTS civicrm_extension_before_delete //
DROP TRIGGER IF EXISTS civicrm_extension_after_insert //
DROP TRIGGER IF EXISTS civicrm_extension_after_update //
DROP TRIGGER IF EXISTS civicrm_extension_after_delete //
DROP TRIGGER IF EXISTS civicrm_file_before_insert //
DROP TRIGGER IF EXISTS civicrm_file_before_update //
DROP TRIGGER IF EXISTS civicrm_file_before_delete //
DROP TRIGGER IF EXISTS civicrm_file_after_insert //
DROP TRIGGER IF EXISTS civicrm_file_after_update //
DROP TRIGGER IF EXISTS civicrm_file_after_delete //
DROP TRIGGER IF EXISTS civicrm_financial_account_before_insert //
DROP TRIGGER IF EXISTS civicrm_financial_account_before_update //
DROP TRIGGER IF EXISTS civicrm_financial_account_before_delete //
DROP TRIGGER IF EXISTS civicrm_financial_account_after_insert //
DROP TRIGGER IF EXISTS civicrm_financial_account_after_update //
DROP TRIGGER IF EXISTS civicrm_financial_account_after_delete //
DROP TRIGGER IF EXISTS civicrm_financial_type_before_insert //
DROP TRIGGER IF EXISTS civicrm_financial_type_before_update //
DROP TRIGGER IF EXISTS civicrm_financial_type_before_delete //
DROP TRIGGER IF EXISTS civicrm_financial_type_after_insert //
DROP TRIGGER IF EXISTS civicrm_financial_type_after_update //
DROP TRIGGER IF EXISTS civicrm_financial_type_after_delete //
DROP TRIGGER IF EXISTS civicrm_geocoder_before_insert //
DROP TRIGGER IF EXISTS civicrm_geocoder_before_update //
DROP TRIGGER IF EXISTS civicrm_geocoder_before_delete //
DROP TRIGGER IF EXISTS civicrm_geocoder_after_insert //
DROP TRIGGER IF EXISTS civicrm_geocoder_after_update //
DROP TRIGGER IF EXISTS civicrm_geocoder_after_delete //
DROP TRIGGER IF EXISTS civicrm_grant_before_insert //
DROP TRIGGER IF EXISTS civicrm_grant_before_update //
DROP TRIGGER IF EXISTS civicrm_grant_before_delete //
DROP TRIGGER IF EXISTS civicrm_grant_after_insert //
DROP TRIGGER IF EXISTS civicrm_grant_after_update //
DROP TRIGGER IF EXISTS civicrm_grant_after_delete //
DROP TRIGGER IF EXISTS civicrm_group_before_insert //
DROP TRIGGER IF EXISTS civicrm_group_before_update //
DROP TRIGGER IF EXISTS civicrm_group_before_delete //
DROP TRIGGER IF EXISTS civicrm_group_after_insert //
DROP TRIGGER IF EXISTS civicrm_group_after_update //
DROP TRIGGER IF EXISTS civicrm_group_after_delete //
DROP TRIGGER IF EXISTS civicrm_group_contact_before_insert //
DROP TRIGGER IF EXISTS civicrm_group_contact_before_update //
DROP TRIGGER IF EXISTS civicrm_group_contact_before_delete //
DROP TRIGGER IF EXISTS civicrm_group_contact_after_insert //
DROP TRIGGER IF EXISTS civicrm_group_contact_after_update //
DROP TRIGGER IF EXISTS civicrm_group_contact_after_delete //
DROP TRIGGER IF EXISTS civicrm_group_nesting_before_insert //
DROP TRIGGER IF EXISTS civicrm_group_nesting_before_update //
DROP TRIGGER IF EXISTS civicrm_group_nesting_before_delete //
DROP TRIGGER IF EXISTS civicrm_group_nesting_after_insert //
DROP TRIGGER IF EXISTS civicrm_group_nesting_after_update //
DROP TRIGGER IF EXISTS civicrm_group_nesting_after_delete //
DROP TRIGGER IF EXISTS civicrm_group_organization_before_insert //
DROP TRIGGER IF EXISTS civicrm_group_organization_before_update //
DROP TRIGGER IF EXISTS civicrm_group_organization_before_delete //
DROP TRIGGER IF EXISTS civicrm_group_organization_after_insert //
DROP TRIGGER IF EXISTS civicrm_group_organization_after_update //
DROP TRIGGER IF EXISTS civicrm_group_organization_after_delete //
DROP TRIGGER IF EXISTS civicrm_im_before_insert //
DROP TRIGGER IF EXISTS civicrm_im_before_update //
DROP TRIGGER IF EXISTS civicrm_im_before_delete //
DROP TRIGGER IF EXISTS civicrm_im_after_insert //
DROP TRIGGER IF EXISTS civicrm_im_after_update //
DROP TRIGGER IF EXISTS civicrm_im_after_delete //
DROP TRIGGER IF EXISTS civicrm_job_before_insert //
DROP TRIGGER IF EXISTS civicrm_job_before_update //
DROP TRIGGER IF EXISTS civicrm_job_before_delete //
DROP TRIGGER IF EXISTS civicrm_job_after_insert //
DROP TRIGGER IF EXISTS civicrm_job_after_update //
DROP TRIGGER IF EXISTS civicrm_job_after_delete //
DROP TRIGGER IF EXISTS civicrm_loc_block_before_insert //
DROP TRIGGER IF EXISTS civicrm_loc_block_before_update //
DROP TRIGGER IF EXISTS civicrm_loc_block_before_delete //
DROP TRIGGER IF EXISTS civicrm_loc_block_after_insert //
DROP TRIGGER IF EXISTS civicrm_loc_block_after_update //
DROP TRIGGER IF EXISTS civicrm_loc_block_after_delete //
DROP TRIGGER IF EXISTS civicrm_location_type_before_insert //
DROP TRIGGER IF EXISTS civicrm_location_type_before_update //
DROP TRIGGER IF EXISTS civicrm_location_type_before_delete //
DROP TRIGGER IF EXISTS civicrm_location_type_after_insert //
DROP TRIGGER IF EXISTS civicrm_location_type_after_update //
DROP TRIGGER IF EXISTS civicrm_location_type_after_delete //
DROP TRIGGER IF EXISTS civicrm_mail_settings_before_insert //
DROP TRIGGER IF EXISTS civicrm_mail_settings_before_update //
DROP TRIGGER IF EXISTS civicrm_mail_settings_before_delete //
DROP TRIGGER IF EXISTS civicrm_mail_settings_after_insert //
DROP TRIGGER IF EXISTS civicrm_mail_settings_after_update //
DROP TRIGGER IF EXISTS civicrm_mail_settings_after_delete //
DROP TRIGGER IF EXISTS civicrm_mailing_abtest_before_insert //
DROP TRIGGER IF EXISTS civicrm_mailing_abtest_before_update //
DROP TRIGGER IF EXISTS civicrm_mailing_abtest_before_delete //
DROP TRIGGER IF EXISTS civicrm_mailing_abtest_after_insert //
DROP TRIGGER IF EXISTS civicrm_mailing_abtest_after_update //
DROP TRIGGER IF EXISTS civicrm_mailing_abtest_after_delete //
DROP TRIGGER IF EXISTS civicrm_mailing_bounce_pattern_before_insert //
DROP TRIGGER IF EXISTS civicrm_mailing_bounce_pattern_before_update //
DROP TRIGGER IF EXISTS civicrm_mailing_bounce_pattern_before_delete //
DROP TRIGGER IF EXISTS civicrm_mailing_bounce_pattern_after_insert //
DROP TRIGGER IF EXISTS civicrm_mailing_bounce_pattern_after_update //
DROP TRIGGER IF EXISTS civicrm_mailing_bounce_pattern_after_delete //
DROP TRIGGER IF EXISTS civicrm_mailing_bounce_type_before_insert //
DROP TRIGGER IF EXISTS civicrm_mailing_bounce_type_before_update //
DROP TRIGGER IF EXISTS civicrm_mailing_bounce_type_before_delete //
DROP TRIGGER IF EXISTS civicrm_mailing_bounce_type_after_insert //
DROP TRIGGER IF EXISTS civicrm_mailing_bounce_type_after_update //
DROP TRIGGER IF EXISTS civicrm_mailing_bounce_type_after_delete //
DROP TRIGGER IF EXISTS civicrm_mailing_component_before_insert //
DROP TRIGGER IF EXISTS civicrm_mailing_component_before_update //
DROP TRIGGER IF EXISTS civicrm_mailing_component_before_delete //
DROP TRIGGER IF EXISTS civicrm_mailing_component_after_insert //
DROP TRIGGER IF EXISTS civicrm_mailing_component_after_update //
DROP TRIGGER IF EXISTS civicrm_mailing_component_after_delete //
DROP TRIGGER IF EXISTS civicrm_mailing_group_before_insert //
DROP TRIGGER IF EXISTS civicrm_mailing_group_before_update //
DROP TRIGGER IF EXISTS civicrm_mailing_group_before_delete //
DROP TRIGGER IF EXISTS civicrm_mailing_group_after_insert //
DROP TRIGGER IF EXISTS civicrm_mailing_group_after_update //
DROP TRIGGER IF EXISTS civicrm_mailing_group_after_delete //
DROP TRIGGER IF EXISTS civicrm_mailing_spool_before_insert //
DROP TRIGGER IF EXISTS civicrm_mailing_spool_before_update //
DROP TRIGGER IF EXISTS civicrm_mailing_spool_before_delete //
DROP TRIGGER IF EXISTS civicrm_mailing_spool_after_insert //
DROP TRIGGER IF EXISTS civicrm_mailing_spool_after_update //
DROP TRIGGER IF EXISTS civicrm_mailing_spool_after_delete //
DROP TRIGGER IF EXISTS civicrm_mailing_stats_before_insert //
DROP TRIGGER IF EXISTS civicrm_mailing_stats_before_update //
DROP TRIGGER IF EXISTS civicrm_mailing_stats_before_delete //
DROP TRIGGER IF EXISTS civicrm_mailing_stats_after_insert //
DROP TRIGGER IF EXISTS civicrm_mailing_stats_after_update //
DROP TRIGGER IF EXISTS civicrm_mailing_stats_after_delete //
DROP TRIGGER IF EXISTS civicrm_mailing_stats_performance_before_insert //
DROP TRIGGER IF EXISTS civicrm_mailing_stats_performance_before_update //
DROP TRIGGER IF EXISTS civicrm_mailing_stats_performance_before_delete //
DROP TRIGGER IF EXISTS civicrm_mailing_stats_performance_after_insert //
DROP TRIGGER IF EXISTS civicrm_mailing_stats_performance_after_update //
DROP TRIGGER IF EXISTS civicrm_mailing_stats_performance_after_delete //
DROP TRIGGER IF EXISTS civicrm_mailing_trackable_url_before_insert //
DROP TRIGGER IF EXISTS civicrm_mailing_trackable_url_before_update //
DROP TRIGGER IF EXISTS civicrm_mailing_trackable_url_before_delete //
DROP TRIGGER IF EXISTS civicrm_mailing_trackable_url_after_insert //
DROP TRIGGER IF EXISTS civicrm_mailing_trackable_url_after_update //
DROP TRIGGER IF EXISTS civicrm_mailing_trackable_url_after_delete //
DROP TRIGGER IF EXISTS civicrm_managed_before_insert //
DROP TRIGGER IF EXISTS civicrm_managed_before_update //
DROP TRIGGER IF EXISTS civicrm_managed_before_delete //
DROP TRIGGER IF EXISTS civicrm_managed_after_insert //
DROP TRIGGER IF EXISTS civicrm_managed_after_update //
DROP TRIGGER IF EXISTS civicrm_managed_after_delete //
DROP TRIGGER IF EXISTS civicrm_mapping_before_insert //
DROP TRIGGER IF EXISTS civicrm_mapping_before_update //
DROP TRIGGER IF EXISTS civicrm_mapping_before_delete //
DROP TRIGGER IF EXISTS civicrm_mapping_after_insert //
DROP TRIGGER IF EXISTS civicrm_mapping_after_update //
DROP TRIGGER IF EXISTS civicrm_mapping_after_delete //
DROP TRIGGER IF EXISTS civicrm_mapping_field_before_insert //
DROP TRIGGER IF EXISTS civicrm_mapping_field_before_update //
DROP TRIGGER IF EXISTS civicrm_mapping_field_before_delete //
DROP TRIGGER IF EXISTS civicrm_mapping_field_after_insert //
DROP TRIGGER IF EXISTS civicrm_mapping_field_after_update //
DROP TRIGGER IF EXISTS civicrm_mapping_field_after_delete //
DROP TRIGGER IF EXISTS civicrm_membership_before_insert //
DROP TRIGGER IF EXISTS civicrm_membership_before_update //
DROP TRIGGER IF EXISTS civicrm_membership_before_delete //
DROP TRIGGER IF EXISTS civicrm_membership_after_insert //
DROP TRIGGER IF EXISTS civicrm_membership_after_update //
DROP TRIGGER IF EXISTS civicrm_membership_after_delete //
DROP TRIGGER IF EXISTS civicrm_membership_block_before_insert //
DROP TRIGGER IF EXISTS civicrm_membership_block_before_update //
DROP TRIGGER IF EXISTS civicrm_membership_block_before_delete //
DROP TRIGGER IF EXISTS civicrm_membership_block_after_insert //
DROP TRIGGER IF EXISTS civicrm_membership_block_after_update //
DROP TRIGGER IF EXISTS civicrm_membership_block_after_delete //
DROP TRIGGER IF EXISTS civicrm_membership_payment_before_insert //
DROP TRIGGER IF EXISTS civicrm_membership_payment_before_update //
DROP TRIGGER IF EXISTS civicrm_membership_payment_before_delete //
DROP TRIGGER IF EXISTS civicrm_membership_payment_after_insert //
DROP TRIGGER IF EXISTS civicrm_membership_payment_after_update //
DROP TRIGGER IF EXISTS civicrm_membership_payment_after_delete //
DROP TRIGGER IF EXISTS civicrm_membership_status_before_insert //
DROP TRIGGER IF EXISTS civicrm_membership_status_before_update //
DROP TRIGGER IF EXISTS civicrm_membership_status_before_delete //
DROP TRIGGER IF EXISTS civicrm_membership_status_after_insert //
DROP TRIGGER IF EXISTS civicrm_membership_status_after_update //
DROP TRIGGER IF EXISTS civicrm_membership_status_after_delete //
DROP TRIGGER IF EXISTS civicrm_membership_type_before_insert //
DROP TRIGGER IF EXISTS civicrm_membership_type_before_update //
DROP TRIGGER IF EXISTS civicrm_membership_type_before_delete //
DROP TRIGGER IF EXISTS civicrm_membership_type_after_insert //
DROP TRIGGER IF EXISTS civicrm_membership_type_after_update //
DROP TRIGGER IF EXISTS civicrm_membership_type_after_delete //
DROP TRIGGER IF EXISTS civicrm_mergeconflict_before_insert //
DROP TRIGGER IF EXISTS civicrm_mergeconflict_before_update //
DROP TRIGGER IF EXISTS civicrm_mergeconflict_before_delete //
DROP TRIGGER IF EXISTS civicrm_mergeconflict_after_insert //
DROP TRIGGER IF EXISTS civicrm_mergeconflict_after_update //
DROP TRIGGER IF EXISTS civicrm_mergeconflict_after_delete //
DROP TRIGGER IF EXISTS civicrm_monolog_before_insert //
DROP TRIGGER IF EXISTS civicrm_monolog_before_update //
DROP TRIGGER IF EXISTS civicrm_monolog_before_delete //
DROP TRIGGER IF EXISTS civicrm_monolog_after_insert //
DROP TRIGGER IF EXISTS civicrm_monolog_after_update //
DROP TRIGGER IF EXISTS civicrm_monolog_after_delete //
DROP TRIGGER IF EXISTS civicrm_msg_template_before_insert //
DROP TRIGGER IF EXISTS civicrm_msg_template_before_update //
DROP TRIGGER IF EXISTS civicrm_msg_template_before_delete //
DROP TRIGGER IF EXISTS civicrm_msg_template_after_insert //
DROP TRIGGER IF EXISTS civicrm_msg_template_after_update //
DROP TRIGGER IF EXISTS civicrm_msg_template_after_delete //
DROP TRIGGER IF EXISTS civicrm_navigation_before_insert //
DROP TRIGGER IF EXISTS civicrm_navigation_before_update //
DROP TRIGGER IF EXISTS civicrm_navigation_before_delete //
DROP TRIGGER IF EXISTS civicrm_navigation_after_insert //
DROP TRIGGER IF EXISTS civicrm_navigation_after_update //
DROP TRIGGER IF EXISTS civicrm_navigation_after_delete //
DROP TRIGGER IF EXISTS civicrm_note_before_insert //
DROP TRIGGER IF EXISTS civicrm_note_before_update //
DROP TRIGGER IF EXISTS civicrm_note_before_delete //
DROP TRIGGER IF EXISTS civicrm_note_after_insert //
DROP TRIGGER IF EXISTS civicrm_note_after_update //
DROP TRIGGER IF EXISTS civicrm_note_after_delete //
DROP TRIGGER IF EXISTS civicrm_oauth_client_before_insert //
DROP TRIGGER IF EXISTS civicrm_oauth_client_before_update //
DROP TRIGGER IF EXISTS civicrm_oauth_client_before_delete //
DROP TRIGGER IF EXISTS civicrm_oauth_client_after_insert //
DROP TRIGGER IF EXISTS civicrm_oauth_client_after_update //
DROP TRIGGER IF EXISTS civicrm_oauth_client_after_delete //
DROP TRIGGER IF EXISTS civicrm_oauth_contact_token_before_insert //
DROP TRIGGER IF EXISTS civicrm_oauth_contact_token_before_update //
DROP TRIGGER IF EXISTS civicrm_oauth_contact_token_before_delete //
DROP TRIGGER IF EXISTS civicrm_oauth_contact_token_after_insert //
DROP TRIGGER IF EXISTS civicrm_oauth_contact_token_after_update //
DROP TRIGGER IF EXISTS civicrm_oauth_contact_token_after_delete //
DROP TRIGGER IF EXISTS civicrm_oauth_systoken_before_insert //
DROP TRIGGER IF EXISTS civicrm_oauth_systoken_before_update //
DROP TRIGGER IF EXISTS civicrm_oauth_systoken_before_delete //
DROP TRIGGER IF EXISTS civicrm_oauth_systoken_after_insert //
DROP TRIGGER IF EXISTS civicrm_oauth_systoken_after_update //
DROP TRIGGER IF EXISTS civicrm_oauth_systoken_after_delete //
DROP TRIGGER IF EXISTS civicrm_openid_before_insert //
DROP TRIGGER IF EXISTS civicrm_openid_before_update //
DROP TRIGGER IF EXISTS civicrm_openid_before_delete //
DROP TRIGGER IF EXISTS civicrm_openid_after_insert //
DROP TRIGGER IF EXISTS civicrm_openid_after_update //
DROP TRIGGER IF EXISTS civicrm_openid_after_delete //
DROP TRIGGER IF EXISTS civicrm_option_group_before_insert //
DROP TRIGGER IF EXISTS civicrm_option_group_before_update //
DROP TRIGGER IF EXISTS civicrm_option_group_before_delete //
DROP TRIGGER IF EXISTS civicrm_option_group_after_insert //
DROP TRIGGER IF EXISTS civicrm_option_group_after_update //
DROP TRIGGER IF EXISTS civicrm_option_group_after_delete //
DROP TRIGGER IF EXISTS civicrm_option_value_before_insert //
DROP TRIGGER IF EXISTS civicrm_option_value_before_update //
DROP TRIGGER IF EXISTS civicrm_option_value_before_delete //
DROP TRIGGER IF EXISTS civicrm_option_value_after_insert //
DROP TRIGGER IF EXISTS civicrm_option_value_after_update //
DROP TRIGGER IF EXISTS civicrm_option_value_after_delete //
DROP TRIGGER IF EXISTS civicrm_participant_before_insert //
DROP TRIGGER IF EXISTS civicrm_participant_before_update //
DROP TRIGGER IF EXISTS civicrm_participant_before_delete //
DROP TRIGGER IF EXISTS civicrm_participant_after_insert //
DROP TRIGGER IF EXISTS civicrm_participant_after_update //
DROP TRIGGER IF EXISTS civicrm_participant_after_delete //
DROP TRIGGER IF EXISTS civicrm_participant_payment_before_insert //
DROP TRIGGER IF EXISTS civicrm_participant_payment_before_update //
DROP TRIGGER IF EXISTS civicrm_participant_payment_before_delete //
DROP TRIGGER IF EXISTS civicrm_participant_payment_after_insert //
DROP TRIGGER IF EXISTS civicrm_participant_payment_after_update //
DROP TRIGGER IF EXISTS civicrm_participant_payment_after_delete //
DROP TRIGGER IF EXISTS civicrm_participant_status_type_before_insert //
DROP TRIGGER IF EXISTS civicrm_participant_status_type_before_update //
DROP TRIGGER IF EXISTS civicrm_participant_status_type_before_delete //
DROP TRIGGER IF EXISTS civicrm_participant_status_type_after_insert //
DROP TRIGGER IF EXISTS civicrm_participant_status_type_after_update //
DROP TRIGGER IF EXISTS civicrm_participant_status_type_after_delete //
DROP TRIGGER IF EXISTS civicrm_payment_processor_before_insert //
DROP TRIGGER IF EXISTS civicrm_payment_processor_before_update //
DROP TRIGGER IF EXISTS civicrm_payment_processor_before_delete //
DROP TRIGGER IF EXISTS civicrm_payment_processor_after_insert //
DROP TRIGGER IF EXISTS civicrm_payment_processor_after_update //
DROP TRIGGER IF EXISTS civicrm_payment_processor_after_delete //
DROP TRIGGER IF EXISTS civicrm_payment_processor_type_before_insert //
DROP TRIGGER IF EXISTS civicrm_payment_processor_type_before_update //
DROP TRIGGER IF EXISTS civicrm_payment_processor_type_before_delete //
DROP TRIGGER IF EXISTS civicrm_payment_processor_type_after_insert //
DROP TRIGGER IF EXISTS civicrm_payment_processor_type_after_update //
DROP TRIGGER IF EXISTS civicrm_payment_processor_type_after_delete //
DROP TRIGGER IF EXISTS civicrm_payment_token_before_insert //
DROP TRIGGER IF EXISTS civicrm_payment_token_before_update //
DROP TRIGGER IF EXISTS civicrm_payment_token_before_delete //
DROP TRIGGER IF EXISTS civicrm_payment_token_after_insert //
DROP TRIGGER IF EXISTS civicrm_payment_token_after_update //
DROP TRIGGER IF EXISTS civicrm_payment_token_after_delete //
DROP TRIGGER IF EXISTS civicrm_pcp_before_insert //
DROP TRIGGER IF EXISTS civicrm_pcp_before_update //
DROP TRIGGER IF EXISTS civicrm_pcp_before_delete //
DROP TRIGGER IF EXISTS civicrm_pcp_after_insert //
DROP TRIGGER IF EXISTS civicrm_pcp_after_update //
DROP TRIGGER IF EXISTS civicrm_pcp_after_delete //
DROP TRIGGER IF EXISTS civicrm_pcp_block_before_insert //
DROP TRIGGER IF EXISTS civicrm_pcp_block_before_update //
DROP TRIGGER IF EXISTS civicrm_pcp_block_before_delete //
DROP TRIGGER IF EXISTS civicrm_pcp_block_after_insert //
DROP TRIGGER IF EXISTS civicrm_pcp_block_after_update //
DROP TRIGGER IF EXISTS civicrm_pcp_block_after_delete //
DROP TRIGGER IF EXISTS civicrm_phone_before_insert //
DROP TRIGGER IF EXISTS civicrm_phone_before_update //
DROP TRIGGER IF EXISTS civicrm_phone_before_delete //
DROP TRIGGER IF EXISTS civicrm_phone_after_insert //
DROP TRIGGER IF EXISTS civicrm_phone_after_update //
DROP TRIGGER IF EXISTS civicrm_phone_after_delete //
DROP TRIGGER IF EXISTS civicrm_pledge_before_insert //
DROP TRIGGER IF EXISTS civicrm_pledge_before_update //
DROP TRIGGER IF EXISTS civicrm_pledge_before_delete //
DROP TRIGGER IF EXISTS civicrm_pledge_after_insert //
DROP TRIGGER IF EXISTS civicrm_pledge_after_update //
DROP TRIGGER IF EXISTS civicrm_pledge_after_delete //
DROP TRIGGER IF EXISTS civicrm_pledge_block_before_insert //
DROP TRIGGER IF EXISTS civicrm_pledge_block_before_update //
DROP TRIGGER IF EXISTS civicrm_pledge_block_before_delete //
DROP TRIGGER IF EXISTS civicrm_pledge_block_after_insert //
DROP TRIGGER IF EXISTS civicrm_pledge_block_after_update //
DROP TRIGGER IF EXISTS civicrm_pledge_block_after_delete //
DROP TRIGGER IF EXISTS civicrm_pledge_payment_before_insert //
DROP TRIGGER IF EXISTS civicrm_pledge_payment_before_update //
DROP TRIGGER IF EXISTS civicrm_pledge_payment_before_delete //
DROP TRIGGER IF EXISTS civicrm_pledge_payment_after_insert //
DROP TRIGGER IF EXISTS civicrm_pledge_payment_after_update //
DROP TRIGGER IF EXISTS civicrm_pledge_payment_after_delete //
DROP TRIGGER IF EXISTS civicrm_preferences_date_before_insert //
DROP TRIGGER IF EXISTS civicrm_preferences_date_before_update //
DROP TRIGGER IF EXISTS civicrm_preferences_date_before_delete //
DROP TRIGGER IF EXISTS civicrm_preferences_date_after_insert //
DROP TRIGGER IF EXISTS civicrm_preferences_date_after_update //
DROP TRIGGER IF EXISTS civicrm_preferences_date_after_delete //
DROP TRIGGER IF EXISTS civicrm_premiums_before_insert //
DROP TRIGGER IF EXISTS civicrm_premiums_before_update //
DROP TRIGGER IF EXISTS civicrm_premiums_before_delete //
DROP TRIGGER IF EXISTS civicrm_premiums_after_insert //
DROP TRIGGER IF EXISTS civicrm_premiums_after_update //
DROP TRIGGER IF EXISTS civicrm_premiums_after_delete //
DROP TRIGGER IF EXISTS civicrm_premiums_product_before_insert //
DROP TRIGGER IF EXISTS civicrm_premiums_product_before_update //
DROP TRIGGER IF EXISTS civicrm_premiums_product_before_delete //
DROP TRIGGER IF EXISTS civicrm_premiums_product_after_insert //
DROP TRIGGER IF EXISTS civicrm_premiums_product_after_update //
DROP TRIGGER IF EXISTS civicrm_premiums_product_after_delete //
DROP TRIGGER IF EXISTS civicrm_price_field_before_insert //
DROP TRIGGER IF EXISTS civicrm_price_field_before_update //
DROP TRIGGER IF EXISTS civicrm_price_field_before_delete //
DROP TRIGGER IF EXISTS civicrm_price_field_after_insert //
DROP TRIGGER IF EXISTS civicrm_price_field_after_update //
DROP TRIGGER IF EXISTS civicrm_price_field_after_delete //
DROP TRIGGER IF EXISTS civicrm_price_field_value_before_insert //
DROP TRIGGER IF EXISTS civicrm_price_field_value_before_update //
DROP TRIGGER IF EXISTS civicrm_price_field_value_before_delete //
DROP TRIGGER IF EXISTS civicrm_price_field_value_after_insert //
DROP TRIGGER IF EXISTS civicrm_price_field_value_after_update //
DROP TRIGGER IF EXISTS civicrm_price_field_value_after_delete //
DROP TRIGGER IF EXISTS civicrm_price_set_before_insert //
DROP TRIGGER IF EXISTS civicrm_price_set_before_update //
DROP TRIGGER IF EXISTS civicrm_price_set_before_delete //
DROP TRIGGER IF EXISTS civicrm_price_set_after_insert //
DROP TRIGGER IF EXISTS civicrm_price_set_after_update //
DROP TRIGGER IF EXISTS civicrm_price_set_after_delete //
DROP TRIGGER IF EXISTS civicrm_price_set_entity_before_insert //
DROP TRIGGER IF EXISTS civicrm_price_set_entity_before_update //
DROP TRIGGER IF EXISTS civicrm_price_set_entity_before_delete //
DROP TRIGGER IF EXISTS civicrm_price_set_entity_after_insert //
DROP TRIGGER IF EXISTS civicrm_price_set_entity_after_update //
DROP TRIGGER IF EXISTS civicrm_price_set_entity_after_delete //
DROP TRIGGER IF EXISTS civicrm_print_label_before_insert //
DROP TRIGGER IF EXISTS civicrm_print_label_before_update //
DROP TRIGGER IF EXISTS civicrm_print_label_before_delete //
DROP TRIGGER IF EXISTS civicrm_print_label_after_insert //
DROP TRIGGER IF EXISTS civicrm_print_label_after_update //
DROP TRIGGER IF EXISTS civicrm_print_label_after_delete //
DROP TRIGGER IF EXISTS civicrm_product_before_insert //
DROP TRIGGER IF EXISTS civicrm_product_before_update //
DROP TRIGGER IF EXISTS civicrm_product_before_delete //
DROP TRIGGER IF EXISTS civicrm_product_after_insert //
DROP TRIGGER IF EXISTS civicrm_product_after_update //
DROP TRIGGER IF EXISTS civicrm_product_after_delete //
DROP TRIGGER IF EXISTS civicrm_queue_before_insert //
DROP TRIGGER IF EXISTS civicrm_queue_before_update //
DROP TRIGGER IF EXISTS civicrm_queue_before_delete //
DROP TRIGGER IF EXISTS civicrm_queue_after_insert //
DROP TRIGGER IF EXISTS civicrm_queue_after_update //
DROP TRIGGER IF EXISTS civicrm_queue_after_delete //
DROP TRIGGER IF EXISTS civicrm_recurring_entity_before_insert //
DROP TRIGGER IF EXISTS civicrm_recurring_entity_before_update //
DROP TRIGGER IF EXISTS civicrm_recurring_entity_before_delete //
DROP TRIGGER IF EXISTS civicrm_recurring_entity_after_insert //
DROP TRIGGER IF EXISTS civicrm_recurring_entity_after_update //
DROP TRIGGER IF EXISTS civicrm_recurring_entity_after_delete //
DROP TRIGGER IF EXISTS civicrm_relationship_before_insert //
DROP TRIGGER IF EXISTS civicrm_relationship_before_update //
DROP TRIGGER IF EXISTS civicrm_relationship_before_delete //
DROP TRIGGER IF EXISTS civicrm_relationship_after_insert //
DROP TRIGGER IF EXISTS civicrm_relationship_after_update //
DROP TRIGGER IF EXISTS civicrm_relationship_after_delete //
DROP TRIGGER IF EXISTS civicrm_relationship_donor_advised_before_insert //
DROP TRIGGER IF EXISTS civicrm_relationship_donor_advised_before_update //
DROP TRIGGER IF EXISTS civicrm_relationship_donor_advised_before_delete //
DROP TRIGGER IF EXISTS civicrm_relationship_donor_advised_after_insert //
DROP TRIGGER IF EXISTS civicrm_relationship_donor_advised_after_update //
DROP TRIGGER IF EXISTS civicrm_relationship_donor_advised_after_delete //
DROP TRIGGER IF EXISTS civicrm_relationship_type_before_insert //
DROP TRIGGER IF EXISTS civicrm_relationship_type_before_update //
DROP TRIGGER IF EXISTS civicrm_relationship_type_before_delete //
DROP TRIGGER IF EXISTS civicrm_relationship_type_after_insert //
DROP TRIGGER IF EXISTS civicrm_relationship_type_after_update //
DROP TRIGGER IF EXISTS civicrm_relationship_type_after_delete //
DROP TRIGGER IF EXISTS civicrm_report_instance_before_insert //
DROP TRIGGER IF EXISTS civicrm_report_instance_before_update //
DROP TRIGGER IF EXISTS civicrm_report_instance_before_delete //
DROP TRIGGER IF EXISTS civicrm_report_instance_after_insert //
DROP TRIGGER IF EXISTS civicrm_report_instance_after_update //
DROP TRIGGER IF EXISTS civicrm_report_instance_after_delete //
DROP TRIGGER IF EXISTS civicrm_saved_search_before_insert //
DROP TRIGGER IF EXISTS civicrm_saved_search_before_update //
DROP TRIGGER IF EXISTS civicrm_saved_search_before_delete //
DROP TRIGGER IF EXISTS civicrm_saved_search_after_insert //
DROP TRIGGER IF EXISTS civicrm_saved_search_after_update //
DROP TRIGGER IF EXISTS civicrm_saved_search_after_delete //
DROP TRIGGER IF EXISTS civicrm_search_display_before_insert //
DROP TRIGGER IF EXISTS civicrm_search_display_before_update //
DROP TRIGGER IF EXISTS civicrm_search_display_before_delete //
DROP TRIGGER IF EXISTS civicrm_search_display_after_insert //
DROP TRIGGER IF EXISTS civicrm_search_display_after_update //
DROP TRIGGER IF EXISTS civicrm_search_display_after_delete //
DROP TRIGGER IF EXISTS civicrm_search_segment_before_insert //
DROP TRIGGER IF EXISTS civicrm_search_segment_before_update //
DROP TRIGGER IF EXISTS civicrm_search_segment_before_delete //
DROP TRIGGER IF EXISTS civicrm_search_segment_after_insert //
DROP TRIGGER IF EXISTS civicrm_search_segment_after_update //
DROP TRIGGER IF EXISTS civicrm_search_segment_after_delete //
DROP TRIGGER IF EXISTS civicrm_setting_before_insert //
DROP TRIGGER IF EXISTS civicrm_setting_before_update //
DROP TRIGGER IF EXISTS civicrm_setting_before_delete //
DROP TRIGGER IF EXISTS civicrm_setting_after_insert //
DROP TRIGGER IF EXISTS civicrm_setting_after_update //
DROP TRIGGER IF EXISTS civicrm_setting_after_delete //
DROP TRIGGER IF EXISTS civicrm_site_token_before_insert //
DROP TRIGGER IF EXISTS civicrm_site_token_before_update //
DROP TRIGGER IF EXISTS civicrm_site_token_before_delete //
DROP TRIGGER IF EXISTS civicrm_site_token_after_insert //
DROP TRIGGER IF EXISTS civicrm_site_token_after_update //
DROP TRIGGER IF EXISTS civicrm_site_token_after_delete //
DROP TRIGGER IF EXISTS civicrm_sms_provider_before_insert //
DROP TRIGGER IF EXISTS civicrm_sms_provider_before_update //
DROP TRIGGER IF EXISTS civicrm_sms_provider_before_delete //
DROP TRIGGER IF EXISTS civicrm_sms_provider_after_insert //
DROP TRIGGER IF EXISTS civicrm_sms_provider_after_update //
DROP TRIGGER IF EXISTS civicrm_sms_provider_after_delete //
DROP TRIGGER IF EXISTS civicrm_state_province_before_insert //
DROP TRIGGER IF EXISTS civicrm_state_province_before_update //
DROP TRIGGER IF EXISTS civicrm_state_province_before_delete //
DROP TRIGGER IF EXISTS civicrm_state_province_after_insert //
DROP TRIGGER IF EXISTS civicrm_state_province_after_update //
DROP TRIGGER IF EXISTS civicrm_state_province_after_delete //
DROP TRIGGER IF EXISTS civicrm_status_pref_before_insert //
DROP TRIGGER IF EXISTS civicrm_status_pref_before_update //
DROP TRIGGER IF EXISTS civicrm_status_pref_before_delete //
DROP TRIGGER IF EXISTS civicrm_status_pref_after_insert //
DROP TRIGGER IF EXISTS civicrm_status_pref_after_update //
DROP TRIGGER IF EXISTS civicrm_status_pref_after_delete //
DROP TRIGGER IF EXISTS civicrm_survey_before_insert //
DROP TRIGGER IF EXISTS civicrm_survey_before_update //
DROP TRIGGER IF EXISTS civicrm_survey_before_delete //
DROP TRIGGER IF EXISTS civicrm_survey_after_insert //
DROP TRIGGER IF EXISTS civicrm_survey_after_update //
DROP TRIGGER IF EXISTS civicrm_survey_after_delete //
DROP TRIGGER IF EXISTS civicrm_tag_before_insert //
DROP TRIGGER IF EXISTS civicrm_tag_before_update //
DROP TRIGGER IF EXISTS civicrm_tag_before_delete //
DROP TRIGGER IF EXISTS civicrm_tag_after_insert //
DROP TRIGGER IF EXISTS civicrm_tag_after_update //
DROP TRIGGER IF EXISTS civicrm_tag_after_delete //
DROP TRIGGER IF EXISTS civicrm_tell_friend_before_insert //
DROP TRIGGER IF EXISTS civicrm_tell_friend_before_update //
DROP TRIGGER IF EXISTS civicrm_tell_friend_before_delete //
DROP TRIGGER IF EXISTS civicrm_tell_friend_after_insert //
DROP TRIGGER IF EXISTS civicrm_tell_friend_after_update //
DROP TRIGGER IF EXISTS civicrm_tell_friend_after_delete //
DROP TRIGGER IF EXISTS civicrm_timezone_before_insert //
DROP TRIGGER IF EXISTS civicrm_timezone_before_update //
DROP TRIGGER IF EXISTS civicrm_timezone_before_delete //
DROP TRIGGER IF EXISTS civicrm_timezone_after_insert //
DROP TRIGGER IF EXISTS civicrm_timezone_after_update //
DROP TRIGGER IF EXISTS civicrm_timezone_after_delete //
DROP TRIGGER IF EXISTS civicrm_translation_before_insert //
DROP TRIGGER IF EXISTS civicrm_translation_before_update //
DROP TRIGGER IF EXISTS civicrm_translation_before_delete //
DROP TRIGGER IF EXISTS civicrm_translation_after_insert //
DROP TRIGGER IF EXISTS civicrm_translation_after_update //
DROP TRIGGER IF EXISTS civicrm_translation_after_delete //
DROP TRIGGER IF EXISTS civicrm_uf_field_before_insert //
DROP TRIGGER IF EXISTS civicrm_uf_field_before_update //
DROP TRIGGER IF EXISTS civicrm_uf_field_before_delete //
DROP TRIGGER IF EXISTS civicrm_uf_field_after_insert //
DROP TRIGGER IF EXISTS civicrm_uf_field_after_update //
DROP TRIGGER IF EXISTS civicrm_uf_field_after_delete //
DROP TRIGGER IF EXISTS civicrm_uf_group_before_insert //
DROP TRIGGER IF EXISTS civicrm_uf_group_before_update //
DROP TRIGGER IF EXISTS civicrm_uf_group_before_delete //
DROP TRIGGER IF EXISTS civicrm_uf_group_after_insert //
DROP TRIGGER IF EXISTS civicrm_uf_group_after_update //
DROP TRIGGER IF EXISTS civicrm_uf_group_after_delete //
DROP TRIGGER IF EXISTS civicrm_uf_join_before_insert //
DROP TRIGGER IF EXISTS civicrm_uf_join_before_update //
DROP TRIGGER IF EXISTS civicrm_uf_join_before_delete //
DROP TRIGGER IF EXISTS civicrm_uf_join_after_insert //
DROP TRIGGER IF EXISTS civicrm_uf_join_after_update //
DROP TRIGGER IF EXISTS civicrm_uf_join_after_delete //
DROP TRIGGER IF EXISTS civicrm_uf_match_before_insert //
DROP TRIGGER IF EXISTS civicrm_uf_match_before_update //
DROP TRIGGER IF EXISTS civicrm_uf_match_before_delete //
DROP TRIGGER IF EXISTS civicrm_uf_match_after_insert //
DROP TRIGGER IF EXISTS civicrm_uf_match_after_update //
DROP TRIGGER IF EXISTS civicrm_uf_match_after_delete //
DROP TRIGGER IF EXISTS civicrm_user_job_before_insert //
DROP TRIGGER IF EXISTS civicrm_user_job_before_update //
DROP TRIGGER IF EXISTS civicrm_user_job_before_delete //
DROP TRIGGER IF EXISTS civicrm_user_job_after_insert //
DROP TRIGGER IF EXISTS civicrm_user_job_after_update //
DROP TRIGGER IF EXISTS civicrm_user_job_after_delete //
DROP TRIGGER IF EXISTS civicrm_value_1_check_number_9_before_insert //
DROP TRIGGER IF EXISTS civicrm_value_1_check_number_9_before_update //
DROP TRIGGER IF EXISTS civicrm_value_1_check_number_9_before_delete //
DROP TRIGGER IF EXISTS civicrm_value_1_check_number_9_after_insert //
DROP TRIGGER IF EXISTS civicrm_value_1_check_number_9_after_update //
DROP TRIGGER IF EXISTS civicrm_value_1_check_number_9_after_delete //
DROP TRIGGER IF EXISTS civicrm_value_1_communication_4_before_insert //
DROP TRIGGER IF EXISTS civicrm_value_1_communication_4_before_update //
DROP TRIGGER IF EXISTS civicrm_value_1_communication_4_before_delete //
DROP TRIGGER IF EXISTS civicrm_value_1_communication_4_after_insert //
DROP TRIGGER IF EXISTS civicrm_value_1_communication_4_after_update //
DROP TRIGGER IF EXISTS civicrm_value_1_communication_4_after_delete //
DROP TRIGGER IF EXISTS civicrm_value_1_currency_3_before_insert //
DROP TRIGGER IF EXISTS civicrm_value_1_currency_3_before_update //
DROP TRIGGER IF EXISTS civicrm_value_1_currency_3_before_delete //
DROP TRIGGER IF EXISTS civicrm_value_1_currency_3_after_insert //
DROP TRIGGER IF EXISTS civicrm_value_1_currency_3_after_update //
DROP TRIGGER IF EXISTS civicrm_value_1_currency_3_after_delete //
DROP TRIGGER IF EXISTS civicrm_value_1_gift_data_7_before_insert //
DROP TRIGGER IF EXISTS civicrm_value_1_gift_data_7_before_update //
DROP TRIGGER IF EXISTS civicrm_value_1_gift_data_7_before_delete //
DROP TRIGGER IF EXISTS civicrm_value_1_gift_data_7_after_insert //
DROP TRIGGER IF EXISTS civicrm_value_1_gift_data_7_after_update //
DROP TRIGGER IF EXISTS civicrm_value_1_gift_data_7_after_delete //
DROP TRIGGER IF EXISTS civicrm_value_1_primary_contact_name_9_before_insert //
DROP TRIGGER IF EXISTS civicrm_value_1_primary_contact_name_9_before_update //
DROP TRIGGER IF EXISTS civicrm_value_1_primary_contact_name_9_before_delete //
DROP TRIGGER IF EXISTS civicrm_value_1_primary_contact_name_9_after_insert //
DROP TRIGGER IF EXISTS civicrm_value_1_primary_contact_name_9_after_update //
DROP TRIGGER IF EXISTS civicrm_value_1_primary_contact_name_9_after_delete //
DROP TRIGGER IF EXISTS civicrm_value_1_prospect_5_before_insert //
DROP TRIGGER IF EXISTS civicrm_value_1_prospect_5_before_update //
DROP TRIGGER IF EXISTS civicrm_value_1_prospect_5_before_delete //
DROP TRIGGER IF EXISTS civicrm_value_1_prospect_5_after_insert //
DROP TRIGGER IF EXISTS civicrm_value_1_prospect_5_after_update //
DROP TRIGGER IF EXISTS civicrm_value_1_prospect_5_after_delete //
DROP TRIGGER IF EXISTS civicrm_value_1_soft_credit_data_8_before_insert //
DROP TRIGGER IF EXISTS civicrm_value_1_soft_credit_data_8_before_update //
DROP TRIGGER IF EXISTS civicrm_value_1_soft_credit_data_8_before_delete //
DROP TRIGGER IF EXISTS civicrm_value_1_soft_credit_data_8_after_insert //
DROP TRIGGER IF EXISTS civicrm_value_1_soft_credit_data_8_after_update //
DROP TRIGGER IF EXISTS civicrm_value_1_soft_credit_data_8_after_delete //
DROP TRIGGER IF EXISTS civicrm_value_1_solicitation_6_before_insert //
DROP TRIGGER IF EXISTS civicrm_value_1_solicitation_6_before_update //
DROP TRIGGER IF EXISTS civicrm_value_1_solicitation_6_before_delete //
DROP TRIGGER IF EXISTS civicrm_value_1_solicitation_6_after_insert //
DROP TRIGGER IF EXISTS civicrm_value_1_solicitation_6_after_update //
DROP TRIGGER IF EXISTS civicrm_value_1_solicitation_6_after_delete //
DROP TRIGGER IF EXISTS civicrm_value_1_stock_information_10_before_insert //
DROP TRIGGER IF EXISTS civicrm_value_1_stock_information_10_before_update //
DROP TRIGGER IF EXISTS civicrm_value_1_stock_information_10_before_delete //
DROP TRIGGER IF EXISTS civicrm_value_1_stock_information_10_after_insert //
DROP TRIGGER IF EXISTS civicrm_value_1_stock_information_10_after_update //
DROP TRIGGER IF EXISTS civicrm_value_1_stock_information_10_after_delete //
DROP TRIGGER IF EXISTS civicrm_value_address_data_before_insert //
DROP TRIGGER IF EXISTS civicrm_value_address_data_before_update //
DROP TRIGGER IF EXISTS civicrm_value_address_data_before_delete //
DROP TRIGGER IF EXISTS civicrm_value_address_data_after_insert //
DROP TRIGGER IF EXISTS civicrm_value_address_data_after_update //
DROP TRIGGER IF EXISTS civicrm_value_address_data_after_delete //
DROP TRIGGER IF EXISTS civicrm_value_adjustment_31_before_insert //
DROP TRIGGER IF EXISTS civicrm_value_adjustment_31_before_update //
DROP TRIGGER IF EXISTS civicrm_value_adjustment_31_before_delete //
DROP TRIGGER IF EXISTS civicrm_value_adjustment_31_after_insert //
DROP TRIGGER IF EXISTS civicrm_value_adjustment_31_after_update //
DROP TRIGGER IF EXISTS civicrm_value_adjustment_31_after_delete //
DROP TRIGGER IF EXISTS civicrm_value_anonymous__before_insert //
DROP TRIGGER IF EXISTS civicrm_value_anonymous__before_update //
DROP TRIGGER IF EXISTS civicrm_value_anonymous__before_delete //
DROP TRIGGER IF EXISTS civicrm_value_anonymous__after_insert //
DROP TRIGGER IF EXISTS civicrm_value_anonymous__after_update //
DROP TRIGGER IF EXISTS civicrm_value_anonymous__after_delete //
DROP TRIGGER IF EXISTS civicrm_value_assistant_15_before_insert //
DROP TRIGGER IF EXISTS civicrm_value_assistant_15_before_update //
DROP TRIGGER IF EXISTS civicrm_value_assistant_15_before_delete //
DROP TRIGGER IF EXISTS civicrm_value_assistant_15_after_insert //
DROP TRIGGER IF EXISTS civicrm_value_assistant_15_after_update //
DROP TRIGGER IF EXISTS civicrm_value_assistant_15_after_delete //
DROP TRIGGER IF EXISTS civicrm_value_email_before_insert //
DROP TRIGGER IF EXISTS civicrm_value_email_before_update //
DROP TRIGGER IF EXISTS civicrm_value_email_before_delete //
DROP TRIGGER IF EXISTS civicrm_value_email_after_insert //
DROP TRIGGER IF EXISTS civicrm_value_email_after_update //
DROP TRIGGER IF EXISTS civicrm_value_email_after_delete //
DROP TRIGGER IF EXISTS civicrm_value_endowment_yea_28_before_insert //
DROP TRIGGER IF EXISTS civicrm_value_endowment_yea_28_before_update //
DROP TRIGGER IF EXISTS civicrm_value_endowment_yea_28_before_delete //
DROP TRIGGER IF EXISTS civicrm_value_endowment_yea_28_after_insert //
DROP TRIGGER IF EXISTS civicrm_value_endowment_yea_28_after_update //
DROP TRIGGER IF EXISTS civicrm_value_endowment_yea_28_after_delete //
DROP TRIGGER IF EXISTS civicrm_value_group_metadata_before_insert //
DROP TRIGGER IF EXISTS civicrm_value_group_metadata_before_update //
DROP TRIGGER IF EXISTS civicrm_value_group_metadata_before_delete //
DROP TRIGGER IF EXISTS civicrm_value_group_metadata_after_insert //
DROP TRIGGER IF EXISTS civicrm_value_group_metadata_after_update //
DROP TRIGGER IF EXISTS civicrm_value_group_metadata_after_delete //
DROP TRIGGER IF EXISTS civicrm_value_mailing_data_21_before_insert //
DROP TRIGGER IF EXISTS civicrm_value_mailing_data_21_before_update //
DROP TRIGGER IF EXISTS civicrm_value_mailing_data_21_before_delete //
DROP TRIGGER IF EXISTS civicrm_value_mailing_data_21_after_insert //
DROP TRIGGER IF EXISTS civicrm_value_mailing_data_21_after_update //
DROP TRIGGER IF EXISTS civicrm_value_mailing_data_21_after_delete //
DROP TRIGGER IF EXISTS civicrm_value_major_gifts_y_27_before_insert //
DROP TRIGGER IF EXISTS civicrm_value_major_gifts_y_27_before_update //
DROP TRIGGER IF EXISTS civicrm_value_major_gifts_y_27_before_delete //
DROP TRIGGER IF EXISTS civicrm_value_major_gifts_y_27_after_insert //
DROP TRIGGER IF EXISTS civicrm_value_major_gifts_y_27_after_update //
DROP TRIGGER IF EXISTS civicrm_value_major_gifts_y_27_after_delete //
DROP TRIGGER IF EXISTS civicrm_value_matching_gift_before_insert //
DROP TRIGGER IF EXISTS civicrm_value_matching_gift_before_update //
DROP TRIGGER IF EXISTS civicrm_value_matching_gift_before_delete //
DROP TRIGGER IF EXISTS civicrm_value_matching_gift_after_insert //
DROP TRIGGER IF EXISTS civicrm_value_matching_gift_after_update //
DROP TRIGGER IF EXISTS civicrm_value_matching_gift_after_delete //
DROP TRIGGER IF EXISTS civicrm_value_matching_gift_29_before_insert //
DROP TRIGGER IF EXISTS civicrm_value_matching_gift_29_before_update //
DROP TRIGGER IF EXISTS civicrm_value_matching_gift_29_before_delete //
DROP TRIGGER IF EXISTS civicrm_value_matching_gift_29_after_insert //
DROP TRIGGER IF EXISTS civicrm_value_matching_gift_29_after_update //
DROP TRIGGER IF EXISTS civicrm_value_matching_gift_29_after_delete //
DROP TRIGGER IF EXISTS civicrm_value_organization_contact_14_before_insert //
DROP TRIGGER IF EXISTS civicrm_value_organization_contact_14_before_update //
DROP TRIGGER IF EXISTS civicrm_value_organization_contact_14_before_delete //
DROP TRIGGER IF EXISTS civicrm_value_organization_contact_14_after_insert //
DROP TRIGGER IF EXISTS civicrm_value_organization_contact_14_after_update //
DROP TRIGGER IF EXISTS civicrm_value_organization_contact_14_after_delete //
DROP TRIGGER IF EXISTS civicrm_value_partner_19_before_insert //
DROP TRIGGER IF EXISTS civicrm_value_partner_19_before_update //
DROP TRIGGER IF EXISTS civicrm_value_partner_19_before_delete //
DROP TRIGGER IF EXISTS civicrm_value_partner_19_after_insert //
DROP TRIGGER IF EXISTS civicrm_value_partner_19_after_update //
DROP TRIGGER IF EXISTS civicrm_value_partner_19_after_delete //
DROP TRIGGER IF EXISTS civicrm_value_pg_commitment_25_before_insert //
DROP TRIGGER IF EXISTS civicrm_value_pg_commitment_25_before_update //
DROP TRIGGER IF EXISTS civicrm_value_pg_commitment_25_before_delete //
DROP TRIGGER IF EXISTS civicrm_value_pg_commitment_25_after_insert //
DROP TRIGGER IF EXISTS civicrm_value_pg_commitment_25_after_update //
DROP TRIGGER IF EXISTS civicrm_value_pg_commitment_25_after_delete //
DROP TRIGGER IF EXISTS civicrm_value_pg_inquiry_ac_26_before_insert //
DROP TRIGGER IF EXISTS civicrm_value_pg_inquiry_ac_26_before_update //
DROP TRIGGER IF EXISTS civicrm_value_pg_inquiry_ac_26_before_delete //
DROP TRIGGER IF EXISTS civicrm_value_pg_inquiry_ac_26_after_insert //
DROP TRIGGER IF EXISTS civicrm_value_pg_inquiry_ac_26_after_update //
DROP TRIGGER IF EXISTS civicrm_value_pg_inquiry_ac_26_after_delete //
DROP TRIGGER IF EXISTS civicrm_value_relationship__20_before_insert //
DROP TRIGGER IF EXISTS civicrm_value_relationship__20_before_update //
DROP TRIGGER IF EXISTS civicrm_value_relationship__20_before_delete //
DROP TRIGGER IF EXISTS civicrm_value_relationship__20_after_insert //
DROP TRIGGER IF EXISTS civicrm_value_relationship__20_after_update //
DROP TRIGGER IF EXISTS civicrm_value_relationship__20_after_delete //
DROP TRIGGER IF EXISTS civicrm_value_relationship_metadata_before_insert //
DROP TRIGGER IF EXISTS civicrm_value_relationship_metadata_before_update //
DROP TRIGGER IF EXISTS civicrm_value_relationship_metadata_before_delete //
DROP TRIGGER IF EXISTS civicrm_value_relationship_metadata_after_insert //
DROP TRIGGER IF EXISTS civicrm_value_relationship_metadata_after_update //
DROP TRIGGER IF EXISTS civicrm_value_relationship_metadata_after_delete //
DROP TRIGGER IF EXISTS civicrm_website_before_insert //
DROP TRIGGER IF EXISTS civicrm_website_before_update //
DROP TRIGGER IF EXISTS civicrm_website_before_delete //
DROP TRIGGER IF EXISTS civicrm_website_after_insert //
DROP TRIGGER IF EXISTS civicrm_website_after_update //
DROP TRIGGER IF EXISTS civicrm_website_after_delete //
DROP TRIGGER IF EXISTS civicrm_word_replacement_before_insert //
DROP TRIGGER IF EXISTS civicrm_word_replacement_before_update //
DROP TRIGGER IF EXISTS civicrm_word_replacement_before_delete //
DROP TRIGGER IF EXISTS civicrm_word_replacement_after_insert //
DROP TRIGGER IF EXISTS civicrm_word_replacement_after_update //
DROP TRIGGER IF EXISTS civicrm_word_replacement_after_delete //
DROP TRIGGER IF EXISTS civicrm_worldregion_before_insert //
DROP TRIGGER IF EXISTS civicrm_worldregion_before_update //
DROP TRIGGER IF EXISTS civicrm_worldregion_before_delete //
DROP TRIGGER IF EXISTS civicrm_worldregion_after_insert //
DROP TRIGGER IF EXISTS civicrm_worldregion_after_update //
DROP TRIGGER IF EXISTS civicrm_worldregion_after_delete //
DROP TRIGGER IF EXISTS wmf_contribution_extra_before_insert //
DROP TRIGGER IF EXISTS wmf_contribution_extra_before_update //
DROP TRIGGER IF EXISTS wmf_contribution_extra_before_delete //
DROP TRIGGER IF EXISTS wmf_contribution_extra_after_insert //
DROP TRIGGER IF EXISTS wmf_contribution_extra_after_update //
DROP TRIGGER IF EXISTS wmf_contribution_extra_after_delete //
DROP TRIGGER IF EXISTS wmf_external_contact_identifiers_before_insert //
DROP TRIGGER IF EXISTS wmf_external_contact_identifiers_before_update //
DROP TRIGGER IF EXISTS wmf_external_contact_identifiers_before_delete //
DROP TRIGGER IF EXISTS wmf_external_contact_identifiers_after_insert //
DROP TRIGGER IF EXISTS wmf_external_contact_identifiers_after_update //
DROP TRIGGER IF EXISTS wmf_external_contact_identifiers_after_delete //

CREATE TRIGGER civicrm_acl_after_insert after insert ON civicrm_acl FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_acl (`id`, `name`, `deny`, `entity_table`, `entity_id`, `operation`, `object_table`, `object_id`, `acl_table`, `acl_id`, `is_active`, `priority`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`name`, NEW.`deny`, NEW.`entity_table`, NEW.`entity_id`, NEW.`operation`, NEW.`object_table`, NEW.`object_id`, NEW.`acl_table`, NEW.`acl_id`, NEW.`is_active`, NEW.`priority`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_acl_after_update after update ON civicrm_acl FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`name`,'') <> IFNULL(NEW.`name`,'') OR IFNULL(OLD.`deny`,'') <> IFNULL(NEW.`deny`,'') OR IFNULL(OLD.`entity_table`,'') <> IFNULL(NEW.`entity_table`,'') OR IFNULL(OLD.`entity_id`,'') <> IFNULL(NEW.`entity_id`,'') OR IFNULL(OLD.`operation`,'') <> IFNULL(NEW.`operation`,'') OR IFNULL(OLD.`object_table`,'') <> IFNULL(NEW.`object_table`,'') OR IFNULL(OLD.`object_id`,'') <> IFNULL(NEW.`object_id`,'') OR IFNULL(OLD.`acl_table`,'') <> IFNULL(NEW.`acl_table`,'') OR IFNULL(OLD.`acl_id`,'') <> IFNULL(NEW.`acl_id`,'') OR IFNULL(OLD.`is_active`,'') <> IFNULL(NEW.`is_active`,'') OR IFNULL(OLD.`priority`,'') <> IFNULL(NEW.`priority`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_acl (`id`, `name`, `deny`, `entity_table`, `entity_id`, `operation`, `object_table`, `object_id`, `acl_table`, `acl_id`, `is_active`, `priority`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`name`, NEW.`deny`, NEW.`entity_table`, NEW.`entity_id`, NEW.`operation`, NEW.`object_table`, NEW.`object_id`, NEW.`acl_table`, NEW.`acl_id`, NEW.`is_active`, NEW.`priority`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_acl_after_delete after delete ON civicrm_acl FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_acl (`id`, `name`, `deny`, `entity_table`, `entity_id`, `operation`, `object_table`, `object_id`, `acl_table`, `acl_id`, `is_active`, `priority`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`name`, OLD.`deny`, OLD.`entity_table`, OLD.`entity_id`, OLD.`operation`, OLD.`object_table`, OLD.`object_id`, OLD.`acl_table`, OLD.`acl_id`, OLD.`is_active`, OLD.`priority`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_acl_entity_role_after_insert after insert ON civicrm_acl_entity_role FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_acl_entity_role (`id`, `acl_role_id`, `entity_table`, `entity_id`, `is_active`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`acl_role_id`, NEW.`entity_table`, NEW.`entity_id`, NEW.`is_active`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_acl_entity_role_after_update after update ON civicrm_acl_entity_role FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`acl_role_id`,'') <> IFNULL(NEW.`acl_role_id`,'') OR IFNULL(OLD.`entity_table`,'') <> IFNULL(NEW.`entity_table`,'') OR IFNULL(OLD.`entity_id`,'') <> IFNULL(NEW.`entity_id`,'') OR IFNULL(OLD.`is_active`,'') <> IFNULL(NEW.`is_active`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_acl_entity_role (`id`, `acl_role_id`, `entity_table`, `entity_id`, `is_active`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`acl_role_id`, NEW.`entity_table`, NEW.`entity_id`, NEW.`is_active`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_acl_entity_role_after_delete after delete ON civicrm_acl_entity_role FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_acl_entity_role (`id`, `acl_role_id`, `entity_table`, `entity_id`, `is_active`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`acl_role_id`, OLD.`entity_table`, OLD.`entity_id`, OLD.`is_active`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_action_schedule_after_insert after insert ON civicrm_action_schedule FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_action_schedule (`id`, `name`, `title`, `recipient`, `limit_to`, `entity_value`, `entity_status`, `start_action_offset`, `start_action_unit`, `start_action_condition`, `start_action_date`, `is_repeat`, `repetition_frequency_unit`, `repetition_frequency_interval`, `end_frequency_unit`, `end_frequency_interval`, `end_action`, `end_date`, `is_active`, `recipient_manual`, `body_text`, `body_html`, `sms_body_text`, `subject`, `record_activity`, `mapping_id`, `group_id`, `msg_template_id`, `sms_template_id`, `absolute_date`, `from_name`, `from_email`, `recipient_listing`, `mode`, `sms_provider_id`, `used_for`, `filter_contact_language`, `communication_language`, `created_date`, `modified_date`, `effective_start_date`, `effective_end_date`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`name`, NEW.`title`, NEW.`recipient`, NEW.`limit_to`, NEW.`entity_value`, NEW.`entity_status`, NEW.`start_action_offset`, NEW.`start_action_unit`, NEW.`start_action_condition`, NEW.`start_action_date`, NEW.`is_repeat`, NEW.`repetition_frequency_unit`, NEW.`repetition_frequency_interval`, NEW.`end_frequency_unit`, NEW.`end_frequency_interval`, NEW.`end_action`, NEW.`end_date`, NEW.`is_active`, NEW.`recipient_manual`, NEW.`body_text`, NEW.`body_html`, NEW.`sms_body_text`, NEW.`subject`, NEW.`record_activity`, NEW.`mapping_id`, NEW.`group_id`, NEW.`msg_template_id`, NEW.`sms_template_id`, NEW.`absolute_date`, NEW.`from_name`, NEW.`from_email`, NEW.`recipient_listing`, NEW.`mode`, NEW.`sms_provider_id`, NEW.`used_for`, NEW.`filter_contact_language`, NEW.`communication_language`, NEW.`created_date`, NEW.`modified_date`, NEW.`effective_start_date`, NEW.`effective_end_date`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_action_schedule_after_update after update ON civicrm_action_schedule FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`name`,'') <> IFNULL(NEW.`name`,'') OR IFNULL(OLD.`title`,'') <> IFNULL(NEW.`title`,'') OR IFNULL(OLD.`recipient`,'') <> IFNULL(NEW.`recipient`,'') OR IFNULL(OLD.`limit_to`,'') <> IFNULL(NEW.`limit_to`,'') OR IFNULL(OLD.`entity_value`,'') <> IFNULL(NEW.`entity_value`,'') OR IFNULL(OLD.`entity_status`,'') <> IFNULL(NEW.`entity_status`,'') OR IFNULL(OLD.`start_action_offset`,'') <> IFNULL(NEW.`start_action_offset`,'') OR IFNULL(OLD.`start_action_unit`,'') <> IFNULL(NEW.`start_action_unit`,'') OR IFNULL(OLD.`start_action_condition`,'') <> IFNULL(NEW.`start_action_condition`,'') OR IFNULL(OLD.`start_action_date`,'') <> IFNULL(NEW.`start_action_date`,'') OR IFNULL(OLD.`is_repeat`,'') <> IFNULL(NEW.`is_repeat`,'') OR IFNULL(OLD.`repetition_frequency_unit`,'') <> IFNULL(NEW.`repetition_frequency_unit`,'') OR IFNULL(OLD.`repetition_frequency_interval`,'') <> IFNULL(NEW.`repetition_frequency_interval`,'') OR IFNULL(OLD.`end_frequency_unit`,'') <> IFNULL(NEW.`end_frequency_unit`,'') OR IFNULL(OLD.`end_frequency_interval`,'') <> IFNULL(NEW.`end_frequency_interval`,'') OR IFNULL(OLD.`end_action`,'') <> IFNULL(NEW.`end_action`,'') OR IFNULL(OLD.`end_date`,'') <> IFNULL(NEW.`end_date`,'') OR IFNULL(OLD.`is_active`,'') <> IFNULL(NEW.`is_active`,'') OR IFNULL(OLD.`recipient_manual`,'') <> IFNULL(NEW.`recipient_manual`,'') OR IFNULL(OLD.`body_text`,'') <> IFNULL(NEW.`body_text`,'') OR IFNULL(OLD.`body_html`,'') <> IFNULL(NEW.`body_html`,'') OR IFNULL(OLD.`sms_body_text`,'') <> IFNULL(NEW.`sms_body_text`,'') OR IFNULL(OLD.`subject`,'') <> IFNULL(NEW.`subject`,'') OR IFNULL(OLD.`record_activity`,'') <> IFNULL(NEW.`record_activity`,'') OR IFNULL(OLD.`mapping_id`,'') <> IFNULL(NEW.`mapping_id`,'') OR IFNULL(OLD.`group_id`,'') <> IFNULL(NEW.`group_id`,'') OR IFNULL(OLD.`msg_template_id`,'') <> IFNULL(NEW.`msg_template_id`,'') OR IFNULL(OLD.`sms_template_id`,'') <> IFNULL(NEW.`sms_template_id`,'') OR IFNULL(OLD.`absolute_date`,'') <> IFNULL(NEW.`absolute_date`,'') OR IFNULL(OLD.`from_name`,'') <> IFNULL(NEW.`from_name`,'') OR IFNULL(OLD.`from_email`,'') <> IFNULL(NEW.`from_email`,'') OR IFNULL(OLD.`recipient_listing`,'') <> IFNULL(NEW.`recipient_listing`,'') OR IFNULL(OLD.`mode`,'') <> IFNULL(NEW.`mode`,'') OR IFNULL(OLD.`sms_provider_id`,'') <> IFNULL(NEW.`sms_provider_id`,'') OR IFNULL(OLD.`used_for`,'') <> IFNULL(NEW.`used_for`,'') OR IFNULL(OLD.`filter_contact_language`,'') <> IFNULL(NEW.`filter_contact_language`,'') OR IFNULL(OLD.`communication_language`,'') <> IFNULL(NEW.`communication_language`,'') OR IFNULL(OLD.`created_date`,'') <> IFNULL(NEW.`created_date`,'') OR IFNULL(OLD.`effective_start_date`,'') <> IFNULL(NEW.`effective_start_date`,'') OR IFNULL(OLD.`effective_end_date`,'') <> IFNULL(NEW.`effective_end_date`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_action_schedule (`id`, `name`, `title`, `recipient`, `limit_to`, `entity_value`, `entity_status`, `start_action_offset`, `start_action_unit`, `start_action_condition`, `start_action_date`, `is_repeat`, `repetition_frequency_unit`, `repetition_frequency_interval`, `end_frequency_unit`, `end_frequency_interval`, `end_action`, `end_date`, `is_active`, `recipient_manual`, `body_text`, `body_html`, `sms_body_text`, `subject`, `record_activity`, `mapping_id`, `group_id`, `msg_template_id`, `sms_template_id`, `absolute_date`, `from_name`, `from_email`, `recipient_listing`, `mode`, `sms_provider_id`, `used_for`, `filter_contact_language`, `communication_language`, `created_date`, `modified_date`, `effective_start_date`, `effective_end_date`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`name`, NEW.`title`, NEW.`recipient`, NEW.`limit_to`, NEW.`entity_value`, NEW.`entity_status`, NEW.`start_action_offset`, NEW.`start_action_unit`, NEW.`start_action_condition`, NEW.`start_action_date`, NEW.`is_repeat`, NEW.`repetition_frequency_unit`, NEW.`repetition_frequency_interval`, NEW.`end_frequency_unit`, NEW.`end_frequency_interval`, NEW.`end_action`, NEW.`end_date`, NEW.`is_active`, NEW.`recipient_manual`, NEW.`body_text`, NEW.`body_html`, NEW.`sms_body_text`, NEW.`subject`, NEW.`record_activity`, NEW.`mapping_id`, NEW.`group_id`, NEW.`msg_template_id`, NEW.`sms_template_id`, NEW.`absolute_date`, NEW.`from_name`, NEW.`from_email`, NEW.`recipient_listing`, NEW.`mode`, NEW.`sms_provider_id`, NEW.`used_for`, NEW.`filter_contact_language`, NEW.`communication_language`, NEW.`created_date`, NEW.`modified_date`, NEW.`effective_start_date`, NEW.`effective_end_date`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_action_schedule_after_delete after delete ON civicrm_action_schedule FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_action_schedule (`id`, `name`, `title`, `recipient`, `limit_to`, `entity_value`, `entity_status`, `start_action_offset`, `start_action_unit`, `start_action_condition`, `start_action_date`, `is_repeat`, `repetition_frequency_unit`, `repetition_frequency_interval`, `end_frequency_unit`, `end_frequency_interval`, `end_action`, `end_date`, `is_active`, `recipient_manual`, `body_text`, `body_html`, `sms_body_text`, `subject`, `record_activity`, `mapping_id`, `group_id`, `msg_template_id`, `sms_template_id`, `absolute_date`, `from_name`, `from_email`, `recipient_listing`, `mode`, `sms_provider_id`, `used_for`, `filter_contact_language`, `communication_language`, `created_date`, `modified_date`, `effective_start_date`, `effective_end_date`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`name`, OLD.`title`, OLD.`recipient`, OLD.`limit_to`, OLD.`entity_value`, OLD.`entity_status`, OLD.`start_action_offset`, OLD.`start_action_unit`, OLD.`start_action_condition`, OLD.`start_action_date`, OLD.`is_repeat`, OLD.`repetition_frequency_unit`, OLD.`repetition_frequency_interval`, OLD.`end_frequency_unit`, OLD.`end_frequency_interval`, OLD.`end_action`, OLD.`end_date`, OLD.`is_active`, OLD.`recipient_manual`, OLD.`body_text`, OLD.`body_html`, OLD.`sms_body_text`, OLD.`subject`, OLD.`record_activity`, OLD.`mapping_id`, OLD.`group_id`, OLD.`msg_template_id`, OLD.`sms_template_id`, OLD.`absolute_date`, OLD.`from_name`, OLD.`from_email`, OLD.`recipient_listing`, OLD.`mode`, OLD.`sms_provider_id`, OLD.`used_for`, OLD.`filter_contact_language`, OLD.`communication_language`, OLD.`created_date`, OLD.`modified_date`, OLD.`effective_start_date`, OLD.`effective_end_date`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_activity_after_insert after insert ON civicrm_activity FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_activity (`id`, `source_record_id`, `activity_type_id`, `subject`, `activity_date_time`, `duration`, `location`, `phone_id`, `phone_number`, `details`, `status_id`, `priority_id`, `parent_id`, `is_test`, `medium_id`, `is_auto`, `relationship_id`, `is_current_revision`, `original_id`, `result`, `is_deleted`, `campaign_id`, `engagement_level`, `weight`, `is_star`, `created_date`, `modified_date`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`source_record_id`, NEW.`activity_type_id`, NEW.`subject`, NEW.`activity_date_time`, NEW.`duration`, NEW.`location`, NEW.`phone_id`, NEW.`phone_number`,
        IF(NEW.`activity_type_id` NOT IN (100,170), NEW.`details`, NULL), NEW.`status_id`, NEW.`priority_id`, NEW.`parent_id`, NEW.`is_test`, NEW.`medium_id`, NEW.`is_auto`, NEW.`relationship_id`, NEW.`is_current_revision`, NEW.`original_id`, NEW.`result`, NEW.`is_deleted`, NEW.`campaign_id`, NEW.`engagement_level`, NEW.`weight`, NEW.`is_star`, NEW.`created_date`, NEW.`modified_date`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_activity_before_insert before insert ON civicrm_activity FOR EACH ROW BEGIN  
SET NEW.created_date = CURRENT_TIMESTAMP;
 END //

CREATE TRIGGER civicrm_activity_after_update after update ON civicrm_activity FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`source_record_id`,'') <> IFNULL(NEW.`source_record_id`,'') OR IFNULL(OLD.`activity_type_id`,'') <> IFNULL(NEW.`activity_type_id`,'') OR IFNULL(OLD.`subject`,'') <> IFNULL(NEW.`subject`,'') OR IFNULL(OLD.`activity_date_time`,'') <> IFNULL(NEW.`activity_date_time`,'') OR IFNULL(OLD.`duration`,'') <> IFNULL(NEW.`duration`,'') OR IFNULL(OLD.`location`,'') <> IFNULL(NEW.`location`,'') OR IFNULL(OLD.`phone_id`,'') <> IFNULL(NEW.`phone_id`,'') OR IFNULL(OLD.`phone_number`,'') <> IFNULL(NEW.`phone_number`,'') OR IFNULL(OLD.`details`,'') <> IFNULL(NEW.`details`,'') OR IFNULL(OLD.`status_id`,'') <> IFNULL(NEW.`status_id`,'') OR IFNULL(OLD.`priority_id`,'') <> IFNULL(NEW.`priority_id`,'') OR IFNULL(OLD.`parent_id`,'') <> IFNULL(NEW.`parent_id`,'') OR IFNULL(OLD.`is_test`,'') <> IFNULL(NEW.`is_test`,'') OR IFNULL(OLD.`medium_id`,'') <> IFNULL(NEW.`medium_id`,'') OR IFNULL(OLD.`is_auto`,'') <> IFNULL(NEW.`is_auto`,'') OR IFNULL(OLD.`relationship_id`,'') <> IFNULL(NEW.`relationship_id`,'') OR IFNULL(OLD.`is_current_revision`,'') <> IFNULL(NEW.`is_current_revision`,'') OR IFNULL(OLD.`original_id`,'') <> IFNULL(NEW.`original_id`,'') OR IFNULL(OLD.`result`,'') <> IFNULL(NEW.`result`,'') OR IFNULL(OLD.`is_deleted`,'') <> IFNULL(NEW.`is_deleted`,'') OR IFNULL(OLD.`campaign_id`,'') <> IFNULL(NEW.`campaign_id`,'') OR IFNULL(OLD.`engagement_level`,'') <> IFNULL(NEW.`engagement_level`,'') OR IFNULL(OLD.`weight`,'') <> IFNULL(NEW.`weight`,'') OR IFNULL(OLD.`is_star`,'') <> IFNULL(NEW.`is_star`,'') OR IFNULL(OLD.`created_date`,'') <> IFNULL(NEW.`created_date`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_activity (`id`, `source_record_id`, `activity_type_id`, `subject`, `activity_date_time`, `duration`, `location`, `phone_id`, `phone_number`, `details`, `status_id`, `priority_id`, `parent_id`, `is_test`, `medium_id`, `is_auto`, `relationship_id`, `is_current_revision`, `original_id`, `result`, `is_deleted`, `campaign_id`, `engagement_level`, `weight`, `is_star`, `created_date`, `modified_date`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`source_record_id`, NEW.`activity_type_id`, NEW.`subject`, NEW.`activity_date_time`, NEW.`duration`, NEW.`location`, NEW.`phone_id`, NEW.`phone_number`, NEW.`details`, NEW.`status_id`, NEW.`priority_id`, NEW.`parent_id`, NEW.`is_test`, NEW.`medium_id`, NEW.`is_auto`, NEW.`relationship_id`, NEW.`is_current_revision`, NEW.`original_id`, NEW.`result`, NEW.`is_deleted`, NEW.`campaign_id`, NEW.`engagement_level`, NEW.`weight`, NEW.`is_star`, NEW.`created_date`, NEW.`modified_date`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_activity_before_update before update ON civicrm_activity FOR EACH ROW BEGIN  UPDATE civicrm_case SET modified_date = CURRENT_TIMESTAMP WHERE id IN (SELECT ca.case_id FROM civicrm_case_activity ca WHERE ca.activity_id = OLD.id); END //

CREATE TRIGGER civicrm_activity_after_delete after delete ON civicrm_activity FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_activity (`id`, `source_record_id`, `activity_type_id`, `subject`, `activity_date_time`, `duration`, `location`, `phone_id`, `phone_number`, `details`, `status_id`, `priority_id`, `parent_id`, `is_test`, `medium_id`, `is_auto`, `relationship_id`, `is_current_revision`, `original_id`, `result`, `is_deleted`, `campaign_id`, `engagement_level`, `weight`, `is_star`, `created_date`, `modified_date`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`source_record_id`, OLD.`activity_type_id`, OLD.`subject`, OLD.`activity_date_time`, OLD.`duration`, OLD.`location`, OLD.`phone_id`, OLD.`phone_number`, OLD.`details`, OLD.`status_id`, OLD.`priority_id`, OLD.`parent_id`, OLD.`is_test`, OLD.`medium_id`, OLD.`is_auto`, OLD.`relationship_id`, OLD.`is_current_revision`, OLD.`original_id`, OLD.`result`, OLD.`is_deleted`, OLD.`campaign_id`, OLD.`engagement_level`, OLD.`weight`, OLD.`is_star`, OLD.`created_date`, OLD.`modified_date`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_activity_before_delete before delete ON civicrm_activity FOR EACH ROW BEGIN  UPDATE civicrm_case SET modified_date = CURRENT_TIMESTAMP WHERE id IN (SELECT ca.case_id FROM civicrm_case_activity ca WHERE ca.activity_id = OLD.id); END //

CREATE TRIGGER civicrm_activity_contact_after_insert after insert ON civicrm_activity_contact FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_activity_contact (`id`, `activity_id`, `contact_id`, `record_type_id`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`activity_id`, NEW.`contact_id`, NEW.`record_type_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_activity_contact_after_update after update ON civicrm_activity_contact FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`activity_id`,'') <> IFNULL(NEW.`activity_id`,'') OR IFNULL(OLD.`contact_id`,'') <> IFNULL(NEW.`contact_id`,'') OR IFNULL(OLD.`record_type_id`,'') <> IFNULL(NEW.`record_type_id`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_activity_contact (`id`, `activity_id`, `contact_id`, `record_type_id`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`activity_id`, NEW.`contact_id`, NEW.`record_type_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_activity_contact_after_delete after delete ON civicrm_activity_contact FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_activity_contact (`id`, `activity_id`, `contact_id`, `record_type_id`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`activity_id`, OLD.`contact_id`, OLD.`record_type_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_activity_tracking_after_insert after insert ON civicrm_activity_tracking FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_activity_tracking (`id`, `entity_id`, `campaign`, `medium`, `source`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`entity_id`, NEW.`campaign`, NEW.`medium`, NEW.`source`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF;
UPDATE civicrm_activity SET modified_date = CURRENT_TIMESTAMP WHERE id = NEW.entity_id; END //

CREATE TRIGGER civicrm_activity_tracking_after_update after update ON civicrm_activity_tracking FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`entity_id`,'') <> IFNULL(NEW.`entity_id`,'') OR IFNULL(OLD.`campaign`,'') <> IFNULL(NEW.`campaign`,'') OR IFNULL(OLD.`medium`,'') <> IFNULL(NEW.`medium`,'') OR IFNULL(OLD.`source`,'') <> IFNULL(NEW.`source`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_activity_tracking (`id`, `entity_id`, `campaign`, `medium`, `source`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`entity_id`, NEW.`campaign`, NEW.`medium`, NEW.`source`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF;
UPDATE civicrm_activity SET modified_date = CURRENT_TIMESTAMP WHERE id = NEW.entity_id; END //

CREATE TRIGGER civicrm_activity_tracking_after_delete after delete ON civicrm_activity_tracking FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_activity_tracking (`id`, `entity_id`, `campaign`, `medium`, `source`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`entity_id`, OLD.`campaign`, OLD.`medium`, OLD.`source`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF;
UPDATE civicrm_activity SET modified_date = CURRENT_TIMESTAMP WHERE id = OLD.entity_id; END //

CREATE TRIGGER civicrm_address_after_insert after insert ON civicrm_address FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_address (`id`, `contact_id`, `location_type_id`, `is_primary`, `is_billing`, `street_address`, `street_number`, `street_number_suffix`, `street_number_predirectional`, `street_name`, `street_type`, `street_number_postdirectional`, `street_unit`, `supplemental_address_1`, `supplemental_address_2`, `supplemental_address_3`, `city`, `county_id`, `state_province_id`, `postal_code_suffix`, `postal_code`, `usps_adc`, `country_id`, `geo_code_1`, `geo_code_2`, `timezone`, `name`, `master_id`, `manual_geo_code`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`contact_id`, NEW.`location_type_id`, NEW.`is_primary`, NEW.`is_billing`, NEW.`street_address`, NEW.`street_number`, NEW.`street_number_suffix`, NEW.`street_number_predirectional`, NEW.`street_name`, NEW.`street_type`, NEW.`street_number_postdirectional`, NEW.`street_unit`, NEW.`supplemental_address_1`, NEW.`supplemental_address_2`, NEW.`supplemental_address_3`, NEW.`city`, NEW.`county_id`, NEW.`state_province_id`, NEW.`postal_code_suffix`, NEW.`postal_code`, NEW.`usps_adc`, NEW.`country_id`, NEW.`geo_code_1`, NEW.`geo_code_2`, NEW.`timezone`, NEW.`name`, NEW.`master_id`, NEW.`manual_geo_code`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF;
UPDATE civicrm_contact SET modified_date = CURRENT_TIMESTAMP WHERE id = NEW.contact_id; END //

CREATE TRIGGER civicrm_address_after_update after update ON civicrm_address FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`contact_id`,'') <> IFNULL(NEW.`contact_id`,'') OR IFNULL(OLD.`location_type_id`,'') <> IFNULL(NEW.`location_type_id`,'') OR IFNULL(OLD.`is_primary`,'') <> IFNULL(NEW.`is_primary`,'') OR IFNULL(OLD.`is_billing`,'') <> IFNULL(NEW.`is_billing`,'') OR IFNULL(OLD.`street_address`,'') <> IFNULL(NEW.`street_address`,'') OR IFNULL(OLD.`street_number`,'') <> IFNULL(NEW.`street_number`,'') OR IFNULL(OLD.`street_number_suffix`,'') <> IFNULL(NEW.`street_number_suffix`,'') OR IFNULL(OLD.`street_number_predirectional`,'') <> IFNULL(NEW.`street_number_predirectional`,'') OR IFNULL(OLD.`street_name`,'') <> IFNULL(NEW.`street_name`,'') OR IFNULL(OLD.`street_type`,'') <> IFNULL(NEW.`street_type`,'') OR IFNULL(OLD.`street_number_postdirectional`,'') <> IFNULL(NEW.`street_number_postdirectional`,'') OR IFNULL(OLD.`street_unit`,'') <> IFNULL(NEW.`street_unit`,'') OR IFNULL(OLD.`supplemental_address_1`,'') <> IFNULL(NEW.`supplemental_address_1`,'') OR IFNULL(OLD.`supplemental_address_2`,'') <> IFNULL(NEW.`supplemental_address_2`,'') OR IFNULL(OLD.`supplemental_address_3`,'') <> IFNULL(NEW.`supplemental_address_3`,'') OR IFNULL(OLD.`city`,'') <> IFNULL(NEW.`city`,'') OR IFNULL(OLD.`county_id`,'') <> IFNULL(NEW.`county_id`,'') OR IFNULL(OLD.`state_province_id`,'') <> IFNULL(NEW.`state_province_id`,'') OR IFNULL(OLD.`postal_code_suffix`,'') <> IFNULL(NEW.`postal_code_suffix`,'') OR IFNULL(OLD.`postal_code`,'') <> IFNULL(NEW.`postal_code`,'') OR IFNULL(OLD.`usps_adc`,'') <> IFNULL(NEW.`usps_adc`,'') OR IFNULL(OLD.`country_id`,'') <> IFNULL(NEW.`country_id`,'') OR IFNULL(OLD.`geo_code_1`,'') <> IFNULL(NEW.`geo_code_1`,'') OR IFNULL(OLD.`geo_code_2`,'') <> IFNULL(NEW.`geo_code_2`,'') OR IFNULL(OLD.`timezone`,'') <> IFNULL(NEW.`timezone`,'') OR IFNULL(OLD.`name`,'') <> IFNULL(NEW.`name`,'') OR IFNULL(OLD.`master_id`,'') <> IFNULL(NEW.`master_id`,'') OR IFNULL(OLD.`manual_geo_code`,'') <> IFNULL(NEW.`manual_geo_code`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_address (`id`, `contact_id`, `location_type_id`, `is_primary`, `is_billing`, `street_address`, `street_number`, `street_number_suffix`, `street_number_predirectional`, `street_name`, `street_type`, `street_number_postdirectional`, `street_unit`, `supplemental_address_1`, `supplemental_address_2`, `supplemental_address_3`, `city`, `county_id`, `state_province_id`, `postal_code_suffix`, `postal_code`, `usps_adc`, `country_id`, `geo_code_1`, `geo_code_2`, `timezone`, `name`, `master_id`, `manual_geo_code`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`contact_id`, NEW.`location_type_id`, NEW.`is_primary`, NEW.`is_billing`, NEW.`street_address`, NEW.`street_number`, NEW.`street_number_suffix`, NEW.`street_number_predirectional`, NEW.`street_name`, NEW.`street_type`, NEW.`street_number_postdirectional`, NEW.`street_unit`, NEW.`supplemental_address_1`, NEW.`supplemental_address_2`, NEW.`supplemental_address_3`, NEW.`city`, NEW.`county_id`, NEW.`state_province_id`, NEW.`postal_code_suffix`, NEW.`postal_code`, NEW.`usps_adc`, NEW.`country_id`, NEW.`geo_code_1`, NEW.`geo_code_2`, NEW.`timezone`, NEW.`name`, NEW.`master_id`, NEW.`manual_geo_code`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF;
UPDATE civicrm_contact SET modified_date = CURRENT_TIMESTAMP WHERE id = NEW.contact_id; END //

CREATE TRIGGER civicrm_address_after_delete after delete ON civicrm_address FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_address (`id`, `contact_id`, `location_type_id`, `is_primary`, `is_billing`, `street_address`, `street_number`, `street_number_suffix`, `street_number_predirectional`, `street_name`, `street_type`, `street_number_postdirectional`, `street_unit`, `supplemental_address_1`, `supplemental_address_2`, `supplemental_address_3`, `city`, `county_id`, `state_province_id`, `postal_code_suffix`, `postal_code`, `usps_adc`, `country_id`, `geo_code_1`, `geo_code_2`, `timezone`, `name`, `master_id`, `manual_geo_code`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`contact_id`, OLD.`location_type_id`, OLD.`is_primary`, OLD.`is_billing`, OLD.`street_address`, OLD.`street_number`, OLD.`street_number_suffix`, OLD.`street_number_predirectional`, OLD.`street_name`, OLD.`street_type`, OLD.`street_number_postdirectional`, OLD.`street_unit`, OLD.`supplemental_address_1`, OLD.`supplemental_address_2`, OLD.`supplemental_address_3`, OLD.`city`, OLD.`county_id`, OLD.`state_province_id`, OLD.`postal_code_suffix`, OLD.`postal_code`, OLD.`usps_adc`, OLD.`country_id`, OLD.`geo_code_1`, OLD.`geo_code_2`, OLD.`timezone`, OLD.`name`, OLD.`master_id`, OLD.`manual_geo_code`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF;
UPDATE civicrm_contact SET modified_date = CURRENT_TIMESTAMP WHERE id = OLD.contact_id; END //

CREATE TRIGGER civicrm_address_format_after_insert after insert ON civicrm_address_format FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_address_format (`id`, `format`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`format`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_address_format_after_update after update ON civicrm_address_format FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`format`,'') <> IFNULL(NEW.`format`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_address_format (`id`, `format`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`format`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_address_format_after_delete after delete ON civicrm_address_format FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_address_format (`id`, `format`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`format`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_afform_submission_after_insert after insert ON civicrm_afform_submission FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_afform_submission (`id`, `contact_id`, `afform_name`, `data`, `submission_date`, `status_id`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`contact_id`, NEW.`afform_name`, NEW.`data`, NEW.`submission_date`, NEW.`status_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_afform_submission_after_update after update ON civicrm_afform_submission FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`contact_id`,'') <> IFNULL(NEW.`contact_id`,'') OR IFNULL(OLD.`afform_name`,'') <> IFNULL(NEW.`afform_name`,'') OR IFNULL(OLD.`data`,'') <> IFNULL(NEW.`data`,'') OR IFNULL(OLD.`submission_date`,'') <> IFNULL(NEW.`submission_date`,'') OR IFNULL(OLD.`status_id`,'') <> IFNULL(NEW.`status_id`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_afform_submission (`id`, `contact_id`, `afform_name`, `data`, `submission_date`, `status_id`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`contact_id`, NEW.`afform_name`, NEW.`data`, NEW.`submission_date`, NEW.`status_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_afform_submission_after_delete after delete ON civicrm_afform_submission FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_afform_submission (`id`, `contact_id`, `afform_name`, `data`, `submission_date`, `status_id`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`contact_id`, OLD.`afform_name`, OLD.`data`, OLD.`submission_date`, OLD.`status_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_batch_after_insert after insert ON civicrm_batch FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_batch (`id`, `name`, `title`, `description`, `created_id`, `created_date`, `modified_id`, `modified_date`, `saved_search_id`, `status_id`, `type_id`, `mode_id`, `total`, `item_count`, `payment_instrument_id`, `exported_date`, `data`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`name`, NEW.`title`, NEW.`description`, NEW.`created_id`, NEW.`created_date`, NEW.`modified_id`, NEW.`modified_date`, NEW.`saved_search_id`, NEW.`status_id`, NEW.`type_id`, NEW.`mode_id`, NEW.`total`, NEW.`item_count`, NEW.`payment_instrument_id`, NEW.`exported_date`, NEW.`data`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_batch_after_update after update ON civicrm_batch FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`name`,'') <> IFNULL(NEW.`name`,'') OR IFNULL(OLD.`title`,'') <> IFNULL(NEW.`title`,'') OR IFNULL(OLD.`description`,'') <> IFNULL(NEW.`description`,'') OR IFNULL(OLD.`created_id`,'') <> IFNULL(NEW.`created_id`,'') OR IFNULL(OLD.`created_date`,'') <> IFNULL(NEW.`created_date`,'') OR IFNULL(OLD.`modified_id`,'') <> IFNULL(NEW.`modified_id`,'') OR IFNULL(OLD.`saved_search_id`,'') <> IFNULL(NEW.`saved_search_id`,'') OR IFNULL(OLD.`status_id`,'') <> IFNULL(NEW.`status_id`,'') OR IFNULL(OLD.`type_id`,'') <> IFNULL(NEW.`type_id`,'') OR IFNULL(OLD.`mode_id`,'') <> IFNULL(NEW.`mode_id`,'') OR IFNULL(OLD.`total`,'') <> IFNULL(NEW.`total`,'') OR IFNULL(OLD.`item_count`,'') <> IFNULL(NEW.`item_count`,'') OR IFNULL(OLD.`payment_instrument_id`,'') <> IFNULL(NEW.`payment_instrument_id`,'') OR IFNULL(OLD.`exported_date`,'') <> IFNULL(NEW.`exported_date`,'') OR IFNULL(OLD.`data`,'') <> IFNULL(NEW.`data`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_batch (`id`, `name`, `title`, `description`, `created_id`, `created_date`, `modified_id`, `modified_date`, `saved_search_id`, `status_id`, `type_id`, `mode_id`, `total`, `item_count`, `payment_instrument_id`, `exported_date`, `data`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`name`, NEW.`title`, NEW.`description`, NEW.`created_id`, NEW.`created_date`, NEW.`modified_id`, NEW.`modified_date`, NEW.`saved_search_id`, NEW.`status_id`, NEW.`type_id`, NEW.`mode_id`, NEW.`total`, NEW.`item_count`, NEW.`payment_instrument_id`, NEW.`exported_date`, NEW.`data`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_batch_after_delete after delete ON civicrm_batch FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_batch (`id`, `name`, `title`, `description`, `created_id`, `created_date`, `modified_id`, `modified_date`, `saved_search_id`, `status_id`, `type_id`, `mode_id`, `total`, `item_count`, `payment_instrument_id`, `exported_date`, `data`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`name`, OLD.`title`, OLD.`description`, OLD.`created_id`, OLD.`created_date`, OLD.`modified_id`, OLD.`modified_date`, OLD.`saved_search_id`, OLD.`status_id`, OLD.`type_id`, OLD.`mode_id`, OLD.`total`, OLD.`item_count`, OLD.`payment_instrument_id`, OLD.`exported_date`, OLD.`data`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_campaign_after_insert after insert ON civicrm_campaign FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_campaign (`id`, `name`, `title`, `description`, `start_date`, `end_date`, `campaign_type_id`, `status_id`, `external_identifier`, `parent_id`, `is_active`, `created_id`, `created_date`, `last_modified_id`, `last_modified_date`, `goal_general`, `goal_revenue`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`name`, NEW.`title`, NEW.`description`, NEW.`start_date`, NEW.`end_date`, NEW.`campaign_type_id`, NEW.`status_id`, NEW.`external_identifier`, NEW.`parent_id`, NEW.`is_active`, NEW.`created_id`, NEW.`created_date`, NEW.`last_modified_id`, NEW.`last_modified_date`, NEW.`goal_general`, NEW.`goal_revenue`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_campaign_after_update after update ON civicrm_campaign FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`name`,'') <> IFNULL(NEW.`name`,'') OR IFNULL(OLD.`title`,'') <> IFNULL(NEW.`title`,'') OR IFNULL(OLD.`description`,'') <> IFNULL(NEW.`description`,'') OR IFNULL(OLD.`start_date`,'') <> IFNULL(NEW.`start_date`,'') OR IFNULL(OLD.`end_date`,'') <> IFNULL(NEW.`end_date`,'') OR IFNULL(OLD.`campaign_type_id`,'') <> IFNULL(NEW.`campaign_type_id`,'') OR IFNULL(OLD.`status_id`,'') <> IFNULL(NEW.`status_id`,'') OR IFNULL(OLD.`external_identifier`,'') <> IFNULL(NEW.`external_identifier`,'') OR IFNULL(OLD.`parent_id`,'') <> IFNULL(NEW.`parent_id`,'') OR IFNULL(OLD.`is_active`,'') <> IFNULL(NEW.`is_active`,'') OR IFNULL(OLD.`created_id`,'') <> IFNULL(NEW.`created_id`,'') OR IFNULL(OLD.`created_date`,'') <> IFNULL(NEW.`created_date`,'') OR IFNULL(OLD.`last_modified_id`,'') <> IFNULL(NEW.`last_modified_id`,'') OR IFNULL(OLD.`last_modified_date`,'') <> IFNULL(NEW.`last_modified_date`,'') OR IFNULL(OLD.`goal_general`,'') <> IFNULL(NEW.`goal_general`,'') OR IFNULL(OLD.`goal_revenue`,'') <> IFNULL(NEW.`goal_revenue`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_campaign (`id`, `name`, `title`, `description`, `start_date`, `end_date`, `campaign_type_id`, `status_id`, `external_identifier`, `parent_id`, `is_active`, `created_id`, `created_date`, `last_modified_id`, `last_modified_date`, `goal_general`, `goal_revenue`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`name`, NEW.`title`, NEW.`description`, NEW.`start_date`, NEW.`end_date`, NEW.`campaign_type_id`, NEW.`status_id`, NEW.`external_identifier`, NEW.`parent_id`, NEW.`is_active`, NEW.`created_id`, NEW.`created_date`, NEW.`last_modified_id`, NEW.`last_modified_date`, NEW.`goal_general`, NEW.`goal_revenue`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_campaign_after_delete after delete ON civicrm_campaign FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_campaign (`id`, `name`, `title`, `description`, `start_date`, `end_date`, `campaign_type_id`, `status_id`, `external_identifier`, `parent_id`, `is_active`, `created_id`, `created_date`, `last_modified_id`, `last_modified_date`, `goal_general`, `goal_revenue`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`name`, OLD.`title`, OLD.`description`, OLD.`start_date`, OLD.`end_date`, OLD.`campaign_type_id`, OLD.`status_id`, OLD.`external_identifier`, OLD.`parent_id`, OLD.`is_active`, OLD.`created_id`, OLD.`created_date`, OLD.`last_modified_id`, OLD.`last_modified_date`, OLD.`goal_general`, OLD.`goal_revenue`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_campaign_group_after_insert after insert ON civicrm_campaign_group FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_campaign_group (`id`, `campaign_id`, `group_type`, `entity_table`, `entity_id`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`campaign_id`, NEW.`group_type`, NEW.`entity_table`, NEW.`entity_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_campaign_group_after_update after update ON civicrm_campaign_group FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`campaign_id`,'') <> IFNULL(NEW.`campaign_id`,'') OR IFNULL(OLD.`group_type`,'') <> IFNULL(NEW.`group_type`,'') OR IFNULL(OLD.`entity_table`,'') <> IFNULL(NEW.`entity_table`,'') OR IFNULL(OLD.`entity_id`,'') <> IFNULL(NEW.`entity_id`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_campaign_group (`id`, `campaign_id`, `group_type`, `entity_table`, `entity_id`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`campaign_id`, NEW.`group_type`, NEW.`entity_table`, NEW.`entity_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_campaign_group_after_delete after delete ON civicrm_campaign_group FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_campaign_group (`id`, `campaign_id`, `group_type`, `entity_table`, `entity_id`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`campaign_id`, OLD.`group_type`, OLD.`entity_table`, OLD.`entity_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_case_after_insert after insert ON civicrm_case FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_case (`id`, `case_type_id`, `subject`, `start_date`, `end_date`, `details`, `status_id`, `is_deleted`, `created_date`, `modified_date`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`case_type_id`, NEW.`subject`, NEW.`start_date`, NEW.`end_date`, NEW.`details`, NEW.`status_id`, NEW.`is_deleted`, NEW.`created_date`, NEW.`modified_date`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_case_before_insert before insert ON civicrm_case FOR EACH ROW BEGIN  
SET NEW.created_date = CURRENT_TIMESTAMP;
 END //

CREATE TRIGGER civicrm_case_after_update after update ON civicrm_case FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`case_type_id`,'') <> IFNULL(NEW.`case_type_id`,'') OR IFNULL(OLD.`subject`,'') <> IFNULL(NEW.`subject`,'') OR IFNULL(OLD.`start_date`,'') <> IFNULL(NEW.`start_date`,'') OR IFNULL(OLD.`end_date`,'') <> IFNULL(NEW.`end_date`,'') OR IFNULL(OLD.`details`,'') <> IFNULL(NEW.`details`,'') OR IFNULL(OLD.`status_id`,'') <> IFNULL(NEW.`status_id`,'') OR IFNULL(OLD.`is_deleted`,'') <> IFNULL(NEW.`is_deleted`,'') OR IFNULL(OLD.`created_date`,'') <> IFNULL(NEW.`created_date`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_case (`id`, `case_type_id`, `subject`, `start_date`, `end_date`, `details`, `status_id`, `is_deleted`, `created_date`, `modified_date`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`case_type_id`, NEW.`subject`, NEW.`start_date`, NEW.`end_date`, NEW.`details`, NEW.`status_id`, NEW.`is_deleted`, NEW.`created_date`, NEW.`modified_date`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_case_after_delete after delete ON civicrm_case FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_case (`id`, `case_type_id`, `subject`, `start_date`, `end_date`, `details`, `status_id`, `is_deleted`, `created_date`, `modified_date`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`case_type_id`, OLD.`subject`, OLD.`start_date`, OLD.`end_date`, OLD.`details`, OLD.`status_id`, OLD.`is_deleted`, OLD.`created_date`, OLD.`modified_date`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_case_activity_after_insert after insert ON civicrm_case_activity FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_case_activity (`id`, `case_id`, `activity_id`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`case_id`, NEW.`activity_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF;
UPDATE civicrm_case SET modified_date = CURRENT_TIMESTAMP WHERE id = NEW.case_id; END //

CREATE TRIGGER civicrm_case_activity_after_update after update ON civicrm_case_activity FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`case_id`,'') <> IFNULL(NEW.`case_id`,'') OR IFNULL(OLD.`activity_id`,'') <> IFNULL(NEW.`activity_id`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_case_activity (`id`, `case_id`, `activity_id`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`case_id`, NEW.`activity_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_case_activity_after_delete after delete ON civicrm_case_activity FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_case_activity (`id`, `case_id`, `activity_id`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`case_id`, OLD.`activity_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_case_contact_after_insert after insert ON civicrm_case_contact FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_case_contact (`id`, `case_id`, `contact_id`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`case_id`, NEW.`contact_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_case_contact_after_update after update ON civicrm_case_contact FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`case_id`,'') <> IFNULL(NEW.`case_id`,'') OR IFNULL(OLD.`contact_id`,'') <> IFNULL(NEW.`contact_id`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_case_contact (`id`, `case_id`, `contact_id`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`case_id`, NEW.`contact_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_case_contact_after_delete after delete ON civicrm_case_contact FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_case_contact (`id`, `case_id`, `contact_id`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`case_id`, OLD.`contact_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_case_type_after_insert after insert ON civicrm_case_type FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_case_type (`id`, `name`, `title`, `description`, `is_active`, `is_reserved`, `weight`, `definition`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`name`, NEW.`title`, NEW.`description`, NEW.`is_active`, NEW.`is_reserved`, NEW.`weight`, NEW.`definition`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_case_type_after_update after update ON civicrm_case_type FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`name`,'') <> IFNULL(NEW.`name`,'') OR IFNULL(OLD.`title`,'') <> IFNULL(NEW.`title`,'') OR IFNULL(OLD.`description`,'') <> IFNULL(NEW.`description`,'') OR IFNULL(OLD.`is_active`,'') <> IFNULL(NEW.`is_active`,'') OR IFNULL(OLD.`is_reserved`,'') <> IFNULL(NEW.`is_reserved`,'') OR IFNULL(OLD.`weight`,'') <> IFNULL(NEW.`weight`,'') OR IFNULL(OLD.`definition`,'') <> IFNULL(NEW.`definition`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_case_type (`id`, `name`, `title`, `description`, `is_active`, `is_reserved`, `weight`, `definition`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`name`, NEW.`title`, NEW.`description`, NEW.`is_active`, NEW.`is_reserved`, NEW.`weight`, NEW.`definition`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_case_type_after_delete after delete ON civicrm_case_type FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_case_type (`id`, `name`, `title`, `description`, `is_active`, `is_reserved`, `weight`, `definition`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`name`, OLD.`title`, OLD.`description`, OLD.`is_active`, OLD.`is_reserved`, OLD.`weight`, OLD.`definition`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_component_after_insert after insert ON civicrm_component FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_component (`id`, `name`, `namespace`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`name`, NEW.`namespace`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_component_after_update after update ON civicrm_component FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`name`,'') <> IFNULL(NEW.`name`,'') OR IFNULL(OLD.`namespace`,'') <> IFNULL(NEW.`namespace`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_component (`id`, `name`, `namespace`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`name`, NEW.`namespace`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_component_after_delete after delete ON civicrm_component FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_component (`id`, `name`, `namespace`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`name`, OLD.`namespace`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_contact_after_insert after insert ON civicrm_contact FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_contact (`nick_name`, `legal_name`, `contact_type`, `do_not_email`, `do_not_phone`, `do_not_mail`, `do_not_sms`, `contact_sub_type`, `legal_identifier`, `external_identifier`, `sort_name`, `display_name`, `image_URL`, `preferred_communication_method`, `preferred_mail_format`, `do_not_trade`, `hash`, `is_opt_out`, `id`, `source`, `first_name`, `middle_name`, `last_name`, `prefix_id`, `suffix_id`, `formal_title`, `communication_style_id`, `email_greeting_id`, `email_greeting_custom`, `email_greeting_display`, `postal_greeting_id`, `postal_greeting_custom`, `postal_greeting_display`, `addressee_id`, `addressee_custom`, `addressee_display`, `job_title`, `gender_id`, `birth_date`, `is_deceased`, `deceased_date`, `household_name`, `primary_contact_id`, `organization_name`, `sic_code`, `user_unique_id`, `employer_id`, `api_key`, `is_deleted`, `preferred_language`, `created_date`, `modified_date`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`nick_name`, NEW.`legal_name`, NEW.`contact_type`, NEW.`do_not_email`, NEW.`do_not_phone`, NEW.`do_not_mail`, NEW.`do_not_sms`, NEW.`contact_sub_type`, NEW.`legal_identifier`, NEW.`external_identifier`, NEW.`sort_name`, NEW.`display_name`, NEW.`image_URL`, NEW.`preferred_communication_method`, NEW.`preferred_mail_format`, NEW.`do_not_trade`, NEW.`hash`, NEW.`is_opt_out`, NEW.`id`, NEW.`source`, NEW.`first_name`, NEW.`middle_name`, NEW.`last_name`, NEW.`prefix_id`, NEW.`suffix_id`, NEW.`formal_title`, NEW.`communication_style_id`, NEW.`email_greeting_id`, NEW.`email_greeting_custom`, NEW.`email_greeting_display`, NEW.`postal_greeting_id`, NEW.`postal_greeting_custom`, NEW.`postal_greeting_display`, NEW.`addressee_id`, NEW.`addressee_custom`, NEW.`addressee_display`, NEW.`job_title`, NEW.`gender_id`, NEW.`birth_date`, NEW.`is_deceased`, NEW.`deceased_date`, NEW.`household_name`, NEW.`primary_contact_id`, NEW.`organization_name`, NEW.`sic_code`, NEW.`user_unique_id`, NEW.`employer_id`, NEW.`api_key`, NEW.`is_deleted`, NEW.`preferred_language`, NEW.`created_date`, NEW.`modified_date`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_contact_before_insert before insert ON civicrm_contact FOR EACH ROW BEGIN  
SET NEW.created_date = CURRENT_TIMESTAMP;
 END //

CREATE TRIGGER civicrm_contact_after_update after update ON civicrm_contact FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`nick_name`,'') <> IFNULL(NEW.`nick_name`,'') OR IFNULL(OLD.`legal_name`,'') <> IFNULL(NEW.`legal_name`,'') OR IFNULL(OLD.`contact_type`,'') <> IFNULL(NEW.`contact_type`,'') OR IFNULL(OLD.`do_not_email`,'') <> IFNULL(NEW.`do_not_email`,'') OR IFNULL(OLD.`do_not_phone`,'') <> IFNULL(NEW.`do_not_phone`,'') OR IFNULL(OLD.`do_not_mail`,'') <> IFNULL(NEW.`do_not_mail`,'') OR IFNULL(OLD.`do_not_sms`,'') <> IFNULL(NEW.`do_not_sms`,'') OR IFNULL(OLD.`contact_sub_type`,'') <> IFNULL(NEW.`contact_sub_type`,'') OR IFNULL(OLD.`legal_identifier`,'') <> IFNULL(NEW.`legal_identifier`,'') OR IFNULL(OLD.`external_identifier`,'') <> IFNULL(NEW.`external_identifier`,'') OR IFNULL(OLD.`sort_name`,'') <> IFNULL(NEW.`sort_name`,'') OR IFNULL(OLD.`display_name`,'') <> IFNULL(NEW.`display_name`,'') OR IFNULL(OLD.`image_URL`,'') <> IFNULL(NEW.`image_URL`,'') OR IFNULL(OLD.`preferred_communication_method`,'') <> IFNULL(NEW.`preferred_communication_method`,'') OR IFNULL(OLD.`preferred_mail_format`,'') <> IFNULL(NEW.`preferred_mail_format`,'') OR IFNULL(OLD.`do_not_trade`,'') <> IFNULL(NEW.`do_not_trade`,'') OR IFNULL(OLD.`hash`,'') <> IFNULL(NEW.`hash`,'') OR IFNULL(OLD.`is_opt_out`,'') <> IFNULL(NEW.`is_opt_out`,'') OR IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`source`,'') <> IFNULL(NEW.`source`,'') OR IFNULL(OLD.`first_name`,'') <> IFNULL(NEW.`first_name`,'') OR IFNULL(OLD.`middle_name`,'') <> IFNULL(NEW.`middle_name`,'') OR IFNULL(OLD.`last_name`,'') <> IFNULL(NEW.`last_name`,'') OR IFNULL(OLD.`prefix_id`,'') <> IFNULL(NEW.`prefix_id`,'') OR IFNULL(OLD.`suffix_id`,'') <> IFNULL(NEW.`suffix_id`,'') OR IFNULL(OLD.`formal_title`,'') <> IFNULL(NEW.`formal_title`,'') OR IFNULL(OLD.`communication_style_id`,'') <> IFNULL(NEW.`communication_style_id`,'') OR IFNULL(OLD.`email_greeting_id`,'') <> IFNULL(NEW.`email_greeting_id`,'') OR IFNULL(OLD.`email_greeting_custom`,'') <> IFNULL(NEW.`email_greeting_custom`,'') OR IFNULL(OLD.`email_greeting_display`,'') <> IFNULL(NEW.`email_greeting_display`,'') OR IFNULL(OLD.`postal_greeting_id`,'') <> IFNULL(NEW.`postal_greeting_id`,'') OR IFNULL(OLD.`postal_greeting_custom`,'') <> IFNULL(NEW.`postal_greeting_custom`,'') OR IFNULL(OLD.`postal_greeting_display`,'') <> IFNULL(NEW.`postal_greeting_display`,'') OR IFNULL(OLD.`addressee_id`,'') <> IFNULL(NEW.`addressee_id`,'') OR IFNULL(OLD.`addressee_custom`,'') <> IFNULL(NEW.`addressee_custom`,'') OR IFNULL(OLD.`addressee_display`,'') <> IFNULL(NEW.`addressee_display`,'') OR IFNULL(OLD.`job_title`,'') <> IFNULL(NEW.`job_title`,'') OR IFNULL(OLD.`gender_id`,'') <> IFNULL(NEW.`gender_id`,'') OR IFNULL(OLD.`birth_date`,'') <> IFNULL(NEW.`birth_date`,'') OR IFNULL(OLD.`is_deceased`,'') <> IFNULL(NEW.`is_deceased`,'') OR IFNULL(OLD.`deceased_date`,'') <> IFNULL(NEW.`deceased_date`,'') OR IFNULL(OLD.`household_name`,'') <> IFNULL(NEW.`household_name`,'') OR IFNULL(OLD.`primary_contact_id`,'') <> IFNULL(NEW.`primary_contact_id`,'') OR IFNULL(OLD.`organization_name`,'') <> IFNULL(NEW.`organization_name`,'') OR IFNULL(OLD.`sic_code`,'') <> IFNULL(NEW.`sic_code`,'') OR IFNULL(OLD.`user_unique_id`,'') <> IFNULL(NEW.`user_unique_id`,'') OR IFNULL(OLD.`employer_id`,'') <> IFNULL(NEW.`employer_id`,'') OR IFNULL(OLD.`api_key`,'') <> IFNULL(NEW.`api_key`,'') OR IFNULL(OLD.`is_deleted`,'') <> IFNULL(NEW.`is_deleted`,'') OR IFNULL(OLD.`preferred_language`,'') <> IFNULL(NEW.`preferred_language`,'') OR IFNULL(OLD.`created_date`,'') <> IFNULL(NEW.`created_date`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_contact (`nick_name`, `legal_name`, `contact_type`, `do_not_email`, `do_not_phone`, `do_not_mail`, `do_not_sms`, `contact_sub_type`, `legal_identifier`, `external_identifier`, `sort_name`, `display_name`, `image_URL`, `preferred_communication_method`, `preferred_mail_format`, `do_not_trade`, `hash`, `is_opt_out`, `id`, `source`, `first_name`, `middle_name`, `last_name`, `prefix_id`, `suffix_id`, `formal_title`, `communication_style_id`, `email_greeting_id`, `email_greeting_custom`, `email_greeting_display`, `postal_greeting_id`, `postal_greeting_custom`, `postal_greeting_display`, `addressee_id`, `addressee_custom`, `addressee_display`, `job_title`, `gender_id`, `birth_date`, `is_deceased`, `deceased_date`, `household_name`, `primary_contact_id`, `organization_name`, `sic_code`, `user_unique_id`, `employer_id`, `api_key`, `is_deleted`, `preferred_language`, `created_date`, `modified_date`, log_conn_id, log_user_id, log_action) VALUES (NEW.`nick_name`, NEW.`legal_name`, NEW.`contact_type`, NEW.`do_not_email`, NEW.`do_not_phone`, NEW.`do_not_mail`, NEW.`do_not_sms`, NEW.`contact_sub_type`, NEW.`legal_identifier`, NEW.`external_identifier`, NEW.`sort_name`, NEW.`display_name`, NEW.`image_URL`, NEW.`preferred_communication_method`, NEW.`preferred_mail_format`, NEW.`do_not_trade`, NEW.`hash`, NEW.`is_opt_out`, NEW.`id`, NEW.`source`, NEW.`first_name`, NEW.`middle_name`, NEW.`last_name`, NEW.`prefix_id`, NEW.`suffix_id`, NEW.`formal_title`, NEW.`communication_style_id`, NEW.`email_greeting_id`, NEW.`email_greeting_custom`, NEW.`email_greeting_display`, NEW.`postal_greeting_id`, NEW.`postal_greeting_custom`, NEW.`postal_greeting_display`, NEW.`addressee_id`, NEW.`addressee_custom`, NEW.`addressee_display`, NEW.`job_title`, NEW.`gender_id`, NEW.`birth_date`, NEW.`is_deceased`, NEW.`deceased_date`, NEW.`household_name`, NEW.`primary_contact_id`, NEW.`organization_name`, NEW.`sic_code`, NEW.`user_unique_id`, NEW.`employer_id`, NEW.`api_key`, NEW.`is_deleted`, NEW.`preferred_language`, NEW.`created_date`, NEW.`modified_date`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_contact_after_delete after delete ON civicrm_contact FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_contact (`nick_name`, `legal_name`, `contact_type`, `do_not_email`, `do_not_phone`, `do_not_mail`, `do_not_sms`, `contact_sub_type`, `legal_identifier`, `external_identifier`, `sort_name`, `display_name`, `image_URL`, `preferred_communication_method`, `preferred_mail_format`, `do_not_trade`, `hash`, `is_opt_out`, `id`, `source`, `first_name`, `middle_name`, `last_name`, `prefix_id`, `suffix_id`, `formal_title`, `communication_style_id`, `email_greeting_id`, `email_greeting_custom`, `email_greeting_display`, `postal_greeting_id`, `postal_greeting_custom`, `postal_greeting_display`, `addressee_id`, `addressee_custom`, `addressee_display`, `job_title`, `gender_id`, `birth_date`, `is_deceased`, `deceased_date`, `household_name`, `primary_contact_id`, `organization_name`, `sic_code`, `user_unique_id`, `employer_id`, `api_key`, `is_deleted`, `preferred_language`, `created_date`, `modified_date`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`nick_name`, OLD.`legal_name`, OLD.`contact_type`, OLD.`do_not_email`, OLD.`do_not_phone`, OLD.`do_not_mail`, OLD.`do_not_sms`, OLD.`contact_sub_type`, OLD.`legal_identifier`, OLD.`external_identifier`, OLD.`sort_name`, OLD.`display_name`, OLD.`image_URL`, OLD.`preferred_communication_method`, OLD.`preferred_mail_format`, OLD.`do_not_trade`, OLD.`hash`, OLD.`is_opt_out`, OLD.`id`, OLD.`source`, OLD.`first_name`, OLD.`middle_name`, OLD.`last_name`, OLD.`prefix_id`, OLD.`suffix_id`, OLD.`formal_title`, OLD.`communication_style_id`, OLD.`email_greeting_id`, OLD.`email_greeting_custom`, OLD.`email_greeting_display`, OLD.`postal_greeting_id`, OLD.`postal_greeting_custom`, OLD.`postal_greeting_display`, OLD.`addressee_id`, OLD.`addressee_custom`, OLD.`addressee_display`, OLD.`job_title`, OLD.`gender_id`, OLD.`birth_date`, OLD.`is_deceased`, OLD.`deceased_date`, OLD.`household_name`, OLD.`primary_contact_id`, OLD.`organization_name`, OLD.`sic_code`, OLD.`user_unique_id`, OLD.`employer_id`, OLD.`api_key`, OLD.`is_deleted`, OLD.`preferred_language`, OLD.`created_date`, OLD.`modified_date`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_contact_layout_after_insert after insert ON civicrm_contact_layout FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_contact_layout (`id`, `label`, `contact_type`, `contact_sub_type`, `groups`, `weight`, `blocks`, `tabs`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`label`, NEW.`contact_type`, NEW.`contact_sub_type`, NEW.`groups`, NEW.`weight`, NEW.`blocks`, NEW.`tabs`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_contact_layout_after_update after update ON civicrm_contact_layout FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`label`,'') <> IFNULL(NEW.`label`,'') OR IFNULL(OLD.`contact_type`,'') <> IFNULL(NEW.`contact_type`,'') OR IFNULL(OLD.`contact_sub_type`,'') <> IFNULL(NEW.`contact_sub_type`,'') OR IFNULL(OLD.`groups`,'') <> IFNULL(NEW.`groups`,'') OR IFNULL(OLD.`weight`,'') <> IFNULL(NEW.`weight`,'') OR IFNULL(OLD.`blocks`,'') <> IFNULL(NEW.`blocks`,'') OR IFNULL(OLD.`tabs`,'') <> IFNULL(NEW.`tabs`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_contact_layout (`id`, `label`, `contact_type`, `contact_sub_type`, `groups`, `weight`, `blocks`, `tabs`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`label`, NEW.`contact_type`, NEW.`contact_sub_type`, NEW.`groups`, NEW.`weight`, NEW.`blocks`, NEW.`tabs`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_contact_layout_after_delete after delete ON civicrm_contact_layout FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_contact_layout (`id`, `label`, `contact_type`, `contact_sub_type`, `groups`, `weight`, `blocks`, `tabs`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`label`, OLD.`contact_type`, OLD.`contact_sub_type`, OLD.`groups`, OLD.`weight`, OLD.`blocks`, OLD.`tabs`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_contact_name_pair_after_insert after insert ON civicrm_contact_name_pair FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_contact_name_pair (`id`, `name_a`, `name_b`, `is_name_b_nickname`, `is_name_b_inferior`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`name_a`, NEW.`name_b`, NEW.`is_name_b_nickname`, NEW.`is_name_b_inferior`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_contact_name_pair_after_update after update ON civicrm_contact_name_pair FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`name_a`,'') <> IFNULL(NEW.`name_a`,'') OR IFNULL(OLD.`name_b`,'') <> IFNULL(NEW.`name_b`,'') OR IFNULL(OLD.`is_name_b_nickname`,'') <> IFNULL(NEW.`is_name_b_nickname`,'') OR IFNULL(OLD.`is_name_b_inferior`,'') <> IFNULL(NEW.`is_name_b_inferior`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_contact_name_pair (`id`, `name_a`, `name_b`, `is_name_b_nickname`, `is_name_b_inferior`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`name_a`, NEW.`name_b`, NEW.`is_name_b_nickname`, NEW.`is_name_b_inferior`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_contact_name_pair_after_delete after delete ON civicrm_contact_name_pair FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_contact_name_pair (`id`, `name_a`, `name_b`, `is_name_b_nickname`, `is_name_b_inferior`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`name_a`, OLD.`name_b`, OLD.`is_name_b_nickname`, OLD.`is_name_b_inferior`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_contact_name_pair_family_after_insert after insert ON civicrm_contact_name_pair_family FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_contact_name_pair_family (`id`, `name_a`, `name_b`, `is_most_common_form`, `is_active`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`name_a`, NEW.`name_b`, NEW.`is_most_common_form`, NEW.`is_active`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_contact_name_pair_family_after_update after update ON civicrm_contact_name_pair_family FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`name_a`,'') <> IFNULL(NEW.`name_a`,'') OR IFNULL(OLD.`name_b`,'') <> IFNULL(NEW.`name_b`,'') OR IFNULL(OLD.`is_most_common_form`,'') <> IFNULL(NEW.`is_most_common_form`,'') OR IFNULL(OLD.`is_active`,'') <> IFNULL(NEW.`is_active`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_contact_name_pair_family (`id`, `name_a`, `name_b`, `is_most_common_form`, `is_active`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`name_a`, NEW.`name_b`, NEW.`is_most_common_form`, NEW.`is_active`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_contact_name_pair_family_after_delete after delete ON civicrm_contact_name_pair_family FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_contact_name_pair_family (`id`, `name_a`, `name_b`, `is_most_common_form`, `is_active`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`name_a`, OLD.`name_b`, OLD.`is_most_common_form`, OLD.`is_active`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_contact_type_after_insert after insert ON civicrm_contact_type FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_contact_type (`id`, `name`, `label`, `description`, `image_URL`, `parent_id`, `is_active`, `is_reserved`, `icon`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`name`, NEW.`label`, NEW.`description`, NEW.`image_URL`, NEW.`parent_id`, NEW.`is_active`, NEW.`is_reserved`, NEW.`icon`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_contact_type_after_update after update ON civicrm_contact_type FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`name`,'') <> IFNULL(NEW.`name`,'') OR IFNULL(OLD.`label`,'') <> IFNULL(NEW.`label`,'') OR IFNULL(OLD.`description`,'') <> IFNULL(NEW.`description`,'') OR IFNULL(OLD.`image_URL`,'') <> IFNULL(NEW.`image_URL`,'') OR IFNULL(OLD.`parent_id`,'') <> IFNULL(NEW.`parent_id`,'') OR IFNULL(OLD.`is_active`,'') <> IFNULL(NEW.`is_active`,'') OR IFNULL(OLD.`is_reserved`,'') <> IFNULL(NEW.`is_reserved`,'') OR IFNULL(OLD.`icon`,'') <> IFNULL(NEW.`icon`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_contact_type (`id`, `name`, `label`, `description`, `image_URL`, `parent_id`, `is_active`, `is_reserved`, `icon`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`name`, NEW.`label`, NEW.`description`, NEW.`image_URL`, NEW.`parent_id`, NEW.`is_active`, NEW.`is_reserved`, NEW.`icon`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_contact_type_after_delete after delete ON civicrm_contact_type FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_contact_type (`id`, `name`, `label`, `description`, `image_URL`, `parent_id`, `is_active`, `is_reserved`, `icon`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`name`, OLD.`label`, OLD.`description`, OLD.`image_URL`, OLD.`parent_id`, OLD.`is_active`, OLD.`is_reserved`, OLD.`icon`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_contribution_after_insert after insert ON civicrm_contribution FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_contribution (`id`, `contact_id`, `financial_type_id`, `contribution_page_id`, `payment_instrument_id`, `receive_date`, `non_deductible_amount`, `total_amount`, `fee_amount`, `net_amount`, `trxn_id`, `invoice_id`, `currency`, `cancel_date`, `cancel_reason`, `receipt_date`, `thankyou_date`, `source`, `amount_level`, `contribution_recur_id`, `is_test`, `is_pay_later`, `contribution_status_id`, `note`, `address_id`, `check_number`, `campaign_id`, `tax_amount`, `creditnote_id`, `revenue_recognition_date`, `invoice_number`, `is_template`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`contact_id`, NEW.`financial_type_id`, NEW.`contribution_page_id`, NEW.`payment_instrument_id`, NEW.`receive_date`, NEW.`non_deductible_amount`, NEW.`total_amount`, NEW.`fee_amount`, NEW.`net_amount`, NEW.`trxn_id`, NEW.`invoice_id`, NEW.`currency`, NEW.`cancel_date`, NEW.`cancel_reason`, NEW.`receipt_date`, NEW.`thankyou_date`, NEW.`source`, NEW.`amount_level`, NEW.`contribution_recur_id`, NEW.`is_test`, NEW.`is_pay_later`, NEW.`contribution_status_id`, NEW.`note`, NEW.`address_id`, NEW.`check_number`, NEW.`campaign_id`, NEW.`tax_amount`, NEW.`creditnote_id`, NEW.`revenue_recognition_date`, NEW.`invoice_number`, NEW.`is_template`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF;
 IF 1 AND (NEW.contact_id NOT IN (2123835,19855599,12513,72)) THEN
      INSERT INTO wmf_donor (
        entity_id, donor_segment_id, donor_status_id, last_donation_currency, last_donation_amount, last_donation_usd, first_donation_usd, date_of_largest_donation, largest_donation, endowment_largest_donation, all_funds_largest_donation, lifetime_including_endowment, lifetime_usd_total, endowment_lifetime_usd_total, last_donation_date, endowment_last_donation_date, all_funds_last_donation_date, first_donation_date, endowment_first_donation_date, all_funds_first_donation_date, number_donations, endowment_number_donations, all_funds_number_donations, total_2017_2018, total_2018_2019, endowment_total_2018_2019, all_funds_total_2018_2019, total_2019_2020, endowment_total_2019_2020, all_funds_total_2019_2020, total_2020_2021, endowment_total_2020_2021, all_funds_total_2020_2021, total_2021_2022, endowment_total_2021_2022, all_funds_total_2021_2022, total_2022_2023, endowment_total_2022_2023, all_funds_total_2022_2023, all_funds_change_2022_2023, endowment_change_2022_2023, change_2022_2023, total_2023_2024, total_2023, endowment_total_2023_2024, endowment_total_2023, all_funds_total_2023_2024, all_funds_change_2023_2024, endowment_change_2023_2024, change_2023_2024, total_2024_2025, total_2024, endowment_total_2024_2025, endowment_total_2024, all_funds_total_2024_2025, all_funds_change_2024_2025, endowment_change_2024_2025, change_2024_2025, total_2025_2026, total_2025, endowment_total_2025_2026, endowment_total_2025, all_funds_total_2025_2026, all_funds_change_2025_2026, endowment_change_2025_2026, change_2025_2026
      )SELECT
       NEW.contact_id as entity_id , # to honour FULL_GROUP_BY mysql mode we need an aggregate command for each
 # field - even though we know we just want `the value from the subquery`
 # MAX is a safe wrapper for that
 # https://www.percona.com/blog/2019/05/13/solve-query-failures-regarding-only_full_group_by-sql-mode/
 MAX(donor_segment_id) as donor_segment_id, MAX(donor_status_id) as donor_status_id, MAX(COALESCE(x.original_currency,
 latest.currency)) as last_donation_currency, MAX(COALESCE(x.original_amount,
 latest.total_amount,
 0)) as last_donation_amount, MAX(COALESCE(latest.total_amount,
 0)) as last_donation_usd, MAX(COALESCE(earliest.total_amount,
 0)) as first_donation_usd, MAX(largest.receive_date) as date_of_largest_donation, MAX(largest_donation) as largest_donation, MAX(endowment_largest_donation) as endowment_largest_donation, MAX(all_funds_largest_donation) as all_funds_largest_donation, MAX(lifetime_including_endowment) as lifetime_including_endowment, MAX(lifetime_usd_total) as lifetime_usd_total, MAX(endowment_lifetime_usd_total) as endowment_lifetime_usd_total, MAX(last_donation_date) as last_donation_date, MAX(endowment_last_donation_date) as endowment_last_donation_date, MAX(all_funds_last_donation_date) as all_funds_last_donation_date, MIN(first_donation_date) as first_donation_date, MIN(endowment_first_donation_date) as endowment_first_donation_date, MIN(all_funds_first_donation_date) as all_funds_first_donation_date, MAX(number_donations) as number_donations, MAX(endowment_number_donations) as endowment_number_donations, MAX(all_funds_number_donations) as all_funds_number_donations, MAX(total_2017_2018) as total_2017_2018, MAX(total_2018_2019) as total_2018_2019, MAX(endowment_total_2018_2019) as endowment_total_2018_2019, MAX(all_funds_total_2018_2019) as all_funds_total_2018_2019, MAX(total_2019_2020) as total_2019_2020, MAX(endowment_total_2019_2020) as endowment_total_2019_2020, MAX(all_funds_total_2019_2020) as all_funds_total_2019_2020, MAX(total_2020_2021) as total_2020_2021, MAX(endowment_total_2020_2021) as endowment_total_2020_2021, MAX(all_funds_total_2020_2021) as all_funds_total_2020_2021, MAX(total_2021_2022) as total_2021_2022, MAX(endowment_total_2021_2022) as endowment_total_2021_2022, MAX(all_funds_total_2021_2022) as all_funds_total_2021_2022, MAX(total_2022_2023) as total_2022_2023, MAX(endowment_total_2022_2023) as endowment_total_2022_2023, MAX(all_funds_total_2022_2023) as all_funds_total_2022_2023, MAX(all_funds_change_2022_2023) as all_funds_change_2022_2023, MAX(endowment_change_2022_2023) as endowment_change_2022_2023, MAX(change_2022_2023) as change_2022_2023, MAX(total_2023_2024) as total_2023_2024, MAX(total_2023) as total_2023, MAX(endowment_total_2023_2024) as endowment_total_2023_2024, MAX(endowment_total_2023) as endowment_total_2023, MAX(all_funds_total_2023_2024) as all_funds_total_2023_2024, MAX(all_funds_change_2023_2024) as all_funds_change_2023_2024, MAX(endowment_change_2023_2024) as endowment_change_2023_2024, MAX(change_2023_2024) as change_2023_2024, MAX(total_2024_2025) as total_2024_2025, MAX(total_2024) as total_2024, MAX(endowment_total_2024_2025) as endowment_total_2024_2025, MAX(endowment_total_2024) as endowment_total_2024, MAX(all_funds_total_2024_2025) as all_funds_total_2024_2025, MAX(all_funds_change_2024_2025) as all_funds_change_2024_2025, MAX(endowment_change_2024_2025) as endowment_change_2024_2025, MAX(change_2024_2025) as change_2024_2025, MAX(total_2025_2026) as total_2025_2026, MAX(total_2025) as total_2025, MAX(endowment_total_2025_2026) as endowment_total_2025_2026, MAX(endowment_total_2025) as endowment_total_2025, MAX(all_funds_total_2025_2026) as all_funds_total_2025_2026, MAX(all_funds_change_2025_2026) as all_funds_change_2025_2026, MAX(endowment_change_2025_2026) as endowment_change_2025_2026, MAX(change_2025_2026) as change_2025_2026

    FROM (
      SELECT
  CASE 

         WHEN (
         --  Major Donor  has given 10,000+ in one of the past 5 financial years, or in the current financial year so far
         SUM(COALESCE(IF( receive_date
      BETWEEN ('2024-07-01 00:00:00') AND ('2025-06-30 23:59:59.9999')
      , total_amount, 0), 0)) >= 10000 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2023-07-01 00:00:00') AND ('2024-06-30 23:59:59')
      , total_amount, 0), 0)) >= 10000 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2022-07-01 00:00:00') AND ('2023-06-30 23:59:59')
      , total_amount, 0), 0)) >= 10000 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2021-07-01 00:00:00') AND ('2022-06-30 23:59:59')
      , total_amount, 0), 0)) >= 10000 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2020-07-01 00:00:00') AND ('2021-06-30 23:59:59')
      , total_amount, 0), 0)) >= 10000 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2019-07-01 00:00:00') AND ('2020-06-30 23:59:59')
      , total_amount, 0), 0)) >= 10000

        ) THEN 100


         WHEN (
         --  Mid Tier  has given 1,000+  in one of the past 5 financial years, or in the current financial year so far
         SUM(COALESCE(IF( receive_date
      BETWEEN ('2024-07-01 00:00:00') AND ('2025-06-30 23:59:59.9999')
      , total_amount, 0), 0)) >= 1000 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2023-07-01 00:00:00') AND ('2024-06-30 23:59:59')
      , total_amount, 0), 0)) >= 1000 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2022-07-01 00:00:00') AND ('2023-06-30 23:59:59')
      , total_amount, 0), 0)) >= 1000 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2021-07-01 00:00:00') AND ('2022-06-30 23:59:59')
      , total_amount, 0), 0)) >= 1000 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2020-07-01 00:00:00') AND ('2021-06-30 23:59:59')
      , total_amount, 0), 0)) >= 1000 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2019-07-01 00:00:00') AND ('2020-06-30 23:59:59')
      , total_amount, 0), 0)) >= 1000

        ) THEN 200


         WHEN (
         --  Mid-Value Prospect  has given 250+ in one of the past 5 financial years, or in the current financial year so far
         SUM(COALESCE(IF( receive_date
      BETWEEN ('2024-07-01 00:00:00') AND ('2025-06-30 23:59:59.9999')
      , total_amount, 0), 0)) >= 250 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2023-07-01 00:00:00') AND ('2024-06-30 23:59:59')
      , total_amount, 0), 0)) >= 250 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2022-07-01 00:00:00') AND ('2023-06-30 23:59:59')
      , total_amount, 0), 0)) >= 250 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2021-07-01 00:00:00') AND ('2022-06-30 23:59:59')
      , total_amount, 0), 0)) >= 250 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2020-07-01 00:00:00') AND ('2021-06-30 23:59:59')
      , total_amount, 0), 0)) >= 250 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2019-07-01 00:00:00') AND ('2020-06-30 23:59:59')
      , total_amount, 0), 0)) >= 250

        ) THEN 300


         WHEN (
         --  Recurring donor  has made a recurring donation in last 36 months
         SUM(COALESCE(IF(contribution_recur_id IS NOT NULL AND  receive_date
      BETWEEN (IF (NOW() < '2025-06-30 23:59:59.9999', NOW() - INTERVAL 36 MONTH, '2025-06-30 23:59:59.9999' - INTERVAL 36 MONTH)) AND ('2025-06-30 23:59:59.9999')
      , total_amount, 0), 0)) >= 0.01

        ) THEN 400


         WHEN (
         --  Grassroots Plus Donor  has given 50+  in one of the past 5 financial years, or in the current financial year so far
         SUM(COALESCE(IF( receive_date
      BETWEEN ('2024-07-01 00:00:00') AND ('2025-06-30 23:59:59.9999')
      , total_amount, 0), 0)) >= 50 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2023-07-01 00:00:00') AND ('2024-06-30 23:59:59')
      , total_amount, 0), 0)) >= 50 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2022-07-01 00:00:00') AND ('2023-06-30 23:59:59')
      , total_amount, 0), 0)) >= 50 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2021-07-01 00:00:00') AND ('2022-06-30 23:59:59')
      , total_amount, 0), 0)) >= 50 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2020-07-01 00:00:00') AND ('2021-06-30 23:59:59')
      , total_amount, 0), 0)) >= 50 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2019-07-01 00:00:00') AND ('2020-06-30 23:59:59')
      , total_amount, 0), 0)) >= 50

        ) THEN 500


         WHEN (
         --  Grassroots Donor  has given in the last 5 financial years (or the current one)
         SUM(COALESCE(IF( receive_date
      BETWEEN ('2019-07-01 00:00:00') AND ('2025-06-30 23:59:59.9999')
      , total_amount, 0), 0)) >= 0.01

        ) THEN 600


         WHEN (
         --  All other Donors  has given but not in the last 5 financial years (or the current one)
         SUM(COALESCE(IF( receive_date
      BETWEEN (IF (NOW() < '2025-06-30 23:59:59.9999', NOW() - INTERVAL 300 MONTH, '2025-06-30 23:59:59.9999' - INTERVAL 300 MONTH)) AND ('2025-06-30 23:59:59.9999')
      , total_amount, 0), 0)) >= 0.01

        ) THEN 900

       ELSE 1000
       END  as donor_segment_id, 
CASE

         WHEN (
         --  Active Recurring  gave recurring within last month
         SUM(COALESCE(IF(contribution_recur_id IS NOT NULL AND  receive_date
      BETWEEN (IF (NOW() < '2025-06-30 23:59:59.9999', NOW() - INTERVAL 1 MONTH, '2025-06-30 23:59:59.9999' - INTERVAL 1 MONTH)) AND ('2025-06-30 23:59:59.9999')
      , total_amount, 0), 0)) >= 0.01 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2024-07-01 00:00:00') AND ('2025-06-30 23:59:59.9999')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2023-07-01 00:00:00') AND ('2024-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2022-07-01 00:00:00') AND ('2023-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2021-07-01 00:00:00') AND ('2022-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2020-07-01 00:00:00') AND ('2021-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2019-07-01 00:00:00') AND ('2020-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000

        ) THEN 2


         WHEN (
         --  Delinquent Recurring  gave recurring more than 1 month & less than 4 months ago
         SUM(COALESCE(IF(contribution_recur_id IS NOT NULL AND  receive_date
      BETWEEN (IF (NOW() < '2025-06-30 23:59:59.9999', NOW() - INTERVAL 3 MONTH, '2025-06-30 23:59:59.9999' - INTERVAL 3 MONTH)) AND (IF (NOW() < '2025-06-30 23:59:59.9999', NOW() - INTERVAL 1 MONTH, '2025-06-30 23:59:59.9999' - INTERVAL 1 MONTH))
      , total_amount, 0), 0)) >= 0.01 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2024-07-01 00:00:00') AND ('2025-06-30 23:59:59.9999')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2023-07-01 00:00:00') AND ('2024-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2022-07-01 00:00:00') AND ('2023-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2021-07-01 00:00:00') AND ('2022-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2020-07-01 00:00:00') AND ('2021-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2019-07-01 00:00:00') AND ('2020-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000

        ) THEN 4


         WHEN (
         --  Recent lapsed Recurring  gave recurring more than 3 months & less than 7 months ago
         SUM(COALESCE(IF(contribution_recur_id IS NOT NULL AND  receive_date
      BETWEEN (IF (NOW() < '2025-06-30 23:59:59.9999', NOW() - INTERVAL 6 MONTH, '2025-06-30 23:59:59.9999' - INTERVAL 6 MONTH)) AND (IF (NOW() < '2025-06-30 23:59:59.9999', NOW() - INTERVAL 3 MONTH, '2025-06-30 23:59:59.9999' - INTERVAL 3 MONTH))
      , total_amount, 0), 0)) >= 0.01 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2024-07-01 00:00:00') AND ('2025-06-30 23:59:59.9999')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2023-07-01 00:00:00') AND ('2024-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2022-07-01 00:00:00') AND ('2023-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2021-07-01 00:00:00') AND ('2022-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2020-07-01 00:00:00') AND ('2021-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2019-07-01 00:00:00') AND ('2020-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000

        ) THEN 6


         WHEN (
         --  Deep lapsed Recurring  gave recurring more than 6 months & less than 37 months ago
         SUM(COALESCE(IF(contribution_recur_id IS NOT NULL AND  receive_date
      BETWEEN (IF (NOW() < '2025-06-30 23:59:59.9999', NOW() - INTERVAL 36 MONTH, '2025-06-30 23:59:59.9999' - INTERVAL 36 MONTH)) AND (IF (NOW() < '2025-06-30 23:59:59.9999', NOW() - INTERVAL 6 MONTH, '2025-06-30 23:59:59.9999' - INTERVAL 6 MONTH))
      , total_amount, 0), 0)) >= 0.01 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2024-07-01 00:00:00') AND ('2025-06-30 23:59:59.9999')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2023-07-01 00:00:00') AND ('2024-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2022-07-01 00:00:00') AND ('2023-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2021-07-01 00:00:00') AND ('2022-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2020-07-01 00:00:00') AND ('2021-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2019-07-01 00:00:00') AND ('2020-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000

        ) THEN 8


         WHEN (
         --  Consecutive  gave last financial year and this financial year to date
         SUM(COALESCE(IF( receive_date
      BETWEEN ('2024-07-01 00:00:00') AND ('2025-06-30 23:59:59.9999')
      , total_amount, 0), 0)) >= 0.01 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2023-07-01 00:00:00') AND ('2024-06-30 23:59:59')
      , total_amount, 0), 0)) >= 0.01

        ) THEN 20


         WHEN (
         --  New  first donation this FY
         MIN(COALESCE(IF( receive_date
      BETWEEN ('2024-07-01 00:00:00') AND ('2025-06-30 23:59:59.9999')
      , total_amount, 0), 0)) >= 0.01

        ) THEN 25


         WHEN (
         --  Active  gave in this FY
         SUM(COALESCE(IF( receive_date
      BETWEEN ('2024-07-01 00:00:00') AND ('2025-06-30 23:59:59.9999')
      , total_amount, 0), 0)) >= 0.01

        ) THEN 30


         WHEN (
         --  Lybunt  gave last financial year but NOT this financial year to date
         SUM(COALESCE(IF( receive_date
      BETWEEN ('2023-07-01 00:00:00') AND ('2024-06-30 23:59:59')
      , total_amount, 0), 0)) >= 0.01

        ) THEN 35


         WHEN (
         --  Lapsed  last gave in the financial year before last
         SUM(COALESCE(IF( receive_date
      BETWEEN ('2022-07-01 00:00:00') AND ('2023-06-30 23:59:59')
      , total_amount, 0), 0)) >= 0.01

        ) THEN 50


         WHEN (
         --  Deep Lapsed  last gave between 2 & 5 financial years ago
         SUM(COALESCE(IF( receive_date
      BETWEEN ('2019-07-01 00:00:00') AND ('2022-07-01 00:00:00')
      , total_amount, 0), 0)) >= 0.01

        ) THEN 60


         WHEN (
         --  Ultra lapsed  gave prior to 5 financial years ago
         SUM(COALESCE(IF( receive_date
      BETWEEN ('2000-06-30 23:59:59') AND ('2019-06-30 23:59:59')
      , total_amount, 0), 0)) >= 0.01

        ) THEN 70

       ELSE 1000
       END  as donor_status_id, MAX(IF(financial_type_id <> 26, COALESCE(total_amount, 0), 0)) AS largest_donation, MAX(IF(financial_type_id = 26, COALESCE(total_amount, 0), 0)) AS endowment_largest_donation, MAX(COALESCE(total_amount, 0)) AS all_funds_largest_donation, SUM(COALESCE(total_amount, 0)) AS lifetime_including_endowment, SUM(IF(financial_type_id <> 26, COALESCE(total_amount, 0), 0)) AS lifetime_usd_total, SUM(IF(financial_type_id = 26, COALESCE(total_amount, 0), 0)) AS endowment_lifetime_usd_total, MAX(IF(financial_type_id <> 26 AND total_amount > 0, receive_date, NULL)) AS last_donation_date, MAX(IF(financial_type_id = 26 AND total_amount > 0, receive_date, NULL)) AS endowment_last_donation_date, MAX(IF(total_amount > 0, receive_date, NULL)) AS all_funds_last_donation_date, MIN(IF(financial_type_id <> 26 AND total_amount > 0, receive_date, NULL)) AS first_donation_date, MIN(IF(financial_type_id = 26 AND total_amount > 0, receive_date, NULL)) AS endowment_first_donation_date, MIN(IF(total_amount > 0, receive_date, NULL)) AS all_funds_first_donation_date, COUNT(IF(financial_type_id <> 26 AND total_amount > 0, receive_date, NULL)) AS number_donations, COUNT(IF(financial_type_id = 26 AND total_amount > 0, receive_date, NULL)) AS endowment_number_donations, COUNT(IF(total_amount > 0, receive_date, NULL)) AS all_funds_number_donations, SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2017-07-01' AND '2018-06-30 23:59:59', c.total_amount, 0),0)) as total_2017_2018, SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2018-07-01' AND '2019-06-30 23:59:59', c.total_amount, 0),0)) as total_2018_2019, SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2018-07-01' AND '2019-06-30 23:59:59', c.total_amount, 0),0)) as endowment_total_2018_2019, SUM(COALESCE(IF(receive_date BETWEEN '2018-07-01' AND '2019-06-30 23:59:59', c.total_amount, 0),0)) as all_funds_total_2018_2019, SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2019-07-01' AND '2020-06-30 23:59:59', c.total_amount, 0),0)) as total_2019_2020, SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2019-07-01' AND '2020-06-30 23:59:59', c.total_amount, 0),0)) as endowment_total_2019_2020, SUM(COALESCE(IF(receive_date BETWEEN '2019-07-01' AND '2020-06-30 23:59:59', c.total_amount, 0),0)) as all_funds_total_2019_2020, SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2020-07-01' AND '2021-06-30 23:59:59', c.total_amount, 0),0)) as total_2020_2021, SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2020-07-01' AND '2021-06-30 23:59:59', c.total_amount, 0),0)) as endowment_total_2020_2021, SUM(COALESCE(IF(receive_date BETWEEN '2020-07-01' AND '2021-06-30 23:59:59', c.total_amount, 0),0)) as all_funds_total_2020_2021, SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2021-07-01' AND '2022-06-30 23:59:59', c.total_amount, 0),0)) as total_2021_2022, SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2021-07-01' AND '2022-06-30 23:59:59', c.total_amount, 0),0)) as endowment_total_2021_2022, SUM(COALESCE(IF(receive_date BETWEEN '2021-07-01' AND '2022-06-30 23:59:59', c.total_amount, 0),0)) as all_funds_total_2021_2022, SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2022-07-01' AND '2023-06-30 23:59:59', c.total_amount, 0),0)) as total_2022_2023, SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2022-07-01' AND '2023-06-30 23:59:59', c.total_amount, 0),0)) as endowment_total_2022_2023, SUM(COALESCE(IF(receive_date BETWEEN '2022-07-01' AND '2023-06-30 23:59:59', c.total_amount, 0),0)) as all_funds_total_2022_2023, 
            SUM(COALESCE(IF(receive_date BETWEEN '2023-01-01' AND '2023-12-31 23:59:59', c.total_amount, 0),0))
            - SUM(COALESCE(IF(receive_date BETWEEN '2022-01-01' AND '2022-12-31 23:59:59', c.total_amount, 0),0))
             as all_funds_change_2022_2023, 
             SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2023-01-01' AND '2023-12-31 23:59:59', c.total_amount, 0),0))
            - SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2022-01-01' AND '2022-12-31 23:59:59', c.total_amount, 0),0))
             as endowment_change_2022_2023, 
            SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2023-01-01' AND '2023-12-31 23:59:59', c.total_amount, 0),0))
          - SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2022-01-01' AND '2022-12-31 23:59:59', c.total_amount, 0),0))
          as change_2022_2023, SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2023-07-01' AND '2024-06-30 23:59:59', c.total_amount, 0),0)) as total_2023_2024, SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2023-01-01' AND '2023-12-31 23:59:59', c.total_amount, 0),0)) as total_2023, SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2023-07-01' AND '2024-06-30 23:59:59', c.total_amount, 0),0)) as endowment_total_2023_2024, SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2023-01-01' AND '2023-12-31 23:59:59', c.total_amount, 0),0)) as endowment_total_2023, SUM(COALESCE(IF(receive_date BETWEEN '2023-07-01' AND '2024-06-30 23:59:59', c.total_amount, 0),0)) as all_funds_total_2023_2024, 
            SUM(COALESCE(IF(receive_date BETWEEN '2024-01-01' AND '2024-12-31 23:59:59', c.total_amount, 0),0))
            - SUM(COALESCE(IF(receive_date BETWEEN '2023-01-01' AND '2023-12-31 23:59:59', c.total_amount, 0),0))
             as all_funds_change_2023_2024, 
             SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2024-01-01' AND '2024-12-31 23:59:59', c.total_amount, 0),0))
            - SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2023-01-01' AND '2023-12-31 23:59:59', c.total_amount, 0),0))
             as endowment_change_2023_2024, 
            SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2024-01-01' AND '2024-12-31 23:59:59', c.total_amount, 0),0))
          - SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2023-01-01' AND '2023-12-31 23:59:59', c.total_amount, 0),0))
          as change_2023_2024, SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2024-07-01' AND '2025-06-30 23:59:59', c.total_amount, 0),0)) as total_2024_2025, SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2024-01-01' AND '2024-12-31 23:59:59', c.total_amount, 0),0)) as total_2024, SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2024-07-01' AND '2025-06-30 23:59:59', c.total_amount, 0),0)) as endowment_total_2024_2025, SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2024-01-01' AND '2024-12-31 23:59:59', c.total_amount, 0),0)) as endowment_total_2024, SUM(COALESCE(IF(receive_date BETWEEN '2024-07-01' AND '2025-06-30 23:59:59', c.total_amount, 0),0)) as all_funds_total_2024_2025, 
            SUM(COALESCE(IF(receive_date BETWEEN '2025-01-01' AND '2025-12-31 23:59:59', c.total_amount, 0),0))
            - SUM(COALESCE(IF(receive_date BETWEEN '2024-01-01' AND '2024-12-31 23:59:59', c.total_amount, 0),0))
             as all_funds_change_2024_2025, 
             SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2025-01-01' AND '2025-12-31 23:59:59', c.total_amount, 0),0))
            - SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2024-01-01' AND '2024-12-31 23:59:59', c.total_amount, 0),0))
             as endowment_change_2024_2025, 
            SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2025-01-01' AND '2025-12-31 23:59:59', c.total_amount, 0),0))
          - SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2024-01-01' AND '2024-12-31 23:59:59', c.total_amount, 0),0))
          as change_2024_2025, SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2025-07-01' AND '2026-06-30 23:59:59', c.total_amount, 0),0)) as total_2025_2026, SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2025-01-01' AND '2025-12-31 23:59:59', c.total_amount, 0),0)) as total_2025, SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2025-07-01' AND '2026-06-30 23:59:59', c.total_amount, 0),0)) as endowment_total_2025_2026, SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2025-01-01' AND '2025-12-31 23:59:59', c.total_amount, 0),0)) as endowment_total_2025, SUM(COALESCE(IF(receive_date BETWEEN '2025-07-01' AND '2026-06-30 23:59:59', c.total_amount, 0),0)) as all_funds_total_2025_2026, 
            SUM(COALESCE(IF(receive_date BETWEEN '2026-01-01' AND '2026-12-31 23:59:59', c.total_amount, 0),0))
            - SUM(COALESCE(IF(receive_date BETWEEN '2025-01-01' AND '2025-12-31 23:59:59', c.total_amount, 0),0))
             as all_funds_change_2025_2026, 
             SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2026-01-01' AND '2026-12-31 23:59:59', c.total_amount, 0),0))
            - SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2025-01-01' AND '2025-12-31 23:59:59', c.total_amount, 0),0))
             as endowment_change_2025_2026, 
            SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2026-01-01' AND '2026-12-31 23:59:59', c.total_amount, 0),0))
          - SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2025-01-01' AND '2025-12-31 23:59:59', c.total_amount, 0),0))
          as change_2025_2026
      FROM civicrm_contribution c
      USE INDEX(FK_civicrm_contribution_contact_id)
      WHERE  contact_id = NEW.contact_id 
        AND contribution_status_id = 1
        AND (c.trxn_id NOT LIKE 'RFD %' OR c.trxn_id IS NULL)
    ) as totals

  LEFT JOIN civicrm_contribution latest
    USE INDEX(FK_civicrm_contribution_contact_id)
    ON latest.contact_id =  NEW.contact_id
    AND latest.receive_date = totals.last_donation_date
    AND latest.contribution_status_id = 1
    AND latest.total_amount > 0
    AND (latest.trxn_id NOT LIKE 'RFD %' OR latest.trxn_id IS NULL)
    AND latest.financial_type_id <> 26
  LEFT JOIN wmf_contribution_extra x ON x.entity_id = latest.id

  LEFT JOIN civicrm_contribution earliest
    USE INDEX(FK_civicrm_contribution_contact_id)
    ON earliest.contact_id =  NEW.contact_id
    AND earliest.receive_date = totals.first_donation_date
    AND earliest.contribution_status_id = 1
    AND earliest.total_amount > 0
    AND (earliest.trxn_id NOT LIKE 'RFD %' OR earliest.trxn_id IS NULL)

  LEFT JOIN civicrm_contribution largest
    USE INDEX(FK_civicrm_contribution_contact_id)
    ON largest.contact_id =  NEW.contact_id 
    AND largest.total_amount = totals.largest_donation
    AND largest.contribution_status_id = 1
    AND largest.total_amount > 0
    AND (largest.trxn_id NOT LIKE 'RFD %' OR largest.trxn_id IS NULL) GROUP BY  NEW.contact_id
     ON DUPLICATE KEY UPDATE
    donor_segment_id = VALUES(donor_segment_id), donor_status_id = VALUES(donor_status_id), last_donation_currency = VALUES(last_donation_currency), last_donation_amount = VALUES(last_donation_amount), last_donation_usd = VALUES(last_donation_usd), first_donation_usd = VALUES(first_donation_usd), date_of_largest_donation = VALUES(date_of_largest_donation), largest_donation = VALUES(largest_donation), endowment_largest_donation = VALUES(endowment_largest_donation), all_funds_largest_donation = VALUES(all_funds_largest_donation), lifetime_including_endowment = VALUES(lifetime_including_endowment), lifetime_usd_total = VALUES(lifetime_usd_total), endowment_lifetime_usd_total = VALUES(endowment_lifetime_usd_total), last_donation_date = VALUES(last_donation_date), endowment_last_donation_date = VALUES(endowment_last_donation_date), all_funds_last_donation_date = VALUES(all_funds_last_donation_date), first_donation_date = VALUES(first_donation_date), endowment_first_donation_date = VALUES(endowment_first_donation_date), all_funds_first_donation_date = VALUES(all_funds_first_donation_date), number_donations = VALUES(number_donations), endowment_number_donations = VALUES(endowment_number_donations), all_funds_number_donations = VALUES(all_funds_number_donations), total_2017_2018 = VALUES(total_2017_2018), total_2018_2019 = VALUES(total_2018_2019), endowment_total_2018_2019 = VALUES(endowment_total_2018_2019), all_funds_total_2018_2019 = VALUES(all_funds_total_2018_2019), total_2019_2020 = VALUES(total_2019_2020), endowment_total_2019_2020 = VALUES(endowment_total_2019_2020), all_funds_total_2019_2020 = VALUES(all_funds_total_2019_2020), total_2020_2021 = VALUES(total_2020_2021), endowment_total_2020_2021 = VALUES(endowment_total_2020_2021), all_funds_total_2020_2021 = VALUES(all_funds_total_2020_2021), total_2021_2022 = VALUES(total_2021_2022), endowment_total_2021_2022 = VALUES(endowment_total_2021_2022), all_funds_total_2021_2022 = VALUES(all_funds_total_2021_2022), total_2022_2023 = VALUES(total_2022_2023), endowment_total_2022_2023 = VALUES(endowment_total_2022_2023), all_funds_total_2022_2023 = VALUES(all_funds_total_2022_2023), all_funds_change_2022_2023 = VALUES(all_funds_change_2022_2023), endowment_change_2022_2023 = VALUES(endowment_change_2022_2023), change_2022_2023 = VALUES(change_2022_2023), total_2023_2024 = VALUES(total_2023_2024), total_2023 = VALUES(total_2023), endowment_total_2023_2024 = VALUES(endowment_total_2023_2024), endowment_total_2023 = VALUES(endowment_total_2023), all_funds_total_2023_2024 = VALUES(all_funds_total_2023_2024), all_funds_change_2023_2024 = VALUES(all_funds_change_2023_2024), endowment_change_2023_2024 = VALUES(endowment_change_2023_2024), change_2023_2024 = VALUES(change_2023_2024), total_2024_2025 = VALUES(total_2024_2025), total_2024 = VALUES(total_2024), endowment_total_2024_2025 = VALUES(endowment_total_2024_2025), endowment_total_2024 = VALUES(endowment_total_2024), all_funds_total_2024_2025 = VALUES(all_funds_total_2024_2025), all_funds_change_2024_2025 = VALUES(all_funds_change_2024_2025), endowment_change_2024_2025 = VALUES(endowment_change_2024_2025), change_2024_2025 = VALUES(change_2024_2025), total_2025_2026 = VALUES(total_2025_2026), total_2025 = VALUES(total_2025), endowment_total_2025_2026 = VALUES(endowment_total_2025_2026), endowment_total_2025 = VALUES(endowment_total_2025), all_funds_total_2025_2026 = VALUES(all_funds_total_2025_2026), all_funds_change_2025_2026 = VALUES(all_funds_change_2025_2026), endowment_change_2025_2026 = VALUES(endowment_change_2025_2026), change_2025_2026 = VALUES(change_2025_2026); END IF;  END //

CREATE TRIGGER civicrm_contribution_after_update after update ON civicrm_contribution FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`contact_id`,'') <> IFNULL(NEW.`contact_id`,'') OR IFNULL(OLD.`financial_type_id`,'') <> IFNULL(NEW.`financial_type_id`,'') OR IFNULL(OLD.`contribution_page_id`,'') <> IFNULL(NEW.`contribution_page_id`,'') OR IFNULL(OLD.`payment_instrument_id`,'') <> IFNULL(NEW.`payment_instrument_id`,'') OR IFNULL(OLD.`receive_date`,'') <> IFNULL(NEW.`receive_date`,'') OR IFNULL(OLD.`non_deductible_amount`,'') <> IFNULL(NEW.`non_deductible_amount`,'') OR IFNULL(OLD.`total_amount`,'') <> IFNULL(NEW.`total_amount`,'') OR IFNULL(OLD.`fee_amount`,'') <> IFNULL(NEW.`fee_amount`,'') OR IFNULL(OLD.`net_amount`,'') <> IFNULL(NEW.`net_amount`,'') OR IFNULL(OLD.`trxn_id`,'') <> IFNULL(NEW.`trxn_id`,'') OR IFNULL(OLD.`invoice_id`,'') <> IFNULL(NEW.`invoice_id`,'') OR IFNULL(OLD.`currency`,'') <> IFNULL(NEW.`currency`,'') OR IFNULL(OLD.`cancel_date`,'') <> IFNULL(NEW.`cancel_date`,'') OR IFNULL(OLD.`cancel_reason`,'') <> IFNULL(NEW.`cancel_reason`,'') OR IFNULL(OLD.`receipt_date`,'') <> IFNULL(NEW.`receipt_date`,'') OR IFNULL(OLD.`thankyou_date`,'') <> IFNULL(NEW.`thankyou_date`,'') OR IFNULL(OLD.`source`,'') <> IFNULL(NEW.`source`,'') OR IFNULL(OLD.`amount_level`,'') <> IFNULL(NEW.`amount_level`,'') OR IFNULL(OLD.`contribution_recur_id`,'') <> IFNULL(NEW.`contribution_recur_id`,'') OR IFNULL(OLD.`is_test`,'') <> IFNULL(NEW.`is_test`,'') OR IFNULL(OLD.`is_pay_later`,'') <> IFNULL(NEW.`is_pay_later`,'') OR IFNULL(OLD.`contribution_status_id`,'') <> IFNULL(NEW.`contribution_status_id`,'') OR IFNULL(OLD.`note`,'') <> IFNULL(NEW.`note`,'') OR IFNULL(OLD.`address_id`,'') <> IFNULL(NEW.`address_id`,'') OR IFNULL(OLD.`check_number`,'') <> IFNULL(NEW.`check_number`,'') OR IFNULL(OLD.`campaign_id`,'') <> IFNULL(NEW.`campaign_id`,'') OR IFNULL(OLD.`tax_amount`,'') <> IFNULL(NEW.`tax_amount`,'') OR IFNULL(OLD.`creditnote_id`,'') <> IFNULL(NEW.`creditnote_id`,'') OR IFNULL(OLD.`revenue_recognition_date`,'') <> IFNULL(NEW.`revenue_recognition_date`,'') OR IFNULL(OLD.`invoice_number`,'') <> IFNULL(NEW.`invoice_number`,'') OR IFNULL(OLD.`is_template`,'') <> IFNULL(NEW.`is_template`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_contribution (`id`, `contact_id`, `financial_type_id`, `contribution_page_id`, `payment_instrument_id`, `receive_date`, `non_deductible_amount`, `total_amount`, `fee_amount`, `net_amount`, `trxn_id`, `invoice_id`, `currency`, `cancel_date`, `cancel_reason`, `receipt_date`, `thankyou_date`, `source`, `amount_level`, `contribution_recur_id`, `is_test`, `is_pay_later`, `contribution_status_id`, `note`, `address_id`, `check_number`, `campaign_id`, `tax_amount`, `creditnote_id`, `revenue_recognition_date`, `invoice_number`, `is_template`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`contact_id`, NEW.`financial_type_id`, NEW.`contribution_page_id`, NEW.`payment_instrument_id`, NEW.`receive_date`, NEW.`non_deductible_amount`, NEW.`total_amount`, NEW.`fee_amount`, NEW.`net_amount`, NEW.`trxn_id`, NEW.`invoice_id`, NEW.`currency`, NEW.`cancel_date`, NEW.`cancel_reason`, NEW.`receipt_date`, NEW.`thankyou_date`, NEW.`source`, NEW.`amount_level`, NEW.`contribution_recur_id`, NEW.`is_test`, NEW.`is_pay_later`, NEW.`contribution_status_id`, NEW.`note`, NEW.`address_id`, NEW.`check_number`, NEW.`campaign_id`, NEW.`tax_amount`, NEW.`creditnote_id`, NEW.`revenue_recognition_date`, NEW.`invoice_number`, NEW.`is_template`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF;
 IF 1 AND (NEW.contact_id NOT IN (2123835,19855599,12513,72)) AND ((NEW.contribution_status_id != OLD.contribution_status_id) OR (NEW.total_amount != OLD.total_amount) OR (NEW.contact_id != OLD.contact_id) OR (NEW.receive_date != OLD.receive_date) OR (NEW.currency != OLD.currency) OR (NEW.financial_type_id != OLD.financial_type_id) ) THEN
      INSERT INTO wmf_donor (
        entity_id, donor_segment_id, donor_status_id, last_donation_currency, last_donation_amount, last_donation_usd, first_donation_usd, date_of_largest_donation, largest_donation, endowment_largest_donation, all_funds_largest_donation, lifetime_including_endowment, lifetime_usd_total, endowment_lifetime_usd_total, last_donation_date, endowment_last_donation_date, all_funds_last_donation_date, first_donation_date, endowment_first_donation_date, all_funds_first_donation_date, number_donations, endowment_number_donations, all_funds_number_donations, total_2017_2018, total_2018_2019, endowment_total_2018_2019, all_funds_total_2018_2019, total_2019_2020, endowment_total_2019_2020, all_funds_total_2019_2020, total_2020_2021, endowment_total_2020_2021, all_funds_total_2020_2021, total_2021_2022, endowment_total_2021_2022, all_funds_total_2021_2022, total_2022_2023, endowment_total_2022_2023, all_funds_total_2022_2023, all_funds_change_2022_2023, endowment_change_2022_2023, change_2022_2023, total_2023_2024, total_2023, endowment_total_2023_2024, endowment_total_2023, all_funds_total_2023_2024, all_funds_change_2023_2024, endowment_change_2023_2024, change_2023_2024, total_2024_2025, total_2024, endowment_total_2024_2025, endowment_total_2024, all_funds_total_2024_2025, all_funds_change_2024_2025, endowment_change_2024_2025, change_2024_2025, total_2025_2026, total_2025, endowment_total_2025_2026, endowment_total_2025, all_funds_total_2025_2026, all_funds_change_2025_2026, endowment_change_2025_2026, change_2025_2026
      )SELECT
       NEW.contact_id as entity_id , # to honour FULL_GROUP_BY mysql mode we need an aggregate command for each
 # field - even though we know we just want `the value from the subquery`
 # MAX is a safe wrapper for that
 # https://www.percona.com/blog/2019/05/13/solve-query-failures-regarding-only_full_group_by-sql-mode/
 MAX(donor_segment_id) as donor_segment_id, MAX(donor_status_id) as donor_status_id, MAX(COALESCE(x.original_currency,
 latest.currency)) as last_donation_currency, MAX(COALESCE(x.original_amount,
 latest.total_amount,
 0)) as last_donation_amount, MAX(COALESCE(latest.total_amount,
 0)) as last_donation_usd, MAX(COALESCE(earliest.total_amount,
 0)) as first_donation_usd, MAX(largest.receive_date) as date_of_largest_donation, MAX(largest_donation) as largest_donation, MAX(endowment_largest_donation) as endowment_largest_donation, MAX(all_funds_largest_donation) as all_funds_largest_donation, MAX(lifetime_including_endowment) as lifetime_including_endowment, MAX(lifetime_usd_total) as lifetime_usd_total, MAX(endowment_lifetime_usd_total) as endowment_lifetime_usd_total, MAX(last_donation_date) as last_donation_date, MAX(endowment_last_donation_date) as endowment_last_donation_date, MAX(all_funds_last_donation_date) as all_funds_last_donation_date, MIN(first_donation_date) as first_donation_date, MIN(endowment_first_donation_date) as endowment_first_donation_date, MIN(all_funds_first_donation_date) as all_funds_first_donation_date, MAX(number_donations) as number_donations, MAX(endowment_number_donations) as endowment_number_donations, MAX(all_funds_number_donations) as all_funds_number_donations, MAX(total_2017_2018) as total_2017_2018, MAX(total_2018_2019) as total_2018_2019, MAX(endowment_total_2018_2019) as endowment_total_2018_2019, MAX(all_funds_total_2018_2019) as all_funds_total_2018_2019, MAX(total_2019_2020) as total_2019_2020, MAX(endowment_total_2019_2020) as endowment_total_2019_2020, MAX(all_funds_total_2019_2020) as all_funds_total_2019_2020, MAX(total_2020_2021) as total_2020_2021, MAX(endowment_total_2020_2021) as endowment_total_2020_2021, MAX(all_funds_total_2020_2021) as all_funds_total_2020_2021, MAX(total_2021_2022) as total_2021_2022, MAX(endowment_total_2021_2022) as endowment_total_2021_2022, MAX(all_funds_total_2021_2022) as all_funds_total_2021_2022, MAX(total_2022_2023) as total_2022_2023, MAX(endowment_total_2022_2023) as endowment_total_2022_2023, MAX(all_funds_total_2022_2023) as all_funds_total_2022_2023, MAX(all_funds_change_2022_2023) as all_funds_change_2022_2023, MAX(endowment_change_2022_2023) as endowment_change_2022_2023, MAX(change_2022_2023) as change_2022_2023, MAX(total_2023_2024) as total_2023_2024, MAX(total_2023) as total_2023, MAX(endowment_total_2023_2024) as endowment_total_2023_2024, MAX(endowment_total_2023) as endowment_total_2023, MAX(all_funds_total_2023_2024) as all_funds_total_2023_2024, MAX(all_funds_change_2023_2024) as all_funds_change_2023_2024, MAX(endowment_change_2023_2024) as endowment_change_2023_2024, MAX(change_2023_2024) as change_2023_2024, MAX(total_2024_2025) as total_2024_2025, MAX(total_2024) as total_2024, MAX(endowment_total_2024_2025) as endowment_total_2024_2025, MAX(endowment_total_2024) as endowment_total_2024, MAX(all_funds_total_2024_2025) as all_funds_total_2024_2025, MAX(all_funds_change_2024_2025) as all_funds_change_2024_2025, MAX(endowment_change_2024_2025) as endowment_change_2024_2025, MAX(change_2024_2025) as change_2024_2025, MAX(total_2025_2026) as total_2025_2026, MAX(total_2025) as total_2025, MAX(endowment_total_2025_2026) as endowment_total_2025_2026, MAX(endowment_total_2025) as endowment_total_2025, MAX(all_funds_total_2025_2026) as all_funds_total_2025_2026, MAX(all_funds_change_2025_2026) as all_funds_change_2025_2026, MAX(endowment_change_2025_2026) as endowment_change_2025_2026, MAX(change_2025_2026) as change_2025_2026

    FROM (
      SELECT
  CASE 

         WHEN (
         --  Major Donor  has given 10,000+ in one of the past 5 financial years, or in the current financial year so far
         SUM(COALESCE(IF( receive_date
      BETWEEN ('2024-07-01 00:00:00') AND ('2025-06-30 23:59:59.9999')
      , total_amount, 0), 0)) >= 10000 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2023-07-01 00:00:00') AND ('2024-06-30 23:59:59')
      , total_amount, 0), 0)) >= 10000 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2022-07-01 00:00:00') AND ('2023-06-30 23:59:59')
      , total_amount, 0), 0)) >= 10000 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2021-07-01 00:00:00') AND ('2022-06-30 23:59:59')
      , total_amount, 0), 0)) >= 10000 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2020-07-01 00:00:00') AND ('2021-06-30 23:59:59')
      , total_amount, 0), 0)) >= 10000 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2019-07-01 00:00:00') AND ('2020-06-30 23:59:59')
      , total_amount, 0), 0)) >= 10000

        ) THEN 100


         WHEN (
         --  Mid Tier  has given 1,000+  in one of the past 5 financial years, or in the current financial year so far
         SUM(COALESCE(IF( receive_date
      BETWEEN ('2024-07-01 00:00:00') AND ('2025-06-30 23:59:59.9999')
      , total_amount, 0), 0)) >= 1000 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2023-07-01 00:00:00') AND ('2024-06-30 23:59:59')
      , total_amount, 0), 0)) >= 1000 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2022-07-01 00:00:00') AND ('2023-06-30 23:59:59')
      , total_amount, 0), 0)) >= 1000 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2021-07-01 00:00:00') AND ('2022-06-30 23:59:59')
      , total_amount, 0), 0)) >= 1000 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2020-07-01 00:00:00') AND ('2021-06-30 23:59:59')
      , total_amount, 0), 0)) >= 1000 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2019-07-01 00:00:00') AND ('2020-06-30 23:59:59')
      , total_amount, 0), 0)) >= 1000

        ) THEN 200


         WHEN (
         --  Mid-Value Prospect  has given 250+ in one of the past 5 financial years, or in the current financial year so far
         SUM(COALESCE(IF( receive_date
      BETWEEN ('2024-07-01 00:00:00') AND ('2025-06-30 23:59:59.9999')
      , total_amount, 0), 0)) >= 250 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2023-07-01 00:00:00') AND ('2024-06-30 23:59:59')
      , total_amount, 0), 0)) >= 250 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2022-07-01 00:00:00') AND ('2023-06-30 23:59:59')
      , total_amount, 0), 0)) >= 250 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2021-07-01 00:00:00') AND ('2022-06-30 23:59:59')
      , total_amount, 0), 0)) >= 250 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2020-07-01 00:00:00') AND ('2021-06-30 23:59:59')
      , total_amount, 0), 0)) >= 250 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2019-07-01 00:00:00') AND ('2020-06-30 23:59:59')
      , total_amount, 0), 0)) >= 250

        ) THEN 300


         WHEN (
         --  Recurring donor  has made a recurring donation in last 36 months
         SUM(COALESCE(IF(contribution_recur_id IS NOT NULL AND  receive_date
      BETWEEN (IF (NOW() < '2025-06-30 23:59:59.9999', NOW() - INTERVAL 36 MONTH, '2025-06-30 23:59:59.9999' - INTERVAL 36 MONTH)) AND ('2025-06-30 23:59:59.9999')
      , total_amount, 0), 0)) >= 0.01

        ) THEN 400


         WHEN (
         --  Grassroots Plus Donor  has given 50+  in one of the past 5 financial years, or in the current financial year so far
         SUM(COALESCE(IF( receive_date
      BETWEEN ('2024-07-01 00:00:00') AND ('2025-06-30 23:59:59.9999')
      , total_amount, 0), 0)) >= 50 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2023-07-01 00:00:00') AND ('2024-06-30 23:59:59')
      , total_amount, 0), 0)) >= 50 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2022-07-01 00:00:00') AND ('2023-06-30 23:59:59')
      , total_amount, 0), 0)) >= 50 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2021-07-01 00:00:00') AND ('2022-06-30 23:59:59')
      , total_amount, 0), 0)) >= 50 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2020-07-01 00:00:00') AND ('2021-06-30 23:59:59')
      , total_amount, 0), 0)) >= 50 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2019-07-01 00:00:00') AND ('2020-06-30 23:59:59')
      , total_amount, 0), 0)) >= 50

        ) THEN 500


         WHEN (
         --  Grassroots Donor  has given in the last 5 financial years (or the current one)
         SUM(COALESCE(IF( receive_date
      BETWEEN ('2019-07-01 00:00:00') AND ('2025-06-30 23:59:59.9999')
      , total_amount, 0), 0)) >= 0.01

        ) THEN 600


         WHEN (
         --  All other Donors  has given but not in the last 5 financial years (or the current one)
         SUM(COALESCE(IF( receive_date
      BETWEEN (IF (NOW() < '2025-06-30 23:59:59.9999', NOW() - INTERVAL 300 MONTH, '2025-06-30 23:59:59.9999' - INTERVAL 300 MONTH)) AND ('2025-06-30 23:59:59.9999')
      , total_amount, 0), 0)) >= 0.01

        ) THEN 900

       ELSE 1000
       END  as donor_segment_id, 
CASE

         WHEN (
         --  Active Recurring  gave recurring within last month
         SUM(COALESCE(IF(contribution_recur_id IS NOT NULL AND  receive_date
      BETWEEN (IF (NOW() < '2025-06-30 23:59:59.9999', NOW() - INTERVAL 1 MONTH, '2025-06-30 23:59:59.9999' - INTERVAL 1 MONTH)) AND ('2025-06-30 23:59:59.9999')
      , total_amount, 0), 0)) >= 0.01 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2024-07-01 00:00:00') AND ('2025-06-30 23:59:59.9999')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2023-07-01 00:00:00') AND ('2024-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2022-07-01 00:00:00') AND ('2023-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2021-07-01 00:00:00') AND ('2022-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2020-07-01 00:00:00') AND ('2021-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2019-07-01 00:00:00') AND ('2020-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000

        ) THEN 2


         WHEN (
         --  Delinquent Recurring  gave recurring more than 1 month & less than 4 months ago
         SUM(COALESCE(IF(contribution_recur_id IS NOT NULL AND  receive_date
      BETWEEN (IF (NOW() < '2025-06-30 23:59:59.9999', NOW() - INTERVAL 3 MONTH, '2025-06-30 23:59:59.9999' - INTERVAL 3 MONTH)) AND (IF (NOW() < '2025-06-30 23:59:59.9999', NOW() - INTERVAL 1 MONTH, '2025-06-30 23:59:59.9999' - INTERVAL 1 MONTH))
      , total_amount, 0), 0)) >= 0.01 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2024-07-01 00:00:00') AND ('2025-06-30 23:59:59.9999')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2023-07-01 00:00:00') AND ('2024-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2022-07-01 00:00:00') AND ('2023-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2021-07-01 00:00:00') AND ('2022-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2020-07-01 00:00:00') AND ('2021-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2019-07-01 00:00:00') AND ('2020-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000

        ) THEN 4


         WHEN (
         --  Recent lapsed Recurring  gave recurring more than 3 months & less than 7 months ago
         SUM(COALESCE(IF(contribution_recur_id IS NOT NULL AND  receive_date
      BETWEEN (IF (NOW() < '2025-06-30 23:59:59.9999', NOW() - INTERVAL 6 MONTH, '2025-06-30 23:59:59.9999' - INTERVAL 6 MONTH)) AND (IF (NOW() < '2025-06-30 23:59:59.9999', NOW() - INTERVAL 3 MONTH, '2025-06-30 23:59:59.9999' - INTERVAL 3 MONTH))
      , total_amount, 0), 0)) >= 0.01 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2024-07-01 00:00:00') AND ('2025-06-30 23:59:59.9999')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2023-07-01 00:00:00') AND ('2024-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2022-07-01 00:00:00') AND ('2023-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2021-07-01 00:00:00') AND ('2022-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2020-07-01 00:00:00') AND ('2021-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2019-07-01 00:00:00') AND ('2020-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000

        ) THEN 6


         WHEN (
         --  Deep lapsed Recurring  gave recurring more than 6 months & less than 37 months ago
         SUM(COALESCE(IF(contribution_recur_id IS NOT NULL AND  receive_date
      BETWEEN (IF (NOW() < '2025-06-30 23:59:59.9999', NOW() - INTERVAL 36 MONTH, '2025-06-30 23:59:59.9999' - INTERVAL 36 MONTH)) AND (IF (NOW() < '2025-06-30 23:59:59.9999', NOW() - INTERVAL 6 MONTH, '2025-06-30 23:59:59.9999' - INTERVAL 6 MONTH))
      , total_amount, 0), 0)) >= 0.01 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2024-07-01 00:00:00') AND ('2025-06-30 23:59:59.9999')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2023-07-01 00:00:00') AND ('2024-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2022-07-01 00:00:00') AND ('2023-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2021-07-01 00:00:00') AND ('2022-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2020-07-01 00:00:00') AND ('2021-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2019-07-01 00:00:00') AND ('2020-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000

        ) THEN 8


         WHEN (
         --  Consecutive  gave last financial year and this financial year to date
         SUM(COALESCE(IF( receive_date
      BETWEEN ('2024-07-01 00:00:00') AND ('2025-06-30 23:59:59.9999')
      , total_amount, 0), 0)) >= 0.01 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2023-07-01 00:00:00') AND ('2024-06-30 23:59:59')
      , total_amount, 0), 0)) >= 0.01

        ) THEN 20


         WHEN (
         --  New  first donation this FY
         MIN(COALESCE(IF( receive_date
      BETWEEN ('2024-07-01 00:00:00') AND ('2025-06-30 23:59:59.9999')
      , total_amount, 0), 0)) >= 0.01

        ) THEN 25


         WHEN (
         --  Active  gave in this FY
         SUM(COALESCE(IF( receive_date
      BETWEEN ('2024-07-01 00:00:00') AND ('2025-06-30 23:59:59.9999')
      , total_amount, 0), 0)) >= 0.01

        ) THEN 30


         WHEN (
         --  Lybunt  gave last financial year but NOT this financial year to date
         SUM(COALESCE(IF( receive_date
      BETWEEN ('2023-07-01 00:00:00') AND ('2024-06-30 23:59:59')
      , total_amount, 0), 0)) >= 0.01

        ) THEN 35


         WHEN (
         --  Lapsed  last gave in the financial year before last
         SUM(COALESCE(IF( receive_date
      BETWEEN ('2022-07-01 00:00:00') AND ('2023-06-30 23:59:59')
      , total_amount, 0), 0)) >= 0.01

        ) THEN 50


         WHEN (
         --  Deep Lapsed  last gave between 2 & 5 financial years ago
         SUM(COALESCE(IF( receive_date
      BETWEEN ('2019-07-01 00:00:00') AND ('2022-07-01 00:00:00')
      , total_amount, 0), 0)) >= 0.01

        ) THEN 60


         WHEN (
         --  Ultra lapsed  gave prior to 5 financial years ago
         SUM(COALESCE(IF( receive_date
      BETWEEN ('2000-06-30 23:59:59') AND ('2019-06-30 23:59:59')
      , total_amount, 0), 0)) >= 0.01

        ) THEN 70

       ELSE 1000
       END  as donor_status_id, MAX(IF(financial_type_id <> 26, COALESCE(total_amount, 0), 0)) AS largest_donation, MAX(IF(financial_type_id = 26, COALESCE(total_amount, 0), 0)) AS endowment_largest_donation, MAX(COALESCE(total_amount, 0)) AS all_funds_largest_donation, SUM(COALESCE(total_amount, 0)) AS lifetime_including_endowment, SUM(IF(financial_type_id <> 26, COALESCE(total_amount, 0), 0)) AS lifetime_usd_total, SUM(IF(financial_type_id = 26, COALESCE(total_amount, 0), 0)) AS endowment_lifetime_usd_total, MAX(IF(financial_type_id <> 26 AND total_amount > 0, receive_date, NULL)) AS last_donation_date, MAX(IF(financial_type_id = 26 AND total_amount > 0, receive_date, NULL)) AS endowment_last_donation_date, MAX(IF(total_amount > 0, receive_date, NULL)) AS all_funds_last_donation_date, MIN(IF(financial_type_id <> 26 AND total_amount > 0, receive_date, NULL)) AS first_donation_date, MIN(IF(financial_type_id = 26 AND total_amount > 0, receive_date, NULL)) AS endowment_first_donation_date, MIN(IF(total_amount > 0, receive_date, NULL)) AS all_funds_first_donation_date, COUNT(IF(financial_type_id <> 26 AND total_amount > 0, receive_date, NULL)) AS number_donations, COUNT(IF(financial_type_id = 26 AND total_amount > 0, receive_date, NULL)) AS endowment_number_donations, COUNT(IF(total_amount > 0, receive_date, NULL)) AS all_funds_number_donations, SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2017-07-01' AND '2018-06-30 23:59:59', c.total_amount, 0),0)) as total_2017_2018, SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2018-07-01' AND '2019-06-30 23:59:59', c.total_amount, 0),0)) as total_2018_2019, SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2018-07-01' AND '2019-06-30 23:59:59', c.total_amount, 0),0)) as endowment_total_2018_2019, SUM(COALESCE(IF(receive_date BETWEEN '2018-07-01' AND '2019-06-30 23:59:59', c.total_amount, 0),0)) as all_funds_total_2018_2019, SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2019-07-01' AND '2020-06-30 23:59:59', c.total_amount, 0),0)) as total_2019_2020, SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2019-07-01' AND '2020-06-30 23:59:59', c.total_amount, 0),0)) as endowment_total_2019_2020, SUM(COALESCE(IF(receive_date BETWEEN '2019-07-01' AND '2020-06-30 23:59:59', c.total_amount, 0),0)) as all_funds_total_2019_2020, SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2020-07-01' AND '2021-06-30 23:59:59', c.total_amount, 0),0)) as total_2020_2021, SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2020-07-01' AND '2021-06-30 23:59:59', c.total_amount, 0),0)) as endowment_total_2020_2021, SUM(COALESCE(IF(receive_date BETWEEN '2020-07-01' AND '2021-06-30 23:59:59', c.total_amount, 0),0)) as all_funds_total_2020_2021, SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2021-07-01' AND '2022-06-30 23:59:59', c.total_amount, 0),0)) as total_2021_2022, SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2021-07-01' AND '2022-06-30 23:59:59', c.total_amount, 0),0)) as endowment_total_2021_2022, SUM(COALESCE(IF(receive_date BETWEEN '2021-07-01' AND '2022-06-30 23:59:59', c.total_amount, 0),0)) as all_funds_total_2021_2022, SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2022-07-01' AND '2023-06-30 23:59:59', c.total_amount, 0),0)) as total_2022_2023, SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2022-07-01' AND '2023-06-30 23:59:59', c.total_amount, 0),0)) as endowment_total_2022_2023, SUM(COALESCE(IF(receive_date BETWEEN '2022-07-01' AND '2023-06-30 23:59:59', c.total_amount, 0),0)) as all_funds_total_2022_2023, 
            SUM(COALESCE(IF(receive_date BETWEEN '2023-01-01' AND '2023-12-31 23:59:59', c.total_amount, 0),0))
            - SUM(COALESCE(IF(receive_date BETWEEN '2022-01-01' AND '2022-12-31 23:59:59', c.total_amount, 0),0))
             as all_funds_change_2022_2023, 
             SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2023-01-01' AND '2023-12-31 23:59:59', c.total_amount, 0),0))
            - SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2022-01-01' AND '2022-12-31 23:59:59', c.total_amount, 0),0))
             as endowment_change_2022_2023, 
            SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2023-01-01' AND '2023-12-31 23:59:59', c.total_amount, 0),0))
          - SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2022-01-01' AND '2022-12-31 23:59:59', c.total_amount, 0),0))
          as change_2022_2023, SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2023-07-01' AND '2024-06-30 23:59:59', c.total_amount, 0),0)) as total_2023_2024, SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2023-01-01' AND '2023-12-31 23:59:59', c.total_amount, 0),0)) as total_2023, SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2023-07-01' AND '2024-06-30 23:59:59', c.total_amount, 0),0)) as endowment_total_2023_2024, SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2023-01-01' AND '2023-12-31 23:59:59', c.total_amount, 0),0)) as endowment_total_2023, SUM(COALESCE(IF(receive_date BETWEEN '2023-07-01' AND '2024-06-30 23:59:59', c.total_amount, 0),0)) as all_funds_total_2023_2024, 
            SUM(COALESCE(IF(receive_date BETWEEN '2024-01-01' AND '2024-12-31 23:59:59', c.total_amount, 0),0))
            - SUM(COALESCE(IF(receive_date BETWEEN '2023-01-01' AND '2023-12-31 23:59:59', c.total_amount, 0),0))
             as all_funds_change_2023_2024, 
             SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2024-01-01' AND '2024-12-31 23:59:59', c.total_amount, 0),0))
            - SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2023-01-01' AND '2023-12-31 23:59:59', c.total_amount, 0),0))
             as endowment_change_2023_2024, 
            SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2024-01-01' AND '2024-12-31 23:59:59', c.total_amount, 0),0))
          - SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2023-01-01' AND '2023-12-31 23:59:59', c.total_amount, 0),0))
          as change_2023_2024, SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2024-07-01' AND '2025-06-30 23:59:59', c.total_amount, 0),0)) as total_2024_2025, SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2024-01-01' AND '2024-12-31 23:59:59', c.total_amount, 0),0)) as total_2024, SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2024-07-01' AND '2025-06-30 23:59:59', c.total_amount, 0),0)) as endowment_total_2024_2025, SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2024-01-01' AND '2024-12-31 23:59:59', c.total_amount, 0),0)) as endowment_total_2024, SUM(COALESCE(IF(receive_date BETWEEN '2024-07-01' AND '2025-06-30 23:59:59', c.total_amount, 0),0)) as all_funds_total_2024_2025, 
            SUM(COALESCE(IF(receive_date BETWEEN '2025-01-01' AND '2025-12-31 23:59:59', c.total_amount, 0),0))
            - SUM(COALESCE(IF(receive_date BETWEEN '2024-01-01' AND '2024-12-31 23:59:59', c.total_amount, 0),0))
             as all_funds_change_2024_2025, 
             SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2025-01-01' AND '2025-12-31 23:59:59', c.total_amount, 0),0))
            - SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2024-01-01' AND '2024-12-31 23:59:59', c.total_amount, 0),0))
             as endowment_change_2024_2025, 
            SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2025-01-01' AND '2025-12-31 23:59:59', c.total_amount, 0),0))
          - SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2024-01-01' AND '2024-12-31 23:59:59', c.total_amount, 0),0))
          as change_2024_2025, SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2025-07-01' AND '2026-06-30 23:59:59', c.total_amount, 0),0)) as total_2025_2026, SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2025-01-01' AND '2025-12-31 23:59:59', c.total_amount, 0),0)) as total_2025, SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2025-07-01' AND '2026-06-30 23:59:59', c.total_amount, 0),0)) as endowment_total_2025_2026, SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2025-01-01' AND '2025-12-31 23:59:59', c.total_amount, 0),0)) as endowment_total_2025, SUM(COALESCE(IF(receive_date BETWEEN '2025-07-01' AND '2026-06-30 23:59:59', c.total_amount, 0),0)) as all_funds_total_2025_2026, 
            SUM(COALESCE(IF(receive_date BETWEEN '2026-01-01' AND '2026-12-31 23:59:59', c.total_amount, 0),0))
            - SUM(COALESCE(IF(receive_date BETWEEN '2025-01-01' AND '2025-12-31 23:59:59', c.total_amount, 0),0))
             as all_funds_change_2025_2026, 
             SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2026-01-01' AND '2026-12-31 23:59:59', c.total_amount, 0),0))
            - SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2025-01-01' AND '2025-12-31 23:59:59', c.total_amount, 0),0))
             as endowment_change_2025_2026, 
            SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2026-01-01' AND '2026-12-31 23:59:59', c.total_amount, 0),0))
          - SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2025-01-01' AND '2025-12-31 23:59:59', c.total_amount, 0),0))
          as change_2025_2026
      FROM civicrm_contribution c
      USE INDEX(FK_civicrm_contribution_contact_id)
      WHERE  contact_id = NEW.contact_id 
        AND contribution_status_id = 1
        AND (c.trxn_id NOT LIKE 'RFD %' OR c.trxn_id IS NULL)
    ) as totals

  LEFT JOIN civicrm_contribution latest
    USE INDEX(FK_civicrm_contribution_contact_id)
    ON latest.contact_id =  NEW.contact_id
    AND latest.receive_date = totals.last_donation_date
    AND latest.contribution_status_id = 1
    AND latest.total_amount > 0
    AND (latest.trxn_id NOT LIKE 'RFD %' OR latest.trxn_id IS NULL)
    AND latest.financial_type_id <> 26
  LEFT JOIN wmf_contribution_extra x ON x.entity_id = latest.id

  LEFT JOIN civicrm_contribution earliest
    USE INDEX(FK_civicrm_contribution_contact_id)
    ON earliest.contact_id =  NEW.contact_id
    AND earliest.receive_date = totals.first_donation_date
    AND earliest.contribution_status_id = 1
    AND earliest.total_amount > 0
    AND (earliest.trxn_id NOT LIKE 'RFD %' OR earliest.trxn_id IS NULL)

  LEFT JOIN civicrm_contribution largest
    USE INDEX(FK_civicrm_contribution_contact_id)
    ON largest.contact_id =  NEW.contact_id 
    AND largest.total_amount = totals.largest_donation
    AND largest.contribution_status_id = 1
    AND largest.total_amount > 0
    AND (largest.trxn_id NOT LIKE 'RFD %' OR largest.trxn_id IS NULL) GROUP BY  NEW.contact_id
     ON DUPLICATE KEY UPDATE
    donor_segment_id = VALUES(donor_segment_id), donor_status_id = VALUES(donor_status_id), last_donation_currency = VALUES(last_donation_currency), last_donation_amount = VALUES(last_donation_amount), last_donation_usd = VALUES(last_donation_usd), first_donation_usd = VALUES(first_donation_usd), date_of_largest_donation = VALUES(date_of_largest_donation), largest_donation = VALUES(largest_donation), endowment_largest_donation = VALUES(endowment_largest_donation), all_funds_largest_donation = VALUES(all_funds_largest_donation), lifetime_including_endowment = VALUES(lifetime_including_endowment), lifetime_usd_total = VALUES(lifetime_usd_total), endowment_lifetime_usd_total = VALUES(endowment_lifetime_usd_total), last_donation_date = VALUES(last_donation_date), endowment_last_donation_date = VALUES(endowment_last_donation_date), all_funds_last_donation_date = VALUES(all_funds_last_donation_date), first_donation_date = VALUES(first_donation_date), endowment_first_donation_date = VALUES(endowment_first_donation_date), all_funds_first_donation_date = VALUES(all_funds_first_donation_date), number_donations = VALUES(number_donations), endowment_number_donations = VALUES(endowment_number_donations), all_funds_number_donations = VALUES(all_funds_number_donations), total_2017_2018 = VALUES(total_2017_2018), total_2018_2019 = VALUES(total_2018_2019), endowment_total_2018_2019 = VALUES(endowment_total_2018_2019), all_funds_total_2018_2019 = VALUES(all_funds_total_2018_2019), total_2019_2020 = VALUES(total_2019_2020), endowment_total_2019_2020 = VALUES(endowment_total_2019_2020), all_funds_total_2019_2020 = VALUES(all_funds_total_2019_2020), total_2020_2021 = VALUES(total_2020_2021), endowment_total_2020_2021 = VALUES(endowment_total_2020_2021), all_funds_total_2020_2021 = VALUES(all_funds_total_2020_2021), total_2021_2022 = VALUES(total_2021_2022), endowment_total_2021_2022 = VALUES(endowment_total_2021_2022), all_funds_total_2021_2022 = VALUES(all_funds_total_2021_2022), total_2022_2023 = VALUES(total_2022_2023), endowment_total_2022_2023 = VALUES(endowment_total_2022_2023), all_funds_total_2022_2023 = VALUES(all_funds_total_2022_2023), all_funds_change_2022_2023 = VALUES(all_funds_change_2022_2023), endowment_change_2022_2023 = VALUES(endowment_change_2022_2023), change_2022_2023 = VALUES(change_2022_2023), total_2023_2024 = VALUES(total_2023_2024), total_2023 = VALUES(total_2023), endowment_total_2023_2024 = VALUES(endowment_total_2023_2024), endowment_total_2023 = VALUES(endowment_total_2023), all_funds_total_2023_2024 = VALUES(all_funds_total_2023_2024), all_funds_change_2023_2024 = VALUES(all_funds_change_2023_2024), endowment_change_2023_2024 = VALUES(endowment_change_2023_2024), change_2023_2024 = VALUES(change_2023_2024), total_2024_2025 = VALUES(total_2024_2025), total_2024 = VALUES(total_2024), endowment_total_2024_2025 = VALUES(endowment_total_2024_2025), endowment_total_2024 = VALUES(endowment_total_2024), all_funds_total_2024_2025 = VALUES(all_funds_total_2024_2025), all_funds_change_2024_2025 = VALUES(all_funds_change_2024_2025), endowment_change_2024_2025 = VALUES(endowment_change_2024_2025), change_2024_2025 = VALUES(change_2024_2025), total_2025_2026 = VALUES(total_2025_2026), total_2025 = VALUES(total_2025), endowment_total_2025_2026 = VALUES(endowment_total_2025_2026), endowment_total_2025 = VALUES(endowment_total_2025), all_funds_total_2025_2026 = VALUES(all_funds_total_2025_2026), all_funds_change_2025_2026 = VALUES(all_funds_change_2025_2026), endowment_change_2025_2026 = VALUES(endowment_change_2025_2026), change_2025_2026 = VALUES(change_2025_2026); END IF; 
 IF 1 AND (OLD.contact_id NOT IN (2123835,19855599,12513,72)) AND (NEW.contact_id <> OLD.contact_id) THEN
      INSERT INTO wmf_donor (
        entity_id, donor_segment_id, donor_status_id, last_donation_currency, last_donation_amount, last_donation_usd, first_donation_usd, date_of_largest_donation, largest_donation, endowment_largest_donation, all_funds_largest_donation, lifetime_including_endowment, lifetime_usd_total, endowment_lifetime_usd_total, last_donation_date, endowment_last_donation_date, all_funds_last_donation_date, first_donation_date, endowment_first_donation_date, all_funds_first_donation_date, number_donations, endowment_number_donations, all_funds_number_donations, total_2017_2018, total_2018_2019, endowment_total_2018_2019, all_funds_total_2018_2019, total_2019_2020, endowment_total_2019_2020, all_funds_total_2019_2020, total_2020_2021, endowment_total_2020_2021, all_funds_total_2020_2021, total_2021_2022, endowment_total_2021_2022, all_funds_total_2021_2022, total_2022_2023, endowment_total_2022_2023, all_funds_total_2022_2023, all_funds_change_2022_2023, endowment_change_2022_2023, change_2022_2023, total_2023_2024, total_2023, endowment_total_2023_2024, endowment_total_2023, all_funds_total_2023_2024, all_funds_change_2023_2024, endowment_change_2023_2024, change_2023_2024, total_2024_2025, total_2024, endowment_total_2024_2025, endowment_total_2024, all_funds_total_2024_2025, all_funds_change_2024_2025, endowment_change_2024_2025, change_2024_2025, total_2025_2026, total_2025, endowment_total_2025_2026, endowment_total_2025, all_funds_total_2025_2026, all_funds_change_2025_2026, endowment_change_2025_2026, change_2025_2026
      )SELECT
       OLD.contact_id as entity_id , # to honour FULL_GROUP_BY mysql mode we need an aggregate command for each
 # field - even though we know we just want `the value from the subquery`
 # MAX is a safe wrapper for that
 # https://www.percona.com/blog/2019/05/13/solve-query-failures-regarding-only_full_group_by-sql-mode/
 MAX(donor_segment_id) as donor_segment_id, MAX(donor_status_id) as donor_status_id, MAX(COALESCE(x.original_currency,
 latest.currency)) as last_donation_currency, MAX(COALESCE(x.original_amount,
 latest.total_amount,
 0)) as last_donation_amount, MAX(COALESCE(latest.total_amount,
 0)) as last_donation_usd, MAX(COALESCE(earliest.total_amount,
 0)) as first_donation_usd, MAX(largest.receive_date) as date_of_largest_donation, MAX(largest_donation) as largest_donation, MAX(endowment_largest_donation) as endowment_largest_donation, MAX(all_funds_largest_donation) as all_funds_largest_donation, MAX(lifetime_including_endowment) as lifetime_including_endowment, MAX(lifetime_usd_total) as lifetime_usd_total, MAX(endowment_lifetime_usd_total) as endowment_lifetime_usd_total, MAX(last_donation_date) as last_donation_date, MAX(endowment_last_donation_date) as endowment_last_donation_date, MAX(all_funds_last_donation_date) as all_funds_last_donation_date, MIN(first_donation_date) as first_donation_date, MIN(endowment_first_donation_date) as endowment_first_donation_date, MIN(all_funds_first_donation_date) as all_funds_first_donation_date, MAX(number_donations) as number_donations, MAX(endowment_number_donations) as endowment_number_donations, MAX(all_funds_number_donations) as all_funds_number_donations, MAX(total_2017_2018) as total_2017_2018, MAX(total_2018_2019) as total_2018_2019, MAX(endowment_total_2018_2019) as endowment_total_2018_2019, MAX(all_funds_total_2018_2019) as all_funds_total_2018_2019, MAX(total_2019_2020) as total_2019_2020, MAX(endowment_total_2019_2020) as endowment_total_2019_2020, MAX(all_funds_total_2019_2020) as all_funds_total_2019_2020, MAX(total_2020_2021) as total_2020_2021, MAX(endowment_total_2020_2021) as endowment_total_2020_2021, MAX(all_funds_total_2020_2021) as all_funds_total_2020_2021, MAX(total_2021_2022) as total_2021_2022, MAX(endowment_total_2021_2022) as endowment_total_2021_2022, MAX(all_funds_total_2021_2022) as all_funds_total_2021_2022, MAX(total_2022_2023) as total_2022_2023, MAX(endowment_total_2022_2023) as endowment_total_2022_2023, MAX(all_funds_total_2022_2023) as all_funds_total_2022_2023, MAX(all_funds_change_2022_2023) as all_funds_change_2022_2023, MAX(endowment_change_2022_2023) as endowment_change_2022_2023, MAX(change_2022_2023) as change_2022_2023, MAX(total_2023_2024) as total_2023_2024, MAX(total_2023) as total_2023, MAX(endowment_total_2023_2024) as endowment_total_2023_2024, MAX(endowment_total_2023) as endowment_total_2023, MAX(all_funds_total_2023_2024) as all_funds_total_2023_2024, MAX(all_funds_change_2023_2024) as all_funds_change_2023_2024, MAX(endowment_change_2023_2024) as endowment_change_2023_2024, MAX(change_2023_2024) as change_2023_2024, MAX(total_2024_2025) as total_2024_2025, MAX(total_2024) as total_2024, MAX(endowment_total_2024_2025) as endowment_total_2024_2025, MAX(endowment_total_2024) as endowment_total_2024, MAX(all_funds_total_2024_2025) as all_funds_total_2024_2025, MAX(all_funds_change_2024_2025) as all_funds_change_2024_2025, MAX(endowment_change_2024_2025) as endowment_change_2024_2025, MAX(change_2024_2025) as change_2024_2025, MAX(total_2025_2026) as total_2025_2026, MAX(total_2025) as total_2025, MAX(endowment_total_2025_2026) as endowment_total_2025_2026, MAX(endowment_total_2025) as endowment_total_2025, MAX(all_funds_total_2025_2026) as all_funds_total_2025_2026, MAX(all_funds_change_2025_2026) as all_funds_change_2025_2026, MAX(endowment_change_2025_2026) as endowment_change_2025_2026, MAX(change_2025_2026) as change_2025_2026

    FROM (
      SELECT
  CASE 

         WHEN (
         --  Major Donor  has given 10,000+ in one of the past 5 financial years, or in the current financial year so far
         SUM(COALESCE(IF( receive_date
      BETWEEN ('2024-07-01 00:00:00') AND ('2025-06-30 23:59:59.9999')
      , total_amount, 0), 0)) >= 10000 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2023-07-01 00:00:00') AND ('2024-06-30 23:59:59')
      , total_amount, 0), 0)) >= 10000 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2022-07-01 00:00:00') AND ('2023-06-30 23:59:59')
      , total_amount, 0), 0)) >= 10000 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2021-07-01 00:00:00') AND ('2022-06-30 23:59:59')
      , total_amount, 0), 0)) >= 10000 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2020-07-01 00:00:00') AND ('2021-06-30 23:59:59')
      , total_amount, 0), 0)) >= 10000 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2019-07-01 00:00:00') AND ('2020-06-30 23:59:59')
      , total_amount, 0), 0)) >= 10000

        ) THEN 100


         WHEN (
         --  Mid Tier  has given 1,000+  in one of the past 5 financial years, or in the current financial year so far
         SUM(COALESCE(IF( receive_date
      BETWEEN ('2024-07-01 00:00:00') AND ('2025-06-30 23:59:59.9999')
      , total_amount, 0), 0)) >= 1000 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2023-07-01 00:00:00') AND ('2024-06-30 23:59:59')
      , total_amount, 0), 0)) >= 1000 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2022-07-01 00:00:00') AND ('2023-06-30 23:59:59')
      , total_amount, 0), 0)) >= 1000 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2021-07-01 00:00:00') AND ('2022-06-30 23:59:59')
      , total_amount, 0), 0)) >= 1000 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2020-07-01 00:00:00') AND ('2021-06-30 23:59:59')
      , total_amount, 0), 0)) >= 1000 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2019-07-01 00:00:00') AND ('2020-06-30 23:59:59')
      , total_amount, 0), 0)) >= 1000

        ) THEN 200


         WHEN (
         --  Mid-Value Prospect  has given 250+ in one of the past 5 financial years, or in the current financial year so far
         SUM(COALESCE(IF( receive_date
      BETWEEN ('2024-07-01 00:00:00') AND ('2025-06-30 23:59:59.9999')
      , total_amount, 0), 0)) >= 250 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2023-07-01 00:00:00') AND ('2024-06-30 23:59:59')
      , total_amount, 0), 0)) >= 250 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2022-07-01 00:00:00') AND ('2023-06-30 23:59:59')
      , total_amount, 0), 0)) >= 250 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2021-07-01 00:00:00') AND ('2022-06-30 23:59:59')
      , total_amount, 0), 0)) >= 250 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2020-07-01 00:00:00') AND ('2021-06-30 23:59:59')
      , total_amount, 0), 0)) >= 250 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2019-07-01 00:00:00') AND ('2020-06-30 23:59:59')
      , total_amount, 0), 0)) >= 250

        ) THEN 300


         WHEN (
         --  Recurring donor  has made a recurring donation in last 36 months
         SUM(COALESCE(IF(contribution_recur_id IS NOT NULL AND  receive_date
      BETWEEN (IF (NOW() < '2025-06-30 23:59:59.9999', NOW() - INTERVAL 36 MONTH, '2025-06-30 23:59:59.9999' - INTERVAL 36 MONTH)) AND ('2025-06-30 23:59:59.9999')
      , total_amount, 0), 0)) >= 0.01

        ) THEN 400


         WHEN (
         --  Grassroots Plus Donor  has given 50+  in one of the past 5 financial years, or in the current financial year so far
         SUM(COALESCE(IF( receive_date
      BETWEEN ('2024-07-01 00:00:00') AND ('2025-06-30 23:59:59.9999')
      , total_amount, 0), 0)) >= 50 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2023-07-01 00:00:00') AND ('2024-06-30 23:59:59')
      , total_amount, 0), 0)) >= 50 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2022-07-01 00:00:00') AND ('2023-06-30 23:59:59')
      , total_amount, 0), 0)) >= 50 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2021-07-01 00:00:00') AND ('2022-06-30 23:59:59')
      , total_amount, 0), 0)) >= 50 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2020-07-01 00:00:00') AND ('2021-06-30 23:59:59')
      , total_amount, 0), 0)) >= 50 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2019-07-01 00:00:00') AND ('2020-06-30 23:59:59')
      , total_amount, 0), 0)) >= 50

        ) THEN 500


         WHEN (
         --  Grassroots Donor  has given in the last 5 financial years (or the current one)
         SUM(COALESCE(IF( receive_date
      BETWEEN ('2019-07-01 00:00:00') AND ('2025-06-30 23:59:59.9999')
      , total_amount, 0), 0)) >= 0.01

        ) THEN 600


         WHEN (
         --  All other Donors  has given but not in the last 5 financial years (or the current one)
         SUM(COALESCE(IF( receive_date
      BETWEEN (IF (NOW() < '2025-06-30 23:59:59.9999', NOW() - INTERVAL 300 MONTH, '2025-06-30 23:59:59.9999' - INTERVAL 300 MONTH)) AND ('2025-06-30 23:59:59.9999')
      , total_amount, 0), 0)) >= 0.01

        ) THEN 900

       ELSE 1000
       END  as donor_segment_id, 
CASE

         WHEN (
         --  Active Recurring  gave recurring within last month
         SUM(COALESCE(IF(contribution_recur_id IS NOT NULL AND  receive_date
      BETWEEN (IF (NOW() < '2025-06-30 23:59:59.9999', NOW() - INTERVAL 1 MONTH, '2025-06-30 23:59:59.9999' - INTERVAL 1 MONTH)) AND ('2025-06-30 23:59:59.9999')
      , total_amount, 0), 0)) >= 0.01 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2024-07-01 00:00:00') AND ('2025-06-30 23:59:59.9999')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2023-07-01 00:00:00') AND ('2024-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2022-07-01 00:00:00') AND ('2023-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2021-07-01 00:00:00') AND ('2022-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2020-07-01 00:00:00') AND ('2021-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2019-07-01 00:00:00') AND ('2020-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000

        ) THEN 2


         WHEN (
         --  Delinquent Recurring  gave recurring more than 1 month & less than 4 months ago
         SUM(COALESCE(IF(contribution_recur_id IS NOT NULL AND  receive_date
      BETWEEN (IF (NOW() < '2025-06-30 23:59:59.9999', NOW() - INTERVAL 3 MONTH, '2025-06-30 23:59:59.9999' - INTERVAL 3 MONTH)) AND (IF (NOW() < '2025-06-30 23:59:59.9999', NOW() - INTERVAL 1 MONTH, '2025-06-30 23:59:59.9999' - INTERVAL 1 MONTH))
      , total_amount, 0), 0)) >= 0.01 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2024-07-01 00:00:00') AND ('2025-06-30 23:59:59.9999')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2023-07-01 00:00:00') AND ('2024-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2022-07-01 00:00:00') AND ('2023-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2021-07-01 00:00:00') AND ('2022-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2020-07-01 00:00:00') AND ('2021-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2019-07-01 00:00:00') AND ('2020-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000

        ) THEN 4


         WHEN (
         --  Recent lapsed Recurring  gave recurring more than 3 months & less than 7 months ago
         SUM(COALESCE(IF(contribution_recur_id IS NOT NULL AND  receive_date
      BETWEEN (IF (NOW() < '2025-06-30 23:59:59.9999', NOW() - INTERVAL 6 MONTH, '2025-06-30 23:59:59.9999' - INTERVAL 6 MONTH)) AND (IF (NOW() < '2025-06-30 23:59:59.9999', NOW() - INTERVAL 3 MONTH, '2025-06-30 23:59:59.9999' - INTERVAL 3 MONTH))
      , total_amount, 0), 0)) >= 0.01 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2024-07-01 00:00:00') AND ('2025-06-30 23:59:59.9999')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2023-07-01 00:00:00') AND ('2024-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2022-07-01 00:00:00') AND ('2023-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2021-07-01 00:00:00') AND ('2022-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2020-07-01 00:00:00') AND ('2021-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2019-07-01 00:00:00') AND ('2020-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000

        ) THEN 6


         WHEN (
         --  Deep lapsed Recurring  gave recurring more than 6 months & less than 37 months ago
         SUM(COALESCE(IF(contribution_recur_id IS NOT NULL AND  receive_date
      BETWEEN (IF (NOW() < '2025-06-30 23:59:59.9999', NOW() - INTERVAL 36 MONTH, '2025-06-30 23:59:59.9999' - INTERVAL 36 MONTH)) AND (IF (NOW() < '2025-06-30 23:59:59.9999', NOW() - INTERVAL 6 MONTH, '2025-06-30 23:59:59.9999' - INTERVAL 6 MONTH))
      , total_amount, 0), 0)) >= 0.01 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2024-07-01 00:00:00') AND ('2025-06-30 23:59:59.9999')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2023-07-01 00:00:00') AND ('2024-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2022-07-01 00:00:00') AND ('2023-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2021-07-01 00:00:00') AND ('2022-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2020-07-01 00:00:00') AND ('2021-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2019-07-01 00:00:00') AND ('2020-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000

        ) THEN 8


         WHEN (
         --  Consecutive  gave last financial year and this financial year to date
         SUM(COALESCE(IF( receive_date
      BETWEEN ('2024-07-01 00:00:00') AND ('2025-06-30 23:59:59.9999')
      , total_amount, 0), 0)) >= 0.01 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2023-07-01 00:00:00') AND ('2024-06-30 23:59:59')
      , total_amount, 0), 0)) >= 0.01

        ) THEN 20


         WHEN (
         --  New  first donation this FY
         MIN(COALESCE(IF( receive_date
      BETWEEN ('2024-07-01 00:00:00') AND ('2025-06-30 23:59:59.9999')
      , total_amount, 0), 0)) >= 0.01

        ) THEN 25


         WHEN (
         --  Active  gave in this FY
         SUM(COALESCE(IF( receive_date
      BETWEEN ('2024-07-01 00:00:00') AND ('2025-06-30 23:59:59.9999')
      , total_amount, 0), 0)) >= 0.01

        ) THEN 30


         WHEN (
         --  Lybunt  gave last financial year but NOT this financial year to date
         SUM(COALESCE(IF( receive_date
      BETWEEN ('2023-07-01 00:00:00') AND ('2024-06-30 23:59:59')
      , total_amount, 0), 0)) >= 0.01

        ) THEN 35


         WHEN (
         --  Lapsed  last gave in the financial year before last
         SUM(COALESCE(IF( receive_date
      BETWEEN ('2022-07-01 00:00:00') AND ('2023-06-30 23:59:59')
      , total_amount, 0), 0)) >= 0.01

        ) THEN 50


         WHEN (
         --  Deep Lapsed  last gave between 2 & 5 financial years ago
         SUM(COALESCE(IF( receive_date
      BETWEEN ('2019-07-01 00:00:00') AND ('2022-07-01 00:00:00')
      , total_amount, 0), 0)) >= 0.01

        ) THEN 60


         WHEN (
         --  Ultra lapsed  gave prior to 5 financial years ago
         SUM(COALESCE(IF( receive_date
      BETWEEN ('2000-06-30 23:59:59') AND ('2019-06-30 23:59:59')
      , total_amount, 0), 0)) >= 0.01

        ) THEN 70

       ELSE 1000
       END  as donor_status_id, MAX(IF(financial_type_id <> 26, COALESCE(total_amount, 0), 0)) AS largest_donation, MAX(IF(financial_type_id = 26, COALESCE(total_amount, 0), 0)) AS endowment_largest_donation, MAX(COALESCE(total_amount, 0)) AS all_funds_largest_donation, SUM(COALESCE(total_amount, 0)) AS lifetime_including_endowment, SUM(IF(financial_type_id <> 26, COALESCE(total_amount, 0), 0)) AS lifetime_usd_total, SUM(IF(financial_type_id = 26, COALESCE(total_amount, 0), 0)) AS endowment_lifetime_usd_total, MAX(IF(financial_type_id <> 26 AND total_amount > 0, receive_date, NULL)) AS last_donation_date, MAX(IF(financial_type_id = 26 AND total_amount > 0, receive_date, NULL)) AS endowment_last_donation_date, MAX(IF(total_amount > 0, receive_date, NULL)) AS all_funds_last_donation_date, MIN(IF(financial_type_id <> 26 AND total_amount > 0, receive_date, NULL)) AS first_donation_date, MIN(IF(financial_type_id = 26 AND total_amount > 0, receive_date, NULL)) AS endowment_first_donation_date, MIN(IF(total_amount > 0, receive_date, NULL)) AS all_funds_first_donation_date, COUNT(IF(financial_type_id <> 26 AND total_amount > 0, receive_date, NULL)) AS number_donations, COUNT(IF(financial_type_id = 26 AND total_amount > 0, receive_date, NULL)) AS endowment_number_donations, COUNT(IF(total_amount > 0, receive_date, NULL)) AS all_funds_number_donations, SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2017-07-01' AND '2018-06-30 23:59:59', c.total_amount, 0),0)) as total_2017_2018, SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2018-07-01' AND '2019-06-30 23:59:59', c.total_amount, 0),0)) as total_2018_2019, SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2018-07-01' AND '2019-06-30 23:59:59', c.total_amount, 0),0)) as endowment_total_2018_2019, SUM(COALESCE(IF(receive_date BETWEEN '2018-07-01' AND '2019-06-30 23:59:59', c.total_amount, 0),0)) as all_funds_total_2018_2019, SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2019-07-01' AND '2020-06-30 23:59:59', c.total_amount, 0),0)) as total_2019_2020, SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2019-07-01' AND '2020-06-30 23:59:59', c.total_amount, 0),0)) as endowment_total_2019_2020, SUM(COALESCE(IF(receive_date BETWEEN '2019-07-01' AND '2020-06-30 23:59:59', c.total_amount, 0),0)) as all_funds_total_2019_2020, SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2020-07-01' AND '2021-06-30 23:59:59', c.total_amount, 0),0)) as total_2020_2021, SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2020-07-01' AND '2021-06-30 23:59:59', c.total_amount, 0),0)) as endowment_total_2020_2021, SUM(COALESCE(IF(receive_date BETWEEN '2020-07-01' AND '2021-06-30 23:59:59', c.total_amount, 0),0)) as all_funds_total_2020_2021, SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2021-07-01' AND '2022-06-30 23:59:59', c.total_amount, 0),0)) as total_2021_2022, SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2021-07-01' AND '2022-06-30 23:59:59', c.total_amount, 0),0)) as endowment_total_2021_2022, SUM(COALESCE(IF(receive_date BETWEEN '2021-07-01' AND '2022-06-30 23:59:59', c.total_amount, 0),0)) as all_funds_total_2021_2022, SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2022-07-01' AND '2023-06-30 23:59:59', c.total_amount, 0),0)) as total_2022_2023, SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2022-07-01' AND '2023-06-30 23:59:59', c.total_amount, 0),0)) as endowment_total_2022_2023, SUM(COALESCE(IF(receive_date BETWEEN '2022-07-01' AND '2023-06-30 23:59:59', c.total_amount, 0),0)) as all_funds_total_2022_2023, 
            SUM(COALESCE(IF(receive_date BETWEEN '2023-01-01' AND '2023-12-31 23:59:59', c.total_amount, 0),0))
            - SUM(COALESCE(IF(receive_date BETWEEN '2022-01-01' AND '2022-12-31 23:59:59', c.total_amount, 0),0))
             as all_funds_change_2022_2023, 
             SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2023-01-01' AND '2023-12-31 23:59:59', c.total_amount, 0),0))
            - SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2022-01-01' AND '2022-12-31 23:59:59', c.total_amount, 0),0))
             as endowment_change_2022_2023, 
            SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2023-01-01' AND '2023-12-31 23:59:59', c.total_amount, 0),0))
          - SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2022-01-01' AND '2022-12-31 23:59:59', c.total_amount, 0),0))
          as change_2022_2023, SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2023-07-01' AND '2024-06-30 23:59:59', c.total_amount, 0),0)) as total_2023_2024, SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2023-01-01' AND '2023-12-31 23:59:59', c.total_amount, 0),0)) as total_2023, SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2023-07-01' AND '2024-06-30 23:59:59', c.total_amount, 0),0)) as endowment_total_2023_2024, SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2023-01-01' AND '2023-12-31 23:59:59', c.total_amount, 0),0)) as endowment_total_2023, SUM(COALESCE(IF(receive_date BETWEEN '2023-07-01' AND '2024-06-30 23:59:59', c.total_amount, 0),0)) as all_funds_total_2023_2024, 
            SUM(COALESCE(IF(receive_date BETWEEN '2024-01-01' AND '2024-12-31 23:59:59', c.total_amount, 0),0))
            - SUM(COALESCE(IF(receive_date BETWEEN '2023-01-01' AND '2023-12-31 23:59:59', c.total_amount, 0),0))
             as all_funds_change_2023_2024, 
             SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2024-01-01' AND '2024-12-31 23:59:59', c.total_amount, 0),0))
            - SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2023-01-01' AND '2023-12-31 23:59:59', c.total_amount, 0),0))
             as endowment_change_2023_2024, 
            SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2024-01-01' AND '2024-12-31 23:59:59', c.total_amount, 0),0))
          - SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2023-01-01' AND '2023-12-31 23:59:59', c.total_amount, 0),0))
          as change_2023_2024, SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2024-07-01' AND '2025-06-30 23:59:59', c.total_amount, 0),0)) as total_2024_2025, SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2024-01-01' AND '2024-12-31 23:59:59', c.total_amount, 0),0)) as total_2024, SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2024-07-01' AND '2025-06-30 23:59:59', c.total_amount, 0),0)) as endowment_total_2024_2025, SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2024-01-01' AND '2024-12-31 23:59:59', c.total_amount, 0),0)) as endowment_total_2024, SUM(COALESCE(IF(receive_date BETWEEN '2024-07-01' AND '2025-06-30 23:59:59', c.total_amount, 0),0)) as all_funds_total_2024_2025, 
            SUM(COALESCE(IF(receive_date BETWEEN '2025-01-01' AND '2025-12-31 23:59:59', c.total_amount, 0),0))
            - SUM(COALESCE(IF(receive_date BETWEEN '2024-01-01' AND '2024-12-31 23:59:59', c.total_amount, 0),0))
             as all_funds_change_2024_2025, 
             SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2025-01-01' AND '2025-12-31 23:59:59', c.total_amount, 0),0))
            - SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2024-01-01' AND '2024-12-31 23:59:59', c.total_amount, 0),0))
             as endowment_change_2024_2025, 
            SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2025-01-01' AND '2025-12-31 23:59:59', c.total_amount, 0),0))
          - SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2024-01-01' AND '2024-12-31 23:59:59', c.total_amount, 0),0))
          as change_2024_2025, SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2025-07-01' AND '2026-06-30 23:59:59', c.total_amount, 0),0)) as total_2025_2026, SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2025-01-01' AND '2025-12-31 23:59:59', c.total_amount, 0),0)) as total_2025, SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2025-07-01' AND '2026-06-30 23:59:59', c.total_amount, 0),0)) as endowment_total_2025_2026, SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2025-01-01' AND '2025-12-31 23:59:59', c.total_amount, 0),0)) as endowment_total_2025, SUM(COALESCE(IF(receive_date BETWEEN '2025-07-01' AND '2026-06-30 23:59:59', c.total_amount, 0),0)) as all_funds_total_2025_2026, 
            SUM(COALESCE(IF(receive_date BETWEEN '2026-01-01' AND '2026-12-31 23:59:59', c.total_amount, 0),0))
            - SUM(COALESCE(IF(receive_date BETWEEN '2025-01-01' AND '2025-12-31 23:59:59', c.total_amount, 0),0))
             as all_funds_change_2025_2026, 
             SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2026-01-01' AND '2026-12-31 23:59:59', c.total_amount, 0),0))
            - SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2025-01-01' AND '2025-12-31 23:59:59', c.total_amount, 0),0))
             as endowment_change_2025_2026, 
            SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2026-01-01' AND '2026-12-31 23:59:59', c.total_amount, 0),0))
          - SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2025-01-01' AND '2025-12-31 23:59:59', c.total_amount, 0),0))
          as change_2025_2026
      FROM civicrm_contribution c
      USE INDEX(FK_civicrm_contribution_contact_id)
      WHERE  contact_id = OLD.contact_id 
        AND contribution_status_id = 1
        AND (c.trxn_id NOT LIKE 'RFD %' OR c.trxn_id IS NULL)
    ) as totals

  LEFT JOIN civicrm_contribution latest
    USE INDEX(FK_civicrm_contribution_contact_id)
    ON latest.contact_id =  OLD.contact_id
    AND latest.receive_date = totals.last_donation_date
    AND latest.contribution_status_id = 1
    AND latest.total_amount > 0
    AND (latest.trxn_id NOT LIKE 'RFD %' OR latest.trxn_id IS NULL)
    AND latest.financial_type_id <> 26
  LEFT JOIN wmf_contribution_extra x ON x.entity_id = latest.id

  LEFT JOIN civicrm_contribution earliest
    USE INDEX(FK_civicrm_contribution_contact_id)
    ON earliest.contact_id =  OLD.contact_id
    AND earliest.receive_date = totals.first_donation_date
    AND earliest.contribution_status_id = 1
    AND earliest.total_amount > 0
    AND (earliest.trxn_id NOT LIKE 'RFD %' OR earliest.trxn_id IS NULL)

  LEFT JOIN civicrm_contribution largest
    USE INDEX(FK_civicrm_contribution_contact_id)
    ON largest.contact_id =  OLD.contact_id 
    AND largest.total_amount = totals.largest_donation
    AND largest.contribution_status_id = 1
    AND largest.total_amount > 0
    AND (largest.trxn_id NOT LIKE 'RFD %' OR largest.trxn_id IS NULL) GROUP BY  OLD.contact_id
     ON DUPLICATE KEY UPDATE
    donor_segment_id = VALUES(donor_segment_id), donor_status_id = VALUES(donor_status_id), last_donation_currency = VALUES(last_donation_currency), last_donation_amount = VALUES(last_donation_amount), last_donation_usd = VALUES(last_donation_usd), first_donation_usd = VALUES(first_donation_usd), date_of_largest_donation = VALUES(date_of_largest_donation), largest_donation = VALUES(largest_donation), endowment_largest_donation = VALUES(endowment_largest_donation), all_funds_largest_donation = VALUES(all_funds_largest_donation), lifetime_including_endowment = VALUES(lifetime_including_endowment), lifetime_usd_total = VALUES(lifetime_usd_total), endowment_lifetime_usd_total = VALUES(endowment_lifetime_usd_total), last_donation_date = VALUES(last_donation_date), endowment_last_donation_date = VALUES(endowment_last_donation_date), all_funds_last_donation_date = VALUES(all_funds_last_donation_date), first_donation_date = VALUES(first_donation_date), endowment_first_donation_date = VALUES(endowment_first_donation_date), all_funds_first_donation_date = VALUES(all_funds_first_donation_date), number_donations = VALUES(number_donations), endowment_number_donations = VALUES(endowment_number_donations), all_funds_number_donations = VALUES(all_funds_number_donations), total_2017_2018 = VALUES(total_2017_2018), total_2018_2019 = VALUES(total_2018_2019), endowment_total_2018_2019 = VALUES(endowment_total_2018_2019), all_funds_total_2018_2019 = VALUES(all_funds_total_2018_2019), total_2019_2020 = VALUES(total_2019_2020), endowment_total_2019_2020 = VALUES(endowment_total_2019_2020), all_funds_total_2019_2020 = VALUES(all_funds_total_2019_2020), total_2020_2021 = VALUES(total_2020_2021), endowment_total_2020_2021 = VALUES(endowment_total_2020_2021), all_funds_total_2020_2021 = VALUES(all_funds_total_2020_2021), total_2021_2022 = VALUES(total_2021_2022), endowment_total_2021_2022 = VALUES(endowment_total_2021_2022), all_funds_total_2021_2022 = VALUES(all_funds_total_2021_2022), total_2022_2023 = VALUES(total_2022_2023), endowment_total_2022_2023 = VALUES(endowment_total_2022_2023), all_funds_total_2022_2023 = VALUES(all_funds_total_2022_2023), all_funds_change_2022_2023 = VALUES(all_funds_change_2022_2023), endowment_change_2022_2023 = VALUES(endowment_change_2022_2023), change_2022_2023 = VALUES(change_2022_2023), total_2023_2024 = VALUES(total_2023_2024), total_2023 = VALUES(total_2023), endowment_total_2023_2024 = VALUES(endowment_total_2023_2024), endowment_total_2023 = VALUES(endowment_total_2023), all_funds_total_2023_2024 = VALUES(all_funds_total_2023_2024), all_funds_change_2023_2024 = VALUES(all_funds_change_2023_2024), endowment_change_2023_2024 = VALUES(endowment_change_2023_2024), change_2023_2024 = VALUES(change_2023_2024), total_2024_2025 = VALUES(total_2024_2025), total_2024 = VALUES(total_2024), endowment_total_2024_2025 = VALUES(endowment_total_2024_2025), endowment_total_2024 = VALUES(endowment_total_2024), all_funds_total_2024_2025 = VALUES(all_funds_total_2024_2025), all_funds_change_2024_2025 = VALUES(all_funds_change_2024_2025), endowment_change_2024_2025 = VALUES(endowment_change_2024_2025), change_2024_2025 = VALUES(change_2024_2025), total_2025_2026 = VALUES(total_2025_2026), total_2025 = VALUES(total_2025), endowment_total_2025_2026 = VALUES(endowment_total_2025_2026), endowment_total_2025 = VALUES(endowment_total_2025), all_funds_total_2025_2026 = VALUES(all_funds_total_2025_2026), all_funds_change_2025_2026 = VALUES(all_funds_change_2025_2026), endowment_change_2025_2026 = VALUES(endowment_change_2025_2026), change_2025_2026 = VALUES(change_2025_2026); END IF;  END //

CREATE TRIGGER civicrm_contribution_after_delete after delete ON civicrm_contribution FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_contribution (`id`, `contact_id`, `financial_type_id`, `contribution_page_id`, `payment_instrument_id`, `receive_date`, `non_deductible_amount`, `total_amount`, `fee_amount`, `net_amount`, `trxn_id`, `invoice_id`, `currency`, `cancel_date`, `cancel_reason`, `receipt_date`, `thankyou_date`, `source`, `amount_level`, `contribution_recur_id`, `is_test`, `is_pay_later`, `contribution_status_id`, `note`, `address_id`, `check_number`, `campaign_id`, `tax_amount`, `creditnote_id`, `revenue_recognition_date`, `invoice_number`, `is_template`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`contact_id`, OLD.`financial_type_id`, OLD.`contribution_page_id`, OLD.`payment_instrument_id`, OLD.`receive_date`, OLD.`non_deductible_amount`, OLD.`total_amount`, OLD.`fee_amount`, OLD.`net_amount`, OLD.`trxn_id`, OLD.`invoice_id`, OLD.`currency`, OLD.`cancel_date`, OLD.`cancel_reason`, OLD.`receipt_date`, OLD.`thankyou_date`, OLD.`source`, OLD.`amount_level`, OLD.`contribution_recur_id`, OLD.`is_test`, OLD.`is_pay_later`, OLD.`contribution_status_id`, OLD.`note`, OLD.`address_id`, OLD.`check_number`, OLD.`campaign_id`, OLD.`tax_amount`, OLD.`creditnote_id`, OLD.`revenue_recognition_date`, OLD.`invoice_number`, OLD.`is_template`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF;
 IF 1 AND (OLD.contact_id NOT IN (2123835,19855599,12513,72)) THEN
      INSERT INTO wmf_donor (
        entity_id, donor_segment_id, donor_status_id, last_donation_currency, last_donation_amount, last_donation_usd, first_donation_usd, date_of_largest_donation, largest_donation, endowment_largest_donation, all_funds_largest_donation, lifetime_including_endowment, lifetime_usd_total, endowment_lifetime_usd_total, last_donation_date, endowment_last_donation_date, all_funds_last_donation_date, first_donation_date, endowment_first_donation_date, all_funds_first_donation_date, number_donations, endowment_number_donations, all_funds_number_donations, total_2017_2018, total_2018_2019, endowment_total_2018_2019, all_funds_total_2018_2019, total_2019_2020, endowment_total_2019_2020, all_funds_total_2019_2020, total_2020_2021, endowment_total_2020_2021, all_funds_total_2020_2021, total_2021_2022, endowment_total_2021_2022, all_funds_total_2021_2022, total_2022_2023, endowment_total_2022_2023, all_funds_total_2022_2023, all_funds_change_2022_2023, endowment_change_2022_2023, change_2022_2023, total_2023_2024, total_2023, endowment_total_2023_2024, endowment_total_2023, all_funds_total_2023_2024, all_funds_change_2023_2024, endowment_change_2023_2024, change_2023_2024, total_2024_2025, total_2024, endowment_total_2024_2025, endowment_total_2024, all_funds_total_2024_2025, all_funds_change_2024_2025, endowment_change_2024_2025, change_2024_2025, total_2025_2026, total_2025, endowment_total_2025_2026, endowment_total_2025, all_funds_total_2025_2026, all_funds_change_2025_2026, endowment_change_2025_2026, change_2025_2026
      )SELECT
       OLD.contact_id as entity_id , # to honour FULL_GROUP_BY mysql mode we need an aggregate command for each
 # field - even though we know we just want `the value from the subquery`
 # MAX is a safe wrapper for that
 # https://www.percona.com/blog/2019/05/13/solve-query-failures-regarding-only_full_group_by-sql-mode/
 MAX(donor_segment_id) as donor_segment_id, MAX(donor_status_id) as donor_status_id, MAX(COALESCE(x.original_currency,
 latest.currency)) as last_donation_currency, MAX(COALESCE(x.original_amount,
 latest.total_amount,
 0)) as last_donation_amount, MAX(COALESCE(latest.total_amount,
 0)) as last_donation_usd, MAX(COALESCE(earliest.total_amount,
 0)) as first_donation_usd, MAX(largest.receive_date) as date_of_largest_donation, MAX(largest_donation) as largest_donation, MAX(endowment_largest_donation) as endowment_largest_donation, MAX(all_funds_largest_donation) as all_funds_largest_donation, MAX(lifetime_including_endowment) as lifetime_including_endowment, MAX(lifetime_usd_total) as lifetime_usd_total, MAX(endowment_lifetime_usd_total) as endowment_lifetime_usd_total, MAX(last_donation_date) as last_donation_date, MAX(endowment_last_donation_date) as endowment_last_donation_date, MAX(all_funds_last_donation_date) as all_funds_last_donation_date, MIN(first_donation_date) as first_donation_date, MIN(endowment_first_donation_date) as endowment_first_donation_date, MIN(all_funds_first_donation_date) as all_funds_first_donation_date, MAX(number_donations) as number_donations, MAX(endowment_number_donations) as endowment_number_donations, MAX(all_funds_number_donations) as all_funds_number_donations, MAX(total_2017_2018) as total_2017_2018, MAX(total_2018_2019) as total_2018_2019, MAX(endowment_total_2018_2019) as endowment_total_2018_2019, MAX(all_funds_total_2018_2019) as all_funds_total_2018_2019, MAX(total_2019_2020) as total_2019_2020, MAX(endowment_total_2019_2020) as endowment_total_2019_2020, MAX(all_funds_total_2019_2020) as all_funds_total_2019_2020, MAX(total_2020_2021) as total_2020_2021, MAX(endowment_total_2020_2021) as endowment_total_2020_2021, MAX(all_funds_total_2020_2021) as all_funds_total_2020_2021, MAX(total_2021_2022) as total_2021_2022, MAX(endowment_total_2021_2022) as endowment_total_2021_2022, MAX(all_funds_total_2021_2022) as all_funds_total_2021_2022, MAX(total_2022_2023) as total_2022_2023, MAX(endowment_total_2022_2023) as endowment_total_2022_2023, MAX(all_funds_total_2022_2023) as all_funds_total_2022_2023, MAX(all_funds_change_2022_2023) as all_funds_change_2022_2023, MAX(endowment_change_2022_2023) as endowment_change_2022_2023, MAX(change_2022_2023) as change_2022_2023, MAX(total_2023_2024) as total_2023_2024, MAX(total_2023) as total_2023, MAX(endowment_total_2023_2024) as endowment_total_2023_2024, MAX(endowment_total_2023) as endowment_total_2023, MAX(all_funds_total_2023_2024) as all_funds_total_2023_2024, MAX(all_funds_change_2023_2024) as all_funds_change_2023_2024, MAX(endowment_change_2023_2024) as endowment_change_2023_2024, MAX(change_2023_2024) as change_2023_2024, MAX(total_2024_2025) as total_2024_2025, MAX(total_2024) as total_2024, MAX(endowment_total_2024_2025) as endowment_total_2024_2025, MAX(endowment_total_2024) as endowment_total_2024, MAX(all_funds_total_2024_2025) as all_funds_total_2024_2025, MAX(all_funds_change_2024_2025) as all_funds_change_2024_2025, MAX(endowment_change_2024_2025) as endowment_change_2024_2025, MAX(change_2024_2025) as change_2024_2025, MAX(total_2025_2026) as total_2025_2026, MAX(total_2025) as total_2025, MAX(endowment_total_2025_2026) as endowment_total_2025_2026, MAX(endowment_total_2025) as endowment_total_2025, MAX(all_funds_total_2025_2026) as all_funds_total_2025_2026, MAX(all_funds_change_2025_2026) as all_funds_change_2025_2026, MAX(endowment_change_2025_2026) as endowment_change_2025_2026, MAX(change_2025_2026) as change_2025_2026

    FROM (
      SELECT
  CASE 

         WHEN (
         --  Major Donor  has given 10,000+ in one of the past 5 financial years, or in the current financial year so far
         SUM(COALESCE(IF( receive_date
      BETWEEN ('2024-07-01 00:00:00') AND ('2025-06-30 23:59:59.9999')
      , total_amount, 0), 0)) >= 10000 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2023-07-01 00:00:00') AND ('2024-06-30 23:59:59')
      , total_amount, 0), 0)) >= 10000 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2022-07-01 00:00:00') AND ('2023-06-30 23:59:59')
      , total_amount, 0), 0)) >= 10000 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2021-07-01 00:00:00') AND ('2022-06-30 23:59:59')
      , total_amount, 0), 0)) >= 10000 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2020-07-01 00:00:00') AND ('2021-06-30 23:59:59')
      , total_amount, 0), 0)) >= 10000 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2019-07-01 00:00:00') AND ('2020-06-30 23:59:59')
      , total_amount, 0), 0)) >= 10000

        ) THEN 100


         WHEN (
         --  Mid Tier  has given 1,000+  in one of the past 5 financial years, or in the current financial year so far
         SUM(COALESCE(IF( receive_date
      BETWEEN ('2024-07-01 00:00:00') AND ('2025-06-30 23:59:59.9999')
      , total_amount, 0), 0)) >= 1000 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2023-07-01 00:00:00') AND ('2024-06-30 23:59:59')
      , total_amount, 0), 0)) >= 1000 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2022-07-01 00:00:00') AND ('2023-06-30 23:59:59')
      , total_amount, 0), 0)) >= 1000 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2021-07-01 00:00:00') AND ('2022-06-30 23:59:59')
      , total_amount, 0), 0)) >= 1000 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2020-07-01 00:00:00') AND ('2021-06-30 23:59:59')
      , total_amount, 0), 0)) >= 1000 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2019-07-01 00:00:00') AND ('2020-06-30 23:59:59')
      , total_amount, 0), 0)) >= 1000

        ) THEN 200


         WHEN (
         --  Mid-Value Prospect  has given 250+ in one of the past 5 financial years, or in the current financial year so far
         SUM(COALESCE(IF( receive_date
      BETWEEN ('2024-07-01 00:00:00') AND ('2025-06-30 23:59:59.9999')
      , total_amount, 0), 0)) >= 250 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2023-07-01 00:00:00') AND ('2024-06-30 23:59:59')
      , total_amount, 0), 0)) >= 250 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2022-07-01 00:00:00') AND ('2023-06-30 23:59:59')
      , total_amount, 0), 0)) >= 250 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2021-07-01 00:00:00') AND ('2022-06-30 23:59:59')
      , total_amount, 0), 0)) >= 250 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2020-07-01 00:00:00') AND ('2021-06-30 23:59:59')
      , total_amount, 0), 0)) >= 250 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2019-07-01 00:00:00') AND ('2020-06-30 23:59:59')
      , total_amount, 0), 0)) >= 250

        ) THEN 300


         WHEN (
         --  Recurring donor  has made a recurring donation in last 36 months
         SUM(COALESCE(IF(contribution_recur_id IS NOT NULL AND  receive_date
      BETWEEN (IF (NOW() < '2025-06-30 23:59:59.9999', NOW() - INTERVAL 36 MONTH, '2025-06-30 23:59:59.9999' - INTERVAL 36 MONTH)) AND ('2025-06-30 23:59:59.9999')
      , total_amount, 0), 0)) >= 0.01

        ) THEN 400


         WHEN (
         --  Grassroots Plus Donor  has given 50+  in one of the past 5 financial years, or in the current financial year so far
         SUM(COALESCE(IF( receive_date
      BETWEEN ('2024-07-01 00:00:00') AND ('2025-06-30 23:59:59.9999')
      , total_amount, 0), 0)) >= 50 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2023-07-01 00:00:00') AND ('2024-06-30 23:59:59')
      , total_amount, 0), 0)) >= 50 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2022-07-01 00:00:00') AND ('2023-06-30 23:59:59')
      , total_amount, 0), 0)) >= 50 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2021-07-01 00:00:00') AND ('2022-06-30 23:59:59')
      , total_amount, 0), 0)) >= 50 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2020-07-01 00:00:00') AND ('2021-06-30 23:59:59')
      , total_amount, 0), 0)) >= 50 OR SUM(COALESCE(IF( receive_date
      BETWEEN ('2019-07-01 00:00:00') AND ('2020-06-30 23:59:59')
      , total_amount, 0), 0)) >= 50

        ) THEN 500


         WHEN (
         --  Grassroots Donor  has given in the last 5 financial years (or the current one)
         SUM(COALESCE(IF( receive_date
      BETWEEN ('2019-07-01 00:00:00') AND ('2025-06-30 23:59:59.9999')
      , total_amount, 0), 0)) >= 0.01

        ) THEN 600


         WHEN (
         --  All other Donors  has given but not in the last 5 financial years (or the current one)
         SUM(COALESCE(IF( receive_date
      BETWEEN (IF (NOW() < '2025-06-30 23:59:59.9999', NOW() - INTERVAL 300 MONTH, '2025-06-30 23:59:59.9999' - INTERVAL 300 MONTH)) AND ('2025-06-30 23:59:59.9999')
      , total_amount, 0), 0)) >= 0.01

        ) THEN 900

       ELSE 1000
       END  as donor_segment_id, 
CASE

         WHEN (
         --  Active Recurring  gave recurring within last month
         SUM(COALESCE(IF(contribution_recur_id IS NOT NULL AND  receive_date
      BETWEEN (IF (NOW() < '2025-06-30 23:59:59.9999', NOW() - INTERVAL 1 MONTH, '2025-06-30 23:59:59.9999' - INTERVAL 1 MONTH)) AND ('2025-06-30 23:59:59.9999')
      , total_amount, 0), 0)) >= 0.01 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2024-07-01 00:00:00') AND ('2025-06-30 23:59:59.9999')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2023-07-01 00:00:00') AND ('2024-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2022-07-01 00:00:00') AND ('2023-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2021-07-01 00:00:00') AND ('2022-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2020-07-01 00:00:00') AND ('2021-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2019-07-01 00:00:00') AND ('2020-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000

        ) THEN 2


         WHEN (
         --  Delinquent Recurring  gave recurring more than 1 month & less than 4 months ago
         SUM(COALESCE(IF(contribution_recur_id IS NOT NULL AND  receive_date
      BETWEEN (IF (NOW() < '2025-06-30 23:59:59.9999', NOW() - INTERVAL 3 MONTH, '2025-06-30 23:59:59.9999' - INTERVAL 3 MONTH)) AND (IF (NOW() < '2025-06-30 23:59:59.9999', NOW() - INTERVAL 1 MONTH, '2025-06-30 23:59:59.9999' - INTERVAL 1 MONTH))
      , total_amount, 0), 0)) >= 0.01 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2024-07-01 00:00:00') AND ('2025-06-30 23:59:59.9999')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2023-07-01 00:00:00') AND ('2024-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2022-07-01 00:00:00') AND ('2023-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2021-07-01 00:00:00') AND ('2022-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2020-07-01 00:00:00') AND ('2021-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2019-07-01 00:00:00') AND ('2020-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000

        ) THEN 4


         WHEN (
         --  Recent lapsed Recurring  gave recurring more than 3 months & less than 7 months ago
         SUM(COALESCE(IF(contribution_recur_id IS NOT NULL AND  receive_date
      BETWEEN (IF (NOW() < '2025-06-30 23:59:59.9999', NOW() - INTERVAL 6 MONTH, '2025-06-30 23:59:59.9999' - INTERVAL 6 MONTH)) AND (IF (NOW() < '2025-06-30 23:59:59.9999', NOW() - INTERVAL 3 MONTH, '2025-06-30 23:59:59.9999' - INTERVAL 3 MONTH))
      , total_amount, 0), 0)) >= 0.01 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2024-07-01 00:00:00') AND ('2025-06-30 23:59:59.9999')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2023-07-01 00:00:00') AND ('2024-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2022-07-01 00:00:00') AND ('2023-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2021-07-01 00:00:00') AND ('2022-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2020-07-01 00:00:00') AND ('2021-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2019-07-01 00:00:00') AND ('2020-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000

        ) THEN 6


         WHEN (
         --  Deep lapsed Recurring  gave recurring more than 6 months & less than 37 months ago
         SUM(COALESCE(IF(contribution_recur_id IS NOT NULL AND  receive_date
      BETWEEN (IF (NOW() < '2025-06-30 23:59:59.9999', NOW() - INTERVAL 36 MONTH, '2025-06-30 23:59:59.9999' - INTERVAL 36 MONTH)) AND (IF (NOW() < '2025-06-30 23:59:59.9999', NOW() - INTERVAL 6 MONTH, '2025-06-30 23:59:59.9999' - INTERVAL 6 MONTH))
      , total_amount, 0), 0)) >= 0.01 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2024-07-01 00:00:00') AND ('2025-06-30 23:59:59.9999')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2023-07-01 00:00:00') AND ('2024-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2022-07-01 00:00:00') AND ('2023-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2021-07-01 00:00:00') AND ('2022-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2020-07-01 00:00:00') AND ('2021-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2019-07-01 00:00:00') AND ('2020-06-30 23:59:59')
      , total_amount, 0), 0)) < 1000

        ) THEN 8


         WHEN (
         --  Consecutive  gave last financial year and this financial year to date
         SUM(COALESCE(IF( receive_date
      BETWEEN ('2024-07-01 00:00:00') AND ('2025-06-30 23:59:59.9999')
      , total_amount, 0), 0)) >= 0.01 AND SUM(COALESCE(IF( receive_date
      BETWEEN ('2023-07-01 00:00:00') AND ('2024-06-30 23:59:59')
      , total_amount, 0), 0)) >= 0.01

        ) THEN 20


         WHEN (
         --  New  first donation this FY
         MIN(COALESCE(IF( receive_date
      BETWEEN ('2024-07-01 00:00:00') AND ('2025-06-30 23:59:59.9999')
      , total_amount, 0), 0)) >= 0.01

        ) THEN 25


         WHEN (
         --  Active  gave in this FY
         SUM(COALESCE(IF( receive_date
      BETWEEN ('2024-07-01 00:00:00') AND ('2025-06-30 23:59:59.9999')
      , total_amount, 0), 0)) >= 0.01

        ) THEN 30


         WHEN (
         --  Lybunt  gave last financial year but NOT this financial year to date
         SUM(COALESCE(IF( receive_date
      BETWEEN ('2023-07-01 00:00:00') AND ('2024-06-30 23:59:59')
      , total_amount, 0), 0)) >= 0.01

        ) THEN 35


         WHEN (
         --  Lapsed  last gave in the financial year before last
         SUM(COALESCE(IF( receive_date
      BETWEEN ('2022-07-01 00:00:00') AND ('2023-06-30 23:59:59')
      , total_amount, 0), 0)) >= 0.01

        ) THEN 50


         WHEN (
         --  Deep Lapsed  last gave between 2 & 5 financial years ago
         SUM(COALESCE(IF( receive_date
      BETWEEN ('2019-07-01 00:00:00') AND ('2022-07-01 00:00:00')
      , total_amount, 0), 0)) >= 0.01

        ) THEN 60


         WHEN (
         --  Ultra lapsed  gave prior to 5 financial years ago
         SUM(COALESCE(IF( receive_date
      BETWEEN ('2000-06-30 23:59:59') AND ('2019-06-30 23:59:59')
      , total_amount, 0), 0)) >= 0.01

        ) THEN 70

       ELSE 1000
       END  as donor_status_id, MAX(IF(financial_type_id <> 26, COALESCE(total_amount, 0), 0)) AS largest_donation, MAX(IF(financial_type_id = 26, COALESCE(total_amount, 0), 0)) AS endowment_largest_donation, MAX(COALESCE(total_amount, 0)) AS all_funds_largest_donation, SUM(COALESCE(total_amount, 0)) AS lifetime_including_endowment, SUM(IF(financial_type_id <> 26, COALESCE(total_amount, 0), 0)) AS lifetime_usd_total, SUM(IF(financial_type_id = 26, COALESCE(total_amount, 0), 0)) AS endowment_lifetime_usd_total, MAX(IF(financial_type_id <> 26 AND total_amount > 0, receive_date, NULL)) AS last_donation_date, MAX(IF(financial_type_id = 26 AND total_amount > 0, receive_date, NULL)) AS endowment_last_donation_date, MAX(IF(total_amount > 0, receive_date, NULL)) AS all_funds_last_donation_date, MIN(IF(financial_type_id <> 26 AND total_amount > 0, receive_date, NULL)) AS first_donation_date, MIN(IF(financial_type_id = 26 AND total_amount > 0, receive_date, NULL)) AS endowment_first_donation_date, MIN(IF(total_amount > 0, receive_date, NULL)) AS all_funds_first_donation_date, COUNT(IF(financial_type_id <> 26 AND total_amount > 0, receive_date, NULL)) AS number_donations, COUNT(IF(financial_type_id = 26 AND total_amount > 0, receive_date, NULL)) AS endowment_number_donations, COUNT(IF(total_amount > 0, receive_date, NULL)) AS all_funds_number_donations, SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2017-07-01' AND '2018-06-30 23:59:59', c.total_amount, 0),0)) as total_2017_2018, SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2018-07-01' AND '2019-06-30 23:59:59', c.total_amount, 0),0)) as total_2018_2019, SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2018-07-01' AND '2019-06-30 23:59:59', c.total_amount, 0),0)) as endowment_total_2018_2019, SUM(COALESCE(IF(receive_date BETWEEN '2018-07-01' AND '2019-06-30 23:59:59', c.total_amount, 0),0)) as all_funds_total_2018_2019, SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2019-07-01' AND '2020-06-30 23:59:59', c.total_amount, 0),0)) as total_2019_2020, SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2019-07-01' AND '2020-06-30 23:59:59', c.total_amount, 0),0)) as endowment_total_2019_2020, SUM(COALESCE(IF(receive_date BETWEEN '2019-07-01' AND '2020-06-30 23:59:59', c.total_amount, 0),0)) as all_funds_total_2019_2020, SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2020-07-01' AND '2021-06-30 23:59:59', c.total_amount, 0),0)) as total_2020_2021, SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2020-07-01' AND '2021-06-30 23:59:59', c.total_amount, 0),0)) as endowment_total_2020_2021, SUM(COALESCE(IF(receive_date BETWEEN '2020-07-01' AND '2021-06-30 23:59:59', c.total_amount, 0),0)) as all_funds_total_2020_2021, SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2021-07-01' AND '2022-06-30 23:59:59', c.total_amount, 0),0)) as total_2021_2022, SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2021-07-01' AND '2022-06-30 23:59:59', c.total_amount, 0),0)) as endowment_total_2021_2022, SUM(COALESCE(IF(receive_date BETWEEN '2021-07-01' AND '2022-06-30 23:59:59', c.total_amount, 0),0)) as all_funds_total_2021_2022, SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2022-07-01' AND '2023-06-30 23:59:59', c.total_amount, 0),0)) as total_2022_2023, SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2022-07-01' AND '2023-06-30 23:59:59', c.total_amount, 0),0)) as endowment_total_2022_2023, SUM(COALESCE(IF(receive_date BETWEEN '2022-07-01' AND '2023-06-30 23:59:59', c.total_amount, 0),0)) as all_funds_total_2022_2023, 
            SUM(COALESCE(IF(receive_date BETWEEN '2023-01-01' AND '2023-12-31 23:59:59', c.total_amount, 0),0))
            - SUM(COALESCE(IF(receive_date BETWEEN '2022-01-01' AND '2022-12-31 23:59:59', c.total_amount, 0),0))
             as all_funds_change_2022_2023, 
             SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2023-01-01' AND '2023-12-31 23:59:59', c.total_amount, 0),0))
            - SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2022-01-01' AND '2022-12-31 23:59:59', c.total_amount, 0),0))
             as endowment_change_2022_2023, 
            SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2023-01-01' AND '2023-12-31 23:59:59', c.total_amount, 0),0))
          - SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2022-01-01' AND '2022-12-31 23:59:59', c.total_amount, 0),0))
          as change_2022_2023, SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2023-07-01' AND '2024-06-30 23:59:59', c.total_amount, 0),0)) as total_2023_2024, SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2023-01-01' AND '2023-12-31 23:59:59', c.total_amount, 0),0)) as total_2023, SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2023-07-01' AND '2024-06-30 23:59:59', c.total_amount, 0),0)) as endowment_total_2023_2024, SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2023-01-01' AND '2023-12-31 23:59:59', c.total_amount, 0),0)) as endowment_total_2023, SUM(COALESCE(IF(receive_date BETWEEN '2023-07-01' AND '2024-06-30 23:59:59', c.total_amount, 0),0)) as all_funds_total_2023_2024, 
            SUM(COALESCE(IF(receive_date BETWEEN '2024-01-01' AND '2024-12-31 23:59:59', c.total_amount, 0),0))
            - SUM(COALESCE(IF(receive_date BETWEEN '2023-01-01' AND '2023-12-31 23:59:59', c.total_amount, 0),0))
             as all_funds_change_2023_2024, 
             SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2024-01-01' AND '2024-12-31 23:59:59', c.total_amount, 0),0))
            - SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2023-01-01' AND '2023-12-31 23:59:59', c.total_amount, 0),0))
             as endowment_change_2023_2024, 
            SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2024-01-01' AND '2024-12-31 23:59:59', c.total_amount, 0),0))
          - SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2023-01-01' AND '2023-12-31 23:59:59', c.total_amount, 0),0))
          as change_2023_2024, SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2024-07-01' AND '2025-06-30 23:59:59', c.total_amount, 0),0)) as total_2024_2025, SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2024-01-01' AND '2024-12-31 23:59:59', c.total_amount, 0),0)) as total_2024, SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2024-07-01' AND '2025-06-30 23:59:59', c.total_amount, 0),0)) as endowment_total_2024_2025, SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2024-01-01' AND '2024-12-31 23:59:59', c.total_amount, 0),0)) as endowment_total_2024, SUM(COALESCE(IF(receive_date BETWEEN '2024-07-01' AND '2025-06-30 23:59:59', c.total_amount, 0),0)) as all_funds_total_2024_2025, 
            SUM(COALESCE(IF(receive_date BETWEEN '2025-01-01' AND '2025-12-31 23:59:59', c.total_amount, 0),0))
            - SUM(COALESCE(IF(receive_date BETWEEN '2024-01-01' AND '2024-12-31 23:59:59', c.total_amount, 0),0))
             as all_funds_change_2024_2025, 
             SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2025-01-01' AND '2025-12-31 23:59:59', c.total_amount, 0),0))
            - SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2024-01-01' AND '2024-12-31 23:59:59', c.total_amount, 0),0))
             as endowment_change_2024_2025, 
            SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2025-01-01' AND '2025-12-31 23:59:59', c.total_amount, 0),0))
          - SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2024-01-01' AND '2024-12-31 23:59:59', c.total_amount, 0),0))
          as change_2024_2025, SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2025-07-01' AND '2026-06-30 23:59:59', c.total_amount, 0),0)) as total_2025_2026, SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2025-01-01' AND '2025-12-31 23:59:59', c.total_amount, 0),0)) as total_2025, SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2025-07-01' AND '2026-06-30 23:59:59', c.total_amount, 0),0)) as endowment_total_2025_2026, SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2025-01-01' AND '2025-12-31 23:59:59', c.total_amount, 0),0)) as endowment_total_2025, SUM(COALESCE(IF(receive_date BETWEEN '2025-07-01' AND '2026-06-30 23:59:59', c.total_amount, 0),0)) as all_funds_total_2025_2026, 
            SUM(COALESCE(IF(receive_date BETWEEN '2026-01-01' AND '2026-12-31 23:59:59', c.total_amount, 0),0))
            - SUM(COALESCE(IF(receive_date BETWEEN '2025-01-01' AND '2025-12-31 23:59:59', c.total_amount, 0),0))
             as all_funds_change_2025_2026, 
             SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2026-01-01' AND '2026-12-31 23:59:59', c.total_amount, 0),0))
            - SUM(COALESCE(IF(financial_type_id = 26 AND receive_date BETWEEN '2025-01-01' AND '2025-12-31 23:59:59', c.total_amount, 0),0))
             as endowment_change_2025_2026, 
            SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2026-01-01' AND '2026-12-31 23:59:59', c.total_amount, 0),0))
          - SUM(COALESCE(IF(financial_type_id <> 26 AND receive_date BETWEEN '2025-01-01' AND '2025-12-31 23:59:59', c.total_amount, 0),0))
          as change_2025_2026
      FROM civicrm_contribution c
      USE INDEX(FK_civicrm_contribution_contact_id)
      WHERE  contact_id = OLD.contact_id 
        AND contribution_status_id = 1
        AND (c.trxn_id NOT LIKE 'RFD %' OR c.trxn_id IS NULL)
    ) as totals

  LEFT JOIN civicrm_contribution latest
    USE INDEX(FK_civicrm_contribution_contact_id)
    ON latest.contact_id =  OLD.contact_id
    AND latest.receive_date = totals.last_donation_date
    AND latest.contribution_status_id = 1
    AND latest.total_amount > 0
    AND (latest.trxn_id NOT LIKE 'RFD %' OR latest.trxn_id IS NULL)
    AND latest.financial_type_id <> 26
  LEFT JOIN wmf_contribution_extra x ON x.entity_id = latest.id

  LEFT JOIN civicrm_contribution earliest
    USE INDEX(FK_civicrm_contribution_contact_id)
    ON earliest.contact_id =  OLD.contact_id
    AND earliest.receive_date = totals.first_donation_date
    AND earliest.contribution_status_id = 1
    AND earliest.total_amount > 0
    AND (earliest.trxn_id NOT LIKE 'RFD %' OR earliest.trxn_id IS NULL)

  LEFT JOIN civicrm_contribution largest
    USE INDEX(FK_civicrm_contribution_contact_id)
    ON largest.contact_id =  OLD.contact_id 
    AND largest.total_amount = totals.largest_donation
    AND largest.contribution_status_id = 1
    AND largest.total_amount > 0
    AND (largest.trxn_id NOT LIKE 'RFD %' OR largest.trxn_id IS NULL) GROUP BY  OLD.contact_id
     ON DUPLICATE KEY UPDATE
    donor_segment_id = VALUES(donor_segment_id), donor_status_id = VALUES(donor_status_id), last_donation_currency = VALUES(last_donation_currency), last_donation_amount = VALUES(last_donation_amount), last_donation_usd = VALUES(last_donation_usd), first_donation_usd = VALUES(first_donation_usd), date_of_largest_donation = VALUES(date_of_largest_donation), largest_donation = VALUES(largest_donation), endowment_largest_donation = VALUES(endowment_largest_donation), all_funds_largest_donation = VALUES(all_funds_largest_donation), lifetime_including_endowment = VALUES(lifetime_including_endowment), lifetime_usd_total = VALUES(lifetime_usd_total), endowment_lifetime_usd_total = VALUES(endowment_lifetime_usd_total), last_donation_date = VALUES(last_donation_date), endowment_last_donation_date = VALUES(endowment_last_donation_date), all_funds_last_donation_date = VALUES(all_funds_last_donation_date), first_donation_date = VALUES(first_donation_date), endowment_first_donation_date = VALUES(endowment_first_donation_date), all_funds_first_donation_date = VALUES(all_funds_first_donation_date), number_donations = VALUES(number_donations), endowment_number_donations = VALUES(endowment_number_donations), all_funds_number_donations = VALUES(all_funds_number_donations), total_2017_2018 = VALUES(total_2017_2018), total_2018_2019 = VALUES(total_2018_2019), endowment_total_2018_2019 = VALUES(endowment_total_2018_2019), all_funds_total_2018_2019 = VALUES(all_funds_total_2018_2019), total_2019_2020 = VALUES(total_2019_2020), endowment_total_2019_2020 = VALUES(endowment_total_2019_2020), all_funds_total_2019_2020 = VALUES(all_funds_total_2019_2020), total_2020_2021 = VALUES(total_2020_2021), endowment_total_2020_2021 = VALUES(endowment_total_2020_2021), all_funds_total_2020_2021 = VALUES(all_funds_total_2020_2021), total_2021_2022 = VALUES(total_2021_2022), endowment_total_2021_2022 = VALUES(endowment_total_2021_2022), all_funds_total_2021_2022 = VALUES(all_funds_total_2021_2022), total_2022_2023 = VALUES(total_2022_2023), endowment_total_2022_2023 = VALUES(endowment_total_2022_2023), all_funds_total_2022_2023 = VALUES(all_funds_total_2022_2023), all_funds_change_2022_2023 = VALUES(all_funds_change_2022_2023), endowment_change_2022_2023 = VALUES(endowment_change_2022_2023), change_2022_2023 = VALUES(change_2022_2023), total_2023_2024 = VALUES(total_2023_2024), total_2023 = VALUES(total_2023), endowment_total_2023_2024 = VALUES(endowment_total_2023_2024), endowment_total_2023 = VALUES(endowment_total_2023), all_funds_total_2023_2024 = VALUES(all_funds_total_2023_2024), all_funds_change_2023_2024 = VALUES(all_funds_change_2023_2024), endowment_change_2023_2024 = VALUES(endowment_change_2023_2024), change_2023_2024 = VALUES(change_2023_2024), total_2024_2025 = VALUES(total_2024_2025), total_2024 = VALUES(total_2024), endowment_total_2024_2025 = VALUES(endowment_total_2024_2025), endowment_total_2024 = VALUES(endowment_total_2024), all_funds_total_2024_2025 = VALUES(all_funds_total_2024_2025), all_funds_change_2024_2025 = VALUES(all_funds_change_2024_2025), endowment_change_2024_2025 = VALUES(endowment_change_2024_2025), change_2024_2025 = VALUES(change_2024_2025), total_2025_2026 = VALUES(total_2025_2026), total_2025 = VALUES(total_2025), endowment_total_2025_2026 = VALUES(endowment_total_2025_2026), endowment_total_2025 = VALUES(endowment_total_2025), all_funds_total_2025_2026 = VALUES(all_funds_total_2025_2026), all_funds_change_2025_2026 = VALUES(all_funds_change_2025_2026), endowment_change_2025_2026 = VALUES(endowment_change_2025_2026), change_2025_2026 = VALUES(change_2025_2026); END IF;  END //

CREATE TRIGGER civicrm_contribution_page_after_insert after insert ON civicrm_contribution_page FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_contribution_page (`id`, `title`, `intro_text`, `financial_type_id`, `payment_processor`, `is_credit_card_only`, `is_monetary`, `is_recur`, `recur_frequency_unit`, `is_recur_interval`, `is_pay_later`, `pay_later_text`, `pay_later_receipt`, `is_allow_other_amount`, `default_amount_id`, `min_amount`, `max_amount`, `goal_amount`, `thankyou_title`, `thankyou_text`, `thankyou_footer`, `is_email_receipt`, `receipt_from_name`, `receipt_from_email`, `cc_receipt`, `bcc_receipt`, `receipt_text`, `is_active`, `footer_text`, `amount_block_is_active`, `start_date`, `end_date`, `created_id`, `created_date`, `currency`, `campaign_id`, `is_share`, `is_confirm_enabled`, `is_recur_installments`, `adjust_recur_start_date`, `is_partial_payment`, `min_initial_amount`, `initial_amount_label`, `initial_amount_help_text`, `is_billing_required`, `frontend_title`, `name`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`title`, NEW.`intro_text`, NEW.`financial_type_id`, NEW.`payment_processor`, NEW.`is_credit_card_only`, NEW.`is_monetary`, NEW.`is_recur`, NEW.`recur_frequency_unit`, NEW.`is_recur_interval`, NEW.`is_pay_later`, NEW.`pay_later_text`, NEW.`pay_later_receipt`, NEW.`is_allow_other_amount`, NEW.`default_amount_id`, NEW.`min_amount`, NEW.`max_amount`, NEW.`goal_amount`, NEW.`thankyou_title`, NEW.`thankyou_text`, NEW.`thankyou_footer`, NEW.`is_email_receipt`, NEW.`receipt_from_name`, NEW.`receipt_from_email`, NEW.`cc_receipt`, NEW.`bcc_receipt`, NEW.`receipt_text`, NEW.`is_active`, NEW.`footer_text`, NEW.`amount_block_is_active`, NEW.`start_date`, NEW.`end_date`, NEW.`created_id`, NEW.`created_date`, NEW.`currency`, NEW.`campaign_id`, NEW.`is_share`, NEW.`is_confirm_enabled`, NEW.`is_recur_installments`, NEW.`adjust_recur_start_date`, NEW.`is_partial_payment`, NEW.`min_initial_amount`, NEW.`initial_amount_label`, NEW.`initial_amount_help_text`, NEW.`is_billing_required`, NEW.`frontend_title`, NEW.`name`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_contribution_page_after_update after update ON civicrm_contribution_page FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`title`,'') <> IFNULL(NEW.`title`,'') OR IFNULL(OLD.`intro_text`,'') <> IFNULL(NEW.`intro_text`,'') OR IFNULL(OLD.`financial_type_id`,'') <> IFNULL(NEW.`financial_type_id`,'') OR IFNULL(OLD.`payment_processor`,'') <> IFNULL(NEW.`payment_processor`,'') OR IFNULL(OLD.`is_credit_card_only`,'') <> IFNULL(NEW.`is_credit_card_only`,'') OR IFNULL(OLD.`is_monetary`,'') <> IFNULL(NEW.`is_monetary`,'') OR IFNULL(OLD.`is_recur`,'') <> IFNULL(NEW.`is_recur`,'') OR IFNULL(OLD.`recur_frequency_unit`,'') <> IFNULL(NEW.`recur_frequency_unit`,'') OR IFNULL(OLD.`is_recur_interval`,'') <> IFNULL(NEW.`is_recur_interval`,'') OR IFNULL(OLD.`is_pay_later`,'') <> IFNULL(NEW.`is_pay_later`,'') OR IFNULL(OLD.`pay_later_text`,'') <> IFNULL(NEW.`pay_later_text`,'') OR IFNULL(OLD.`pay_later_receipt`,'') <> IFNULL(NEW.`pay_later_receipt`,'') OR IFNULL(OLD.`is_allow_other_amount`,'') <> IFNULL(NEW.`is_allow_other_amount`,'') OR IFNULL(OLD.`default_amount_id`,'') <> IFNULL(NEW.`default_amount_id`,'') OR IFNULL(OLD.`min_amount`,'') <> IFNULL(NEW.`min_amount`,'') OR IFNULL(OLD.`max_amount`,'') <> IFNULL(NEW.`max_amount`,'') OR IFNULL(OLD.`goal_amount`,'') <> IFNULL(NEW.`goal_amount`,'') OR IFNULL(OLD.`thankyou_title`,'') <> IFNULL(NEW.`thankyou_title`,'') OR IFNULL(OLD.`thankyou_text`,'') <> IFNULL(NEW.`thankyou_text`,'') OR IFNULL(OLD.`thankyou_footer`,'') <> IFNULL(NEW.`thankyou_footer`,'') OR IFNULL(OLD.`is_email_receipt`,'') <> IFNULL(NEW.`is_email_receipt`,'') OR IFNULL(OLD.`receipt_from_name`,'') <> IFNULL(NEW.`receipt_from_name`,'') OR IFNULL(OLD.`receipt_from_email`,'') <> IFNULL(NEW.`receipt_from_email`,'') OR IFNULL(OLD.`cc_receipt`,'') <> IFNULL(NEW.`cc_receipt`,'') OR IFNULL(OLD.`bcc_receipt`,'') <> IFNULL(NEW.`bcc_receipt`,'') OR IFNULL(OLD.`receipt_text`,'') <> IFNULL(NEW.`receipt_text`,'') OR IFNULL(OLD.`is_active`,'') <> IFNULL(NEW.`is_active`,'') OR IFNULL(OLD.`footer_text`,'') <> IFNULL(NEW.`footer_text`,'') OR IFNULL(OLD.`amount_block_is_active`,'') <> IFNULL(NEW.`amount_block_is_active`,'') OR IFNULL(OLD.`start_date`,'') <> IFNULL(NEW.`start_date`,'') OR IFNULL(OLD.`end_date`,'') <> IFNULL(NEW.`end_date`,'') OR IFNULL(OLD.`created_id`,'') <> IFNULL(NEW.`created_id`,'') OR IFNULL(OLD.`created_date`,'') <> IFNULL(NEW.`created_date`,'') OR IFNULL(OLD.`currency`,'') <> IFNULL(NEW.`currency`,'') OR IFNULL(OLD.`campaign_id`,'') <> IFNULL(NEW.`campaign_id`,'') OR IFNULL(OLD.`is_share`,'') <> IFNULL(NEW.`is_share`,'') OR IFNULL(OLD.`is_confirm_enabled`,'') <> IFNULL(NEW.`is_confirm_enabled`,'') OR IFNULL(OLD.`is_recur_installments`,'') <> IFNULL(NEW.`is_recur_installments`,'') OR IFNULL(OLD.`adjust_recur_start_date`,'') <> IFNULL(NEW.`adjust_recur_start_date`,'') OR IFNULL(OLD.`is_partial_payment`,'') <> IFNULL(NEW.`is_partial_payment`,'') OR IFNULL(OLD.`min_initial_amount`,'') <> IFNULL(NEW.`min_initial_amount`,'') OR IFNULL(OLD.`initial_amount_label`,'') <> IFNULL(NEW.`initial_amount_label`,'') OR IFNULL(OLD.`initial_amount_help_text`,'') <> IFNULL(NEW.`initial_amount_help_text`,'') OR IFNULL(OLD.`is_billing_required`,'') <> IFNULL(NEW.`is_billing_required`,'') OR IFNULL(OLD.`frontend_title`,'') <> IFNULL(NEW.`frontend_title`,'') OR IFNULL(OLD.`name`,'') <> IFNULL(NEW.`name`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_contribution_page (`id`, `title`, `intro_text`, `financial_type_id`, `payment_processor`, `is_credit_card_only`, `is_monetary`, `is_recur`, `recur_frequency_unit`, `is_recur_interval`, `is_pay_later`, `pay_later_text`, `pay_later_receipt`, `is_allow_other_amount`, `default_amount_id`, `min_amount`, `max_amount`, `goal_amount`, `thankyou_title`, `thankyou_text`, `thankyou_footer`, `is_email_receipt`, `receipt_from_name`, `receipt_from_email`, `cc_receipt`, `bcc_receipt`, `receipt_text`, `is_active`, `footer_text`, `amount_block_is_active`, `start_date`, `end_date`, `created_id`, `created_date`, `currency`, `campaign_id`, `is_share`, `is_confirm_enabled`, `is_recur_installments`, `adjust_recur_start_date`, `is_partial_payment`, `min_initial_amount`, `initial_amount_label`, `initial_amount_help_text`, `is_billing_required`, `frontend_title`, `name`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`title`, NEW.`intro_text`, NEW.`financial_type_id`, NEW.`payment_processor`, NEW.`is_credit_card_only`, NEW.`is_monetary`, NEW.`is_recur`, NEW.`recur_frequency_unit`, NEW.`is_recur_interval`, NEW.`is_pay_later`, NEW.`pay_later_text`, NEW.`pay_later_receipt`, NEW.`is_allow_other_amount`, NEW.`default_amount_id`, NEW.`min_amount`, NEW.`max_amount`, NEW.`goal_amount`, NEW.`thankyou_title`, NEW.`thankyou_text`, NEW.`thankyou_footer`, NEW.`is_email_receipt`, NEW.`receipt_from_name`, NEW.`receipt_from_email`, NEW.`cc_receipt`, NEW.`bcc_receipt`, NEW.`receipt_text`, NEW.`is_active`, NEW.`footer_text`, NEW.`amount_block_is_active`, NEW.`start_date`, NEW.`end_date`, NEW.`created_id`, NEW.`created_date`, NEW.`currency`, NEW.`campaign_id`, NEW.`is_share`, NEW.`is_confirm_enabled`, NEW.`is_recur_installments`, NEW.`adjust_recur_start_date`, NEW.`is_partial_payment`, NEW.`min_initial_amount`, NEW.`initial_amount_label`, NEW.`initial_amount_help_text`, NEW.`is_billing_required`, NEW.`frontend_title`, NEW.`name`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_contribution_page_after_delete after delete ON civicrm_contribution_page FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_contribution_page (`id`, `title`, `intro_text`, `financial_type_id`, `payment_processor`, `is_credit_card_only`, `is_monetary`, `is_recur`, `recur_frequency_unit`, `is_recur_interval`, `is_pay_later`, `pay_later_text`, `pay_later_receipt`, `is_allow_other_amount`, `default_amount_id`, `min_amount`, `max_amount`, `goal_amount`, `thankyou_title`, `thankyou_text`, `thankyou_footer`, `is_email_receipt`, `receipt_from_name`, `receipt_from_email`, `cc_receipt`, `bcc_receipt`, `receipt_text`, `is_active`, `footer_text`, `amount_block_is_active`, `start_date`, `end_date`, `created_id`, `created_date`, `currency`, `campaign_id`, `is_share`, `is_confirm_enabled`, `is_recur_installments`, `adjust_recur_start_date`, `is_partial_payment`, `min_initial_amount`, `initial_amount_label`, `initial_amount_help_text`, `is_billing_required`, `frontend_title`, `name`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`title`, OLD.`intro_text`, OLD.`financial_type_id`, OLD.`payment_processor`, OLD.`is_credit_card_only`, OLD.`is_monetary`, OLD.`is_recur`, OLD.`recur_frequency_unit`, OLD.`is_recur_interval`, OLD.`is_pay_later`, OLD.`pay_later_text`, OLD.`pay_later_receipt`, OLD.`is_allow_other_amount`, OLD.`default_amount_id`, OLD.`min_amount`, OLD.`max_amount`, OLD.`goal_amount`, OLD.`thankyou_title`, OLD.`thankyou_text`, OLD.`thankyou_footer`, OLD.`is_email_receipt`, OLD.`receipt_from_name`, OLD.`receipt_from_email`, OLD.`cc_receipt`, OLD.`bcc_receipt`, OLD.`receipt_text`, OLD.`is_active`, OLD.`footer_text`, OLD.`amount_block_is_active`, OLD.`start_date`, OLD.`end_date`, OLD.`created_id`, OLD.`created_date`, OLD.`currency`, OLD.`campaign_id`, OLD.`is_share`, OLD.`is_confirm_enabled`, OLD.`is_recur_installments`, OLD.`adjust_recur_start_date`, OLD.`is_partial_payment`, OLD.`min_initial_amount`, OLD.`initial_amount_label`, OLD.`initial_amount_help_text`, OLD.`is_billing_required`, OLD.`frontend_title`, OLD.`name`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_contribution_product_after_insert after insert ON civicrm_contribution_product FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_contribution_product (`id`, `product_id`, `contribution_id`, `product_option`, `quantity`, `fulfilled_date`, `start_date`, `end_date`, `comment`, `financial_type_id`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`product_id`, NEW.`contribution_id`, NEW.`product_option`, NEW.`quantity`, NEW.`fulfilled_date`, NEW.`start_date`, NEW.`end_date`, NEW.`comment`, NEW.`financial_type_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_contribution_product_after_update after update ON civicrm_contribution_product FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`product_id`,'') <> IFNULL(NEW.`product_id`,'') OR IFNULL(OLD.`contribution_id`,'') <> IFNULL(NEW.`contribution_id`,'') OR IFNULL(OLD.`product_option`,'') <> IFNULL(NEW.`product_option`,'') OR IFNULL(OLD.`quantity`,'') <> IFNULL(NEW.`quantity`,'') OR IFNULL(OLD.`fulfilled_date`,'') <> IFNULL(NEW.`fulfilled_date`,'') OR IFNULL(OLD.`start_date`,'') <> IFNULL(NEW.`start_date`,'') OR IFNULL(OLD.`end_date`,'') <> IFNULL(NEW.`end_date`,'') OR IFNULL(OLD.`comment`,'') <> IFNULL(NEW.`comment`,'') OR IFNULL(OLD.`financial_type_id`,'') <> IFNULL(NEW.`financial_type_id`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_contribution_product (`id`, `product_id`, `contribution_id`, `product_option`, `quantity`, `fulfilled_date`, `start_date`, `end_date`, `comment`, `financial_type_id`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`product_id`, NEW.`contribution_id`, NEW.`product_option`, NEW.`quantity`, NEW.`fulfilled_date`, NEW.`start_date`, NEW.`end_date`, NEW.`comment`, NEW.`financial_type_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_contribution_product_after_delete after delete ON civicrm_contribution_product FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_contribution_product (`id`, `product_id`, `contribution_id`, `product_option`, `quantity`, `fulfilled_date`, `start_date`, `end_date`, `comment`, `financial_type_id`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`product_id`, OLD.`contribution_id`, OLD.`product_option`, OLD.`quantity`, OLD.`fulfilled_date`, OLD.`start_date`, OLD.`end_date`, OLD.`comment`, OLD.`financial_type_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_contribution_recur_after_insert after insert ON civicrm_contribution_recur FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_contribution_recur (`id`, `contact_id`, `amount`, `frequency_unit`, `frequency_interval`, `installments`, `start_date`, `create_date`, `modified_date`, `cancel_date`, `end_date`, `processor_id`, `trxn_id`, `invoice_id`, `contribution_status_id`, `is_test`, `cycle_day`, `next_sched_contribution_date`, `failure_count`, `failure_retry_date`, `auto_renew`, `currency`, `payment_processor_id`, `is_email_receipt`, `financial_type_id`, `payment_instrument_id`, `campaign_id`, `payment_token_id`, `cancel_reason`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`contact_id`, NEW.`amount`, NEW.`frequency_unit`, NEW.`frequency_interval`, NEW.`installments`, NEW.`start_date`, NEW.`create_date`, NEW.`modified_date`, NEW.`cancel_date`, NEW.`end_date`, NEW.`processor_id`, NEW.`trxn_id`, NEW.`invoice_id`, NEW.`contribution_status_id`, NEW.`is_test`, NEW.`cycle_day`, NEW.`next_sched_contribution_date`, NEW.`failure_count`, NEW.`failure_retry_date`, NEW.`auto_renew`, NEW.`currency`, NEW.`payment_processor_id`, NEW.`is_email_receipt`, NEW.`financial_type_id`, NEW.`payment_instrument_id`, NEW.`campaign_id`, NEW.`payment_token_id`, NEW.`cancel_reason`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_contribution_recur_after_update after update ON civicrm_contribution_recur FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`contact_id`,'') <> IFNULL(NEW.`contact_id`,'') OR IFNULL(OLD.`amount`,'') <> IFNULL(NEW.`amount`,'') OR IFNULL(OLD.`frequency_unit`,'') <> IFNULL(NEW.`frequency_unit`,'') OR IFNULL(OLD.`frequency_interval`,'') <> IFNULL(NEW.`frequency_interval`,'') OR IFNULL(OLD.`installments`,'') <> IFNULL(NEW.`installments`,'') OR IFNULL(OLD.`start_date`,'') <> IFNULL(NEW.`start_date`,'') OR IFNULL(OLD.`create_date`,'') <> IFNULL(NEW.`create_date`,'') OR IFNULL(OLD.`cancel_date`,'') <> IFNULL(NEW.`cancel_date`,'') OR IFNULL(OLD.`end_date`,'') <> IFNULL(NEW.`end_date`,'') OR IFNULL(OLD.`processor_id`,'') <> IFNULL(NEW.`processor_id`,'') OR IFNULL(OLD.`trxn_id`,'') <> IFNULL(NEW.`trxn_id`,'') OR IFNULL(OLD.`invoice_id`,'') <> IFNULL(NEW.`invoice_id`,'') OR IFNULL(OLD.`contribution_status_id`,'') <> IFNULL(NEW.`contribution_status_id`,'') OR IFNULL(OLD.`is_test`,'') <> IFNULL(NEW.`is_test`,'') OR IFNULL(OLD.`cycle_day`,'') <> IFNULL(NEW.`cycle_day`,'') OR IFNULL(OLD.`next_sched_contribution_date`,'') <> IFNULL(NEW.`next_sched_contribution_date`,'') OR IFNULL(OLD.`failure_count`,'') <> IFNULL(NEW.`failure_count`,'') OR IFNULL(OLD.`failure_retry_date`,'') <> IFNULL(NEW.`failure_retry_date`,'') OR IFNULL(OLD.`auto_renew`,'') <> IFNULL(NEW.`auto_renew`,'') OR IFNULL(OLD.`currency`,'') <> IFNULL(NEW.`currency`,'') OR IFNULL(OLD.`payment_processor_id`,'') <> IFNULL(NEW.`payment_processor_id`,'') OR IFNULL(OLD.`is_email_receipt`,'') <> IFNULL(NEW.`is_email_receipt`,'') OR IFNULL(OLD.`financial_type_id`,'') <> IFNULL(NEW.`financial_type_id`,'') OR IFNULL(OLD.`payment_instrument_id`,'') <> IFNULL(NEW.`payment_instrument_id`,'') OR IFNULL(OLD.`campaign_id`,'') <> IFNULL(NEW.`campaign_id`,'') OR IFNULL(OLD.`payment_token_id`,'') <> IFNULL(NEW.`payment_token_id`,'') OR IFNULL(OLD.`cancel_reason`,'') <> IFNULL(NEW.`cancel_reason`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_contribution_recur (`id`, `contact_id`, `amount`, `frequency_unit`, `frequency_interval`, `installments`, `start_date`, `create_date`, `modified_date`, `cancel_date`, `end_date`, `processor_id`, `trxn_id`, `invoice_id`, `contribution_status_id`, `is_test`, `cycle_day`, `next_sched_contribution_date`, `failure_count`, `failure_retry_date`, `auto_renew`, `currency`, `payment_processor_id`, `is_email_receipt`, `financial_type_id`, `payment_instrument_id`, `campaign_id`, `payment_token_id`, `cancel_reason`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`contact_id`, NEW.`amount`, NEW.`frequency_unit`, NEW.`frequency_interval`, NEW.`installments`, NEW.`start_date`, NEW.`create_date`, NEW.`modified_date`, NEW.`cancel_date`, NEW.`end_date`, NEW.`processor_id`, NEW.`trxn_id`, NEW.`invoice_id`, NEW.`contribution_status_id`, NEW.`is_test`, NEW.`cycle_day`, NEW.`next_sched_contribution_date`, NEW.`failure_count`, NEW.`failure_retry_date`, NEW.`auto_renew`, NEW.`currency`, NEW.`payment_processor_id`, NEW.`is_email_receipt`, NEW.`financial_type_id`, NEW.`payment_instrument_id`, NEW.`campaign_id`, NEW.`payment_token_id`, NEW.`cancel_reason`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF;
UPDATE civicrm_contact SET modified_date = CURRENT_TIMESTAMP WHERE id = OLD.contact_id; END //

CREATE TRIGGER civicrm_contribution_recur_after_delete after delete ON civicrm_contribution_recur FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_contribution_recur (`id`, `contact_id`, `amount`, `frequency_unit`, `frequency_interval`, `installments`, `start_date`, `create_date`, `modified_date`, `cancel_date`, `end_date`, `processor_id`, `trxn_id`, `invoice_id`, `contribution_status_id`, `is_test`, `cycle_day`, `next_sched_contribution_date`, `failure_count`, `failure_retry_date`, `auto_renew`, `currency`, `payment_processor_id`, `is_email_receipt`, `financial_type_id`, `payment_instrument_id`, `campaign_id`, `payment_token_id`, `cancel_reason`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`contact_id`, OLD.`amount`, OLD.`frequency_unit`, OLD.`frequency_interval`, OLD.`installments`, OLD.`start_date`, OLD.`create_date`, OLD.`modified_date`, OLD.`cancel_date`, OLD.`end_date`, OLD.`processor_id`, OLD.`trxn_id`, OLD.`invoice_id`, OLD.`contribution_status_id`, OLD.`is_test`, OLD.`cycle_day`, OLD.`next_sched_contribution_date`, OLD.`failure_count`, OLD.`failure_retry_date`, OLD.`auto_renew`, OLD.`currency`, OLD.`payment_processor_id`, OLD.`is_email_receipt`, OLD.`financial_type_id`, OLD.`payment_instrument_id`, OLD.`campaign_id`, OLD.`payment_token_id`, OLD.`cancel_reason`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_contribution_recur_smashpig_after_insert after insert ON civicrm_contribution_recur_smashpig FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_contribution_recur_smashpig (`id`, `entity_id`, `initial_scheme_transaction_id`, `processor_contact_id`, `rescue_reference`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`entity_id`, NEW.`initial_scheme_transaction_id`, NEW.`processor_contact_id`, NEW.`rescue_reference`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_contribution_recur_smashpig_after_update after update ON civicrm_contribution_recur_smashpig FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`entity_id`,'') <> IFNULL(NEW.`entity_id`,'') OR IFNULL(OLD.`initial_scheme_transaction_id`,'') <> IFNULL(NEW.`initial_scheme_transaction_id`,'') OR IFNULL(OLD.`processor_contact_id`,'') <> IFNULL(NEW.`processor_contact_id`,'') OR IFNULL(OLD.`rescue_reference`,'') <> IFNULL(NEW.`rescue_reference`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_contribution_recur_smashpig (`id`, `entity_id`, `initial_scheme_transaction_id`, `processor_contact_id`, `rescue_reference`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`entity_id`, NEW.`initial_scheme_transaction_id`, NEW.`processor_contact_id`, NEW.`rescue_reference`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_contribution_recur_smashpig_after_delete after delete ON civicrm_contribution_recur_smashpig FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_contribution_recur_smashpig (`id`, `entity_id`, `initial_scheme_transaction_id`, `processor_contact_id`, `rescue_reference`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`entity_id`, OLD.`initial_scheme_transaction_id`, OLD.`processor_contact_id`, OLD.`rescue_reference`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_contribution_soft_after_insert after insert ON civicrm_contribution_soft FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_contribution_soft (`id`, `contribution_id`, `contact_id`, `amount`, `pcp_id`, `pcp_display_in_roll`, `pcp_roll_nickname`, `pcp_personal_note`, `currency`, `soft_credit_type_id`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`contribution_id`, NEW.`contact_id`, NEW.`amount`, NEW.`pcp_id`, NEW.`pcp_display_in_roll`, NEW.`pcp_roll_nickname`, NEW.`pcp_personal_note`, NEW.`currency`, NEW.`soft_credit_type_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_contribution_soft_after_update after update ON civicrm_contribution_soft FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`contribution_id`,'') <> IFNULL(NEW.`contribution_id`,'') OR IFNULL(OLD.`contact_id`,'') <> IFNULL(NEW.`contact_id`,'') OR IFNULL(OLD.`amount`,'') <> IFNULL(NEW.`amount`,'') OR IFNULL(OLD.`pcp_id`,'') <> IFNULL(NEW.`pcp_id`,'') OR IFNULL(OLD.`pcp_display_in_roll`,'') <> IFNULL(NEW.`pcp_display_in_roll`,'') OR IFNULL(OLD.`pcp_roll_nickname`,'') <> IFNULL(NEW.`pcp_roll_nickname`,'') OR IFNULL(OLD.`pcp_personal_note`,'') <> IFNULL(NEW.`pcp_personal_note`,'') OR IFNULL(OLD.`currency`,'') <> IFNULL(NEW.`currency`,'') OR IFNULL(OLD.`soft_credit_type_id`,'') <> IFNULL(NEW.`soft_credit_type_id`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_contribution_soft (`id`, `contribution_id`, `contact_id`, `amount`, `pcp_id`, `pcp_display_in_roll`, `pcp_roll_nickname`, `pcp_personal_note`, `currency`, `soft_credit_type_id`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`contribution_id`, NEW.`contact_id`, NEW.`amount`, NEW.`pcp_id`, NEW.`pcp_display_in_roll`, NEW.`pcp_roll_nickname`, NEW.`pcp_personal_note`, NEW.`currency`, NEW.`soft_credit_type_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_contribution_soft_after_delete after delete ON civicrm_contribution_soft FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_contribution_soft (`id`, `contribution_id`, `contact_id`, `amount`, `pcp_id`, `pcp_display_in_roll`, `pcp_roll_nickname`, `pcp_personal_note`, `currency`, `soft_credit_type_id`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`contribution_id`, OLD.`contact_id`, OLD.`amount`, OLD.`pcp_id`, OLD.`pcp_display_in_roll`, OLD.`pcp_roll_nickname`, OLD.`pcp_personal_note`, OLD.`currency`, OLD.`soft_credit_type_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_contribution_widget_after_insert after insert ON civicrm_contribution_widget FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_contribution_widget (`id`, `contribution_page_id`, `is_active`, `title`, `url_logo`, `button_title`, `about`, `url_homepage`, `color_title`, `color_button`, `color_bar`, `color_main_text`, `color_main`, `color_main_bg`, `color_bg`, `color_about_link`, `color_homepage_link`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`contribution_page_id`, NEW.`is_active`, NEW.`title`, NEW.`url_logo`, NEW.`button_title`, NEW.`about`, NEW.`url_homepage`, NEW.`color_title`, NEW.`color_button`, NEW.`color_bar`, NEW.`color_main_text`, NEW.`color_main`, NEW.`color_main_bg`, NEW.`color_bg`, NEW.`color_about_link`, NEW.`color_homepage_link`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_contribution_widget_after_update after update ON civicrm_contribution_widget FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`contribution_page_id`,'') <> IFNULL(NEW.`contribution_page_id`,'') OR IFNULL(OLD.`is_active`,'') <> IFNULL(NEW.`is_active`,'') OR IFNULL(OLD.`title`,'') <> IFNULL(NEW.`title`,'') OR IFNULL(OLD.`url_logo`,'') <> IFNULL(NEW.`url_logo`,'') OR IFNULL(OLD.`button_title`,'') <> IFNULL(NEW.`button_title`,'') OR IFNULL(OLD.`about`,'') <> IFNULL(NEW.`about`,'') OR IFNULL(OLD.`url_homepage`,'') <> IFNULL(NEW.`url_homepage`,'') OR IFNULL(OLD.`color_title`,'') <> IFNULL(NEW.`color_title`,'') OR IFNULL(OLD.`color_button`,'') <> IFNULL(NEW.`color_button`,'') OR IFNULL(OLD.`color_bar`,'') <> IFNULL(NEW.`color_bar`,'') OR IFNULL(OLD.`color_main_text`,'') <> IFNULL(NEW.`color_main_text`,'') OR IFNULL(OLD.`color_main`,'') <> IFNULL(NEW.`color_main`,'') OR IFNULL(OLD.`color_main_bg`,'') <> IFNULL(NEW.`color_main_bg`,'') OR IFNULL(OLD.`color_bg`,'') <> IFNULL(NEW.`color_bg`,'') OR IFNULL(OLD.`color_about_link`,'') <> IFNULL(NEW.`color_about_link`,'') OR IFNULL(OLD.`color_homepage_link`,'') <> IFNULL(NEW.`color_homepage_link`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_contribution_widget (`id`, `contribution_page_id`, `is_active`, `title`, `url_logo`, `button_title`, `about`, `url_homepage`, `color_title`, `color_button`, `color_bar`, `color_main_text`, `color_main`, `color_main_bg`, `color_bg`, `color_about_link`, `color_homepage_link`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`contribution_page_id`, NEW.`is_active`, NEW.`title`, NEW.`url_logo`, NEW.`button_title`, NEW.`about`, NEW.`url_homepage`, NEW.`color_title`, NEW.`color_button`, NEW.`color_bar`, NEW.`color_main_text`, NEW.`color_main`, NEW.`color_main_bg`, NEW.`color_bg`, NEW.`color_about_link`, NEW.`color_homepage_link`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_contribution_widget_after_delete after delete ON civicrm_contribution_widget FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_contribution_widget (`id`, `contribution_page_id`, `is_active`, `title`, `url_logo`, `button_title`, `about`, `url_homepage`, `color_title`, `color_button`, `color_bar`, `color_main_text`, `color_main`, `color_main_bg`, `color_bg`, `color_about_link`, `color_homepage_link`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`contribution_page_id`, OLD.`is_active`, OLD.`title`, OLD.`url_logo`, OLD.`button_title`, OLD.`about`, OLD.`url_homepage`, OLD.`color_title`, OLD.`color_button`, OLD.`color_bar`, OLD.`color_main_text`, OLD.`color_main`, OLD.`color_main_bg`, OLD.`color_bg`, OLD.`color_about_link`, OLD.`color_homepage_link`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_country_after_insert after insert ON civicrm_country FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_country (`id`, `name`, `iso_code`, `country_code`, `idd_prefix`, `ndd_prefix`, `region_id`, `is_province_abbreviated`, `address_format_id`, `is_active`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`name`, NEW.`iso_code`, NEW.`country_code`, NEW.`idd_prefix`, NEW.`ndd_prefix`, NEW.`region_id`, NEW.`is_province_abbreviated`, NEW.`address_format_id`, NEW.`is_active`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_country_after_update after update ON civicrm_country FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`name`,'') <> IFNULL(NEW.`name`,'') OR IFNULL(OLD.`iso_code`,'') <> IFNULL(NEW.`iso_code`,'') OR IFNULL(OLD.`country_code`,'') <> IFNULL(NEW.`country_code`,'') OR IFNULL(OLD.`idd_prefix`,'') <> IFNULL(NEW.`idd_prefix`,'') OR IFNULL(OLD.`ndd_prefix`,'') <> IFNULL(NEW.`ndd_prefix`,'') OR IFNULL(OLD.`region_id`,'') <> IFNULL(NEW.`region_id`,'') OR IFNULL(OLD.`is_province_abbreviated`,'') <> IFNULL(NEW.`is_province_abbreviated`,'') OR IFNULL(OLD.`address_format_id`,'') <> IFNULL(NEW.`address_format_id`,'') OR IFNULL(OLD.`is_active`,'') <> IFNULL(NEW.`is_active`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_country (`id`, `name`, `iso_code`, `country_code`, `idd_prefix`, `ndd_prefix`, `region_id`, `is_province_abbreviated`, `address_format_id`, `is_active`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`name`, NEW.`iso_code`, NEW.`country_code`, NEW.`idd_prefix`, NEW.`ndd_prefix`, NEW.`region_id`, NEW.`is_province_abbreviated`, NEW.`address_format_id`, NEW.`is_active`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_country_after_delete after delete ON civicrm_country FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_country (`id`, `name`, `iso_code`, `country_code`, `idd_prefix`, `ndd_prefix`, `region_id`, `is_province_abbreviated`, `address_format_id`, `is_active`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`name`, OLD.`iso_code`, OLD.`country_code`, OLD.`idd_prefix`, OLD.`ndd_prefix`, OLD.`region_id`, OLD.`is_province_abbreviated`, OLD.`address_format_id`, OLD.`is_active`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_county_after_insert after insert ON civicrm_county FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_county (`id`, `name`, `abbreviation`, `state_province_id`, `is_active`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`name`, NEW.`abbreviation`, NEW.`state_province_id`, NEW.`is_active`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_county_after_update after update ON civicrm_county FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`name`,'') <> IFNULL(NEW.`name`,'') OR IFNULL(OLD.`abbreviation`,'') <> IFNULL(NEW.`abbreviation`,'') OR IFNULL(OLD.`state_province_id`,'') <> IFNULL(NEW.`state_province_id`,'') OR IFNULL(OLD.`is_active`,'') <> IFNULL(NEW.`is_active`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_county (`id`, `name`, `abbreviation`, `state_province_id`, `is_active`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`name`, NEW.`abbreviation`, NEW.`state_province_id`, NEW.`is_active`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_county_after_delete after delete ON civicrm_county FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_county (`id`, `name`, `abbreviation`, `state_province_id`, `is_active`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`name`, OLD.`abbreviation`, OLD.`state_province_id`, OLD.`is_active`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_currency_after_insert after insert ON civicrm_currency FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_currency (`id`, `name`, `symbol`, `numeric_code`, `full_name`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`name`, NEW.`symbol`, NEW.`numeric_code`, NEW.`full_name`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_currency_after_update after update ON civicrm_currency FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`name`,'') <> IFNULL(NEW.`name`,'') OR IFNULL(OLD.`symbol`,'') <> IFNULL(NEW.`symbol`,'') OR IFNULL(OLD.`numeric_code`,'') <> IFNULL(NEW.`numeric_code`,'') OR IFNULL(OLD.`full_name`,'') <> IFNULL(NEW.`full_name`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_currency (`id`, `name`, `symbol`, `numeric_code`, `full_name`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`name`, NEW.`symbol`, NEW.`numeric_code`, NEW.`full_name`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_currency_after_delete after delete ON civicrm_currency FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_currency (`id`, `name`, `symbol`, `numeric_code`, `full_name`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`name`, OLD.`symbol`, OLD.`numeric_code`, OLD.`full_name`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_custom_field_after_insert after insert ON civicrm_custom_field FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_custom_field (`id`, `custom_group_id`, `name`, `label`, `data_type`, `html_type`, `default_value`, `is_required`, `is_searchable`, `is_search_range`, `weight`, `help_pre`, `help_post`, `attributes`, `is_active`, `is_view`, `options_per_line`, `text_length`, `start_date_years`, `end_date_years`, `date_format`, `time_format`, `note_columns`, `note_rows`, `column_name`, `option_group_id`, `filter`, `in_selector`, `serialize`, `fk_entity`, `fk_entity_on_delete`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`custom_group_id`, NEW.`name`, NEW.`label`, NEW.`data_type`, NEW.`html_type`, NEW.`default_value`, NEW.`is_required`, NEW.`is_searchable`, NEW.`is_search_range`, NEW.`weight`, NEW.`help_pre`, NEW.`help_post`, NEW.`attributes`, NEW.`is_active`, NEW.`is_view`, NEW.`options_per_line`, NEW.`text_length`, NEW.`start_date_years`, NEW.`end_date_years`, NEW.`date_format`, NEW.`time_format`, NEW.`note_columns`, NEW.`note_rows`, NEW.`column_name`, NEW.`option_group_id`, NEW.`filter`, NEW.`in_selector`, NEW.`serialize`, NEW.`fk_entity`, NEW.`fk_entity_on_delete`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_custom_field_after_update after update ON civicrm_custom_field FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`custom_group_id`,'') <> IFNULL(NEW.`custom_group_id`,'') OR IFNULL(OLD.`name`,'') <> IFNULL(NEW.`name`,'') OR IFNULL(OLD.`label`,'') <> IFNULL(NEW.`label`,'') OR IFNULL(OLD.`data_type`,'') <> IFNULL(NEW.`data_type`,'') OR IFNULL(OLD.`html_type`,'') <> IFNULL(NEW.`html_type`,'') OR IFNULL(OLD.`default_value`,'') <> IFNULL(NEW.`default_value`,'') OR IFNULL(OLD.`is_required`,'') <> IFNULL(NEW.`is_required`,'') OR IFNULL(OLD.`is_searchable`,'') <> IFNULL(NEW.`is_searchable`,'') OR IFNULL(OLD.`is_search_range`,'') <> IFNULL(NEW.`is_search_range`,'') OR IFNULL(OLD.`weight`,'') <> IFNULL(NEW.`weight`,'') OR IFNULL(OLD.`help_pre`,'') <> IFNULL(NEW.`help_pre`,'') OR IFNULL(OLD.`help_post`,'') <> IFNULL(NEW.`help_post`,'') OR IFNULL(OLD.`attributes`,'') <> IFNULL(NEW.`attributes`,'') OR IFNULL(OLD.`is_active`,'') <> IFNULL(NEW.`is_active`,'') OR IFNULL(OLD.`is_view`,'') <> IFNULL(NEW.`is_view`,'') OR IFNULL(OLD.`options_per_line`,'') <> IFNULL(NEW.`options_per_line`,'') OR IFNULL(OLD.`text_length`,'') <> IFNULL(NEW.`text_length`,'') OR IFNULL(OLD.`start_date_years`,'') <> IFNULL(NEW.`start_date_years`,'') OR IFNULL(OLD.`end_date_years`,'') <> IFNULL(NEW.`end_date_years`,'') OR IFNULL(OLD.`date_format`,'') <> IFNULL(NEW.`date_format`,'') OR IFNULL(OLD.`time_format`,'') <> IFNULL(NEW.`time_format`,'') OR IFNULL(OLD.`note_columns`,'') <> IFNULL(NEW.`note_columns`,'') OR IFNULL(OLD.`note_rows`,'') <> IFNULL(NEW.`note_rows`,'') OR IFNULL(OLD.`column_name`,'') <> IFNULL(NEW.`column_name`,'') OR IFNULL(OLD.`option_group_id`,'') <> IFNULL(NEW.`option_group_id`,'') OR IFNULL(OLD.`filter`,'') <> IFNULL(NEW.`filter`,'') OR IFNULL(OLD.`in_selector`,'') <> IFNULL(NEW.`in_selector`,'') OR IFNULL(OLD.`serialize`,'') <> IFNULL(NEW.`serialize`,'') OR IFNULL(OLD.`fk_entity`,'') <> IFNULL(NEW.`fk_entity`,'') OR IFNULL(OLD.`fk_entity_on_delete`,'') <> IFNULL(NEW.`fk_entity_on_delete`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_custom_field (`id`, `custom_group_id`, `name`, `label`, `data_type`, `html_type`, `default_value`, `is_required`, `is_searchable`, `is_search_range`, `weight`, `help_pre`, `help_post`, `attributes`, `is_active`, `is_view`, `options_per_line`, `text_length`, `start_date_years`, `end_date_years`, `date_format`, `time_format`, `note_columns`, `note_rows`, `column_name`, `option_group_id`, `filter`, `in_selector`, `serialize`, `fk_entity`, `fk_entity_on_delete`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`custom_group_id`, NEW.`name`, NEW.`label`, NEW.`data_type`, NEW.`html_type`, NEW.`default_value`, NEW.`is_required`, NEW.`is_searchable`, NEW.`is_search_range`, NEW.`weight`, NEW.`help_pre`, NEW.`help_post`, NEW.`attributes`, NEW.`is_active`, NEW.`is_view`, NEW.`options_per_line`, NEW.`text_length`, NEW.`start_date_years`, NEW.`end_date_years`, NEW.`date_format`, NEW.`time_format`, NEW.`note_columns`, NEW.`note_rows`, NEW.`column_name`, NEW.`option_group_id`, NEW.`filter`, NEW.`in_selector`, NEW.`serialize`, NEW.`fk_entity`, NEW.`fk_entity_on_delete`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_custom_field_after_delete after delete ON civicrm_custom_field FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_custom_field (`id`, `custom_group_id`, `name`, `label`, `data_type`, `html_type`, `default_value`, `is_required`, `is_searchable`, `is_search_range`, `weight`, `help_pre`, `help_post`, `attributes`, `is_active`, `is_view`, `options_per_line`, `text_length`, `start_date_years`, `end_date_years`, `date_format`, `time_format`, `note_columns`, `note_rows`, `column_name`, `option_group_id`, `filter`, `in_selector`, `serialize`, `fk_entity`, `fk_entity_on_delete`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`custom_group_id`, OLD.`name`, OLD.`label`, OLD.`data_type`, OLD.`html_type`, OLD.`default_value`, OLD.`is_required`, OLD.`is_searchable`, OLD.`is_search_range`, OLD.`weight`, OLD.`help_pre`, OLD.`help_post`, OLD.`attributes`, OLD.`is_active`, OLD.`is_view`, OLD.`options_per_line`, OLD.`text_length`, OLD.`start_date_years`, OLD.`end_date_years`, OLD.`date_format`, OLD.`time_format`, OLD.`note_columns`, OLD.`note_rows`, OLD.`column_name`, OLD.`option_group_id`, OLD.`filter`, OLD.`in_selector`, OLD.`serialize`, OLD.`fk_entity`, OLD.`fk_entity_on_delete`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_custom_group_after_insert after insert ON civicrm_custom_group FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_custom_group (`id`, `name`, `title`, `extends`, `extends_entity_column_id`, `extends_entity_column_value`, `style`, `collapse_display`, `help_pre`, `help_post`, `weight`, `is_active`, `table_name`, `is_multiple`, `min_multiple`, `max_multiple`, `collapse_adv_display`, `created_id`, `created_date`, `is_reserved`, `is_public`, `icon`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`name`, NEW.`title`, NEW.`extends`, NEW.`extends_entity_column_id`, NEW.`extends_entity_column_value`, NEW.`style`, NEW.`collapse_display`, NEW.`help_pre`, NEW.`help_post`, NEW.`weight`, NEW.`is_active`, NEW.`table_name`, NEW.`is_multiple`, NEW.`min_multiple`, NEW.`max_multiple`, NEW.`collapse_adv_display`, NEW.`created_id`, NEW.`created_date`, NEW.`is_reserved`, NEW.`is_public`, NEW.`icon`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_custom_group_after_update after update ON civicrm_custom_group FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`name`,'') <> IFNULL(NEW.`name`,'') OR IFNULL(OLD.`title`,'') <> IFNULL(NEW.`title`,'') OR IFNULL(OLD.`extends`,'') <> IFNULL(NEW.`extends`,'') OR IFNULL(OLD.`extends_entity_column_id`,'') <> IFNULL(NEW.`extends_entity_column_id`,'') OR IFNULL(OLD.`extends_entity_column_value`,'') <> IFNULL(NEW.`extends_entity_column_value`,'') OR IFNULL(OLD.`style`,'') <> IFNULL(NEW.`style`,'') OR IFNULL(OLD.`collapse_display`,'') <> IFNULL(NEW.`collapse_display`,'') OR IFNULL(OLD.`help_pre`,'') <> IFNULL(NEW.`help_pre`,'') OR IFNULL(OLD.`help_post`,'') <> IFNULL(NEW.`help_post`,'') OR IFNULL(OLD.`weight`,'') <> IFNULL(NEW.`weight`,'') OR IFNULL(OLD.`is_active`,'') <> IFNULL(NEW.`is_active`,'') OR IFNULL(OLD.`table_name`,'') <> IFNULL(NEW.`table_name`,'') OR IFNULL(OLD.`is_multiple`,'') <> IFNULL(NEW.`is_multiple`,'') OR IFNULL(OLD.`min_multiple`,'') <> IFNULL(NEW.`min_multiple`,'') OR IFNULL(OLD.`max_multiple`,'') <> IFNULL(NEW.`max_multiple`,'') OR IFNULL(OLD.`collapse_adv_display`,'') <> IFNULL(NEW.`collapse_adv_display`,'') OR IFNULL(OLD.`created_id`,'') <> IFNULL(NEW.`created_id`,'') OR IFNULL(OLD.`created_date`,'') <> IFNULL(NEW.`created_date`,'') OR IFNULL(OLD.`is_reserved`,'') <> IFNULL(NEW.`is_reserved`,'') OR IFNULL(OLD.`is_public`,'') <> IFNULL(NEW.`is_public`,'') OR IFNULL(OLD.`icon`,'') <> IFNULL(NEW.`icon`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_custom_group (`id`, `name`, `title`, `extends`, `extends_entity_column_id`, `extends_entity_column_value`, `style`, `collapse_display`, `help_pre`, `help_post`, `weight`, `is_active`, `table_name`, `is_multiple`, `min_multiple`, `max_multiple`, `collapse_adv_display`, `created_id`, `created_date`, `is_reserved`, `is_public`, `icon`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`name`, NEW.`title`, NEW.`extends`, NEW.`extends_entity_column_id`, NEW.`extends_entity_column_value`, NEW.`style`, NEW.`collapse_display`, NEW.`help_pre`, NEW.`help_post`, NEW.`weight`, NEW.`is_active`, NEW.`table_name`, NEW.`is_multiple`, NEW.`min_multiple`, NEW.`max_multiple`, NEW.`collapse_adv_display`, NEW.`created_id`, NEW.`created_date`, NEW.`is_reserved`, NEW.`is_public`, NEW.`icon`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_custom_group_after_delete after delete ON civicrm_custom_group FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_custom_group (`id`, `name`, `title`, `extends`, `extends_entity_column_id`, `extends_entity_column_value`, `style`, `collapse_display`, `help_pre`, `help_post`, `weight`, `is_active`, `table_name`, `is_multiple`, `min_multiple`, `max_multiple`, `collapse_adv_display`, `created_id`, `created_date`, `is_reserved`, `is_public`, `icon`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`name`, OLD.`title`, OLD.`extends`, OLD.`extends_entity_column_id`, OLD.`extends_entity_column_value`, OLD.`style`, OLD.`collapse_display`, OLD.`help_pre`, OLD.`help_post`, OLD.`weight`, OLD.`is_active`, OLD.`table_name`, OLD.`is_multiple`, OLD.`min_multiple`, OLD.`max_multiple`, OLD.`collapse_adv_display`, OLD.`created_id`, OLD.`created_date`, OLD.`is_reserved`, OLD.`is_public`, OLD.`icon`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_cxn_after_insert after insert ON civicrm_cxn FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_cxn (`id`, `app_guid`, `app_meta`, `cxn_guid`, `secret`, `perm`, `options`, `is_active`, `created_date`, `modified_date`, `fetched_date`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`app_guid`, NEW.`app_meta`, NEW.`cxn_guid`, NEW.`secret`, NEW.`perm`, NEW.`options`, NEW.`is_active`, NEW.`created_date`, NEW.`modified_date`, NEW.`fetched_date`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_cxn_after_update after update ON civicrm_cxn FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`app_guid`,'') <> IFNULL(NEW.`app_guid`,'') OR IFNULL(OLD.`app_meta`,'') <> IFNULL(NEW.`app_meta`,'') OR IFNULL(OLD.`cxn_guid`,'') <> IFNULL(NEW.`cxn_guid`,'') OR IFNULL(OLD.`secret`,'') <> IFNULL(NEW.`secret`,'') OR IFNULL(OLD.`perm`,'') <> IFNULL(NEW.`perm`,'') OR IFNULL(OLD.`options`,'') <> IFNULL(NEW.`options`,'') OR IFNULL(OLD.`is_active`,'') <> IFNULL(NEW.`is_active`,'') OR IFNULL(OLD.`created_date`,'') <> IFNULL(NEW.`created_date`,'') OR IFNULL(OLD.`fetched_date`,'') <> IFNULL(NEW.`fetched_date`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_cxn (`id`, `app_guid`, `app_meta`, `cxn_guid`, `secret`, `perm`, `options`, `is_active`, `created_date`, `modified_date`, `fetched_date`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`app_guid`, NEW.`app_meta`, NEW.`cxn_guid`, NEW.`secret`, NEW.`perm`, NEW.`options`, NEW.`is_active`, NEW.`created_date`, NEW.`modified_date`, NEW.`fetched_date`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_cxn_after_delete after delete ON civicrm_cxn FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_cxn (`id`, `app_guid`, `app_meta`, `cxn_guid`, `secret`, `perm`, `options`, `is_active`, `created_date`, `modified_date`, `fetched_date`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`app_guid`, OLD.`app_meta`, OLD.`cxn_guid`, OLD.`secret`, OLD.`perm`, OLD.`options`, OLD.`is_active`, OLD.`created_date`, OLD.`modified_date`, OLD.`fetched_date`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_dashboard_after_insert after insert ON civicrm_dashboard FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_dashboard (`id`, `domain_id`, `name`, `label`, `url`, `permission`, `permission_operator`, `is_active`, `is_reserved`, `fullscreen_url`, `cache_minutes`, `directive`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`domain_id`, NEW.`name`, NEW.`label`, NEW.`url`, NEW.`permission`, NEW.`permission_operator`, NEW.`is_active`, NEW.`is_reserved`, NEW.`fullscreen_url`, NEW.`cache_minutes`, NEW.`directive`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_dashboard_after_update after update ON civicrm_dashboard FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`domain_id`,'') <> IFNULL(NEW.`domain_id`,'') OR IFNULL(OLD.`name`,'') <> IFNULL(NEW.`name`,'') OR IFNULL(OLD.`label`,'') <> IFNULL(NEW.`label`,'') OR IFNULL(OLD.`url`,'') <> IFNULL(NEW.`url`,'') OR IFNULL(OLD.`permission`,'') <> IFNULL(NEW.`permission`,'') OR IFNULL(OLD.`permission_operator`,'') <> IFNULL(NEW.`permission_operator`,'') OR IFNULL(OLD.`is_active`,'') <> IFNULL(NEW.`is_active`,'') OR IFNULL(OLD.`is_reserved`,'') <> IFNULL(NEW.`is_reserved`,'') OR IFNULL(OLD.`fullscreen_url`,'') <> IFNULL(NEW.`fullscreen_url`,'') OR IFNULL(OLD.`cache_minutes`,'') <> IFNULL(NEW.`cache_minutes`,'') OR IFNULL(OLD.`directive`,'') <> IFNULL(NEW.`directive`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_dashboard (`id`, `domain_id`, `name`, `label`, `url`, `permission`, `permission_operator`, `is_active`, `is_reserved`, `fullscreen_url`, `cache_minutes`, `directive`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`domain_id`, NEW.`name`, NEW.`label`, NEW.`url`, NEW.`permission`, NEW.`permission_operator`, NEW.`is_active`, NEW.`is_reserved`, NEW.`fullscreen_url`, NEW.`cache_minutes`, NEW.`directive`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_dashboard_after_delete after delete ON civicrm_dashboard FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_dashboard (`id`, `domain_id`, `name`, `label`, `url`, `permission`, `permission_operator`, `is_active`, `is_reserved`, `fullscreen_url`, `cache_minutes`, `directive`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`domain_id`, OLD.`name`, OLD.`label`, OLD.`url`, OLD.`permission`, OLD.`permission_operator`, OLD.`is_active`, OLD.`is_reserved`, OLD.`fullscreen_url`, OLD.`cache_minutes`, OLD.`directive`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_dashboard_contact_after_insert after insert ON civicrm_dashboard_contact FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_dashboard_contact (`id`, `dashboard_id`, `contact_id`, `column_no`, `is_active`, `weight`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`dashboard_id`, NEW.`contact_id`, NEW.`column_no`, NEW.`is_active`, NEW.`weight`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_dashboard_contact_after_update after update ON civicrm_dashboard_contact FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`dashboard_id`,'') <> IFNULL(NEW.`dashboard_id`,'') OR IFNULL(OLD.`contact_id`,'') <> IFNULL(NEW.`contact_id`,'') OR IFNULL(OLD.`column_no`,'') <> IFNULL(NEW.`column_no`,'') OR IFNULL(OLD.`is_active`,'') <> IFNULL(NEW.`is_active`,'') OR IFNULL(OLD.`weight`,'') <> IFNULL(NEW.`weight`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_dashboard_contact (`id`, `dashboard_id`, `contact_id`, `column_no`, `is_active`, `weight`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`dashboard_id`, NEW.`contact_id`, NEW.`column_no`, NEW.`is_active`, NEW.`weight`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_dashboard_contact_after_delete after delete ON civicrm_dashboard_contact FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_dashboard_contact (`id`, `dashboard_id`, `contact_id`, `column_no`, `is_active`, `weight`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`dashboard_id`, OLD.`contact_id`, OLD.`column_no`, OLD.`is_active`, OLD.`weight`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_dedupe_exception_after_insert after insert ON civicrm_dedupe_exception FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_dedupe_exception (`id`, `contact_id1`, `contact_id2`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`contact_id1`, NEW.`contact_id2`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_dedupe_exception_after_update after update ON civicrm_dedupe_exception FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`contact_id1`,'') <> IFNULL(NEW.`contact_id1`,'') OR IFNULL(OLD.`contact_id2`,'') <> IFNULL(NEW.`contact_id2`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_dedupe_exception (`id`, `contact_id1`, `contact_id2`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`contact_id1`, NEW.`contact_id2`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_dedupe_exception_after_delete after delete ON civicrm_dedupe_exception FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_dedupe_exception (`id`, `contact_id1`, `contact_id2`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`contact_id1`, OLD.`contact_id2`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_dedupe_rule_after_insert after insert ON civicrm_dedupe_rule FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_dedupe_rule (`id`, `dedupe_rule_group_id`, `rule_table`, `rule_field`, `rule_length`, `rule_weight`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`dedupe_rule_group_id`, NEW.`rule_table`, NEW.`rule_field`, NEW.`rule_length`, NEW.`rule_weight`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_dedupe_rule_after_update after update ON civicrm_dedupe_rule FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`dedupe_rule_group_id`,'') <> IFNULL(NEW.`dedupe_rule_group_id`,'') OR IFNULL(OLD.`rule_table`,'') <> IFNULL(NEW.`rule_table`,'') OR IFNULL(OLD.`rule_field`,'') <> IFNULL(NEW.`rule_field`,'') OR IFNULL(OLD.`rule_length`,'') <> IFNULL(NEW.`rule_length`,'') OR IFNULL(OLD.`rule_weight`,'') <> IFNULL(NEW.`rule_weight`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_dedupe_rule (`id`, `dedupe_rule_group_id`, `rule_table`, `rule_field`, `rule_length`, `rule_weight`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`dedupe_rule_group_id`, NEW.`rule_table`, NEW.`rule_field`, NEW.`rule_length`, NEW.`rule_weight`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_dedupe_rule_after_delete after delete ON civicrm_dedupe_rule FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_dedupe_rule (`id`, `dedupe_rule_group_id`, `rule_table`, `rule_field`, `rule_length`, `rule_weight`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`dedupe_rule_group_id`, OLD.`rule_table`, OLD.`rule_field`, OLD.`rule_length`, OLD.`rule_weight`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_dedupe_rule_group_after_insert after insert ON civicrm_dedupe_rule_group FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_dedupe_rule_group (`id`, `contact_type`, `threshold`, `used`, `name`, `title`, `is_reserved`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`contact_type`, NEW.`threshold`, NEW.`used`, NEW.`name`, NEW.`title`, NEW.`is_reserved`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_dedupe_rule_group_after_update after update ON civicrm_dedupe_rule_group FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`contact_type`,'') <> IFNULL(NEW.`contact_type`,'') OR IFNULL(OLD.`threshold`,'') <> IFNULL(NEW.`threshold`,'') OR IFNULL(OLD.`used`,'') <> IFNULL(NEW.`used`,'') OR IFNULL(OLD.`name`,'') <> IFNULL(NEW.`name`,'') OR IFNULL(OLD.`title`,'') <> IFNULL(NEW.`title`,'') OR IFNULL(OLD.`is_reserved`,'') <> IFNULL(NEW.`is_reserved`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_dedupe_rule_group (`id`, `contact_type`, `threshold`, `used`, `name`, `title`, `is_reserved`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`contact_type`, NEW.`threshold`, NEW.`used`, NEW.`name`, NEW.`title`, NEW.`is_reserved`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_dedupe_rule_group_after_delete after delete ON civicrm_dedupe_rule_group FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_dedupe_rule_group (`id`, `contact_type`, `threshold`, `used`, `name`, `title`, `is_reserved`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`contact_type`, OLD.`threshold`, OLD.`used`, OLD.`name`, OLD.`title`, OLD.`is_reserved`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_discount_after_insert after insert ON civicrm_discount FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_discount (`id`, `entity_table`, `entity_id`, `price_set_id`, `start_date`, `end_date`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`entity_table`, NEW.`entity_id`, NEW.`price_set_id`, NEW.`start_date`, NEW.`end_date`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_discount_after_update after update ON civicrm_discount FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`entity_table`,'') <> IFNULL(NEW.`entity_table`,'') OR IFNULL(OLD.`entity_id`,'') <> IFNULL(NEW.`entity_id`,'') OR IFNULL(OLD.`price_set_id`,'') <> IFNULL(NEW.`price_set_id`,'') OR IFNULL(OLD.`start_date`,'') <> IFNULL(NEW.`start_date`,'') OR IFNULL(OLD.`end_date`,'') <> IFNULL(NEW.`end_date`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_discount (`id`, `entity_table`, `entity_id`, `price_set_id`, `start_date`, `end_date`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`entity_table`, NEW.`entity_id`, NEW.`price_set_id`, NEW.`start_date`, NEW.`end_date`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_discount_after_delete after delete ON civicrm_discount FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_discount (`id`, `entity_table`, `entity_id`, `price_set_id`, `start_date`, `end_date`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`entity_table`, OLD.`entity_id`, OLD.`price_set_id`, OLD.`start_date`, OLD.`end_date`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_domain_after_insert after insert ON civicrm_domain FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_domain (`id`, `name`, `description`, `version`, `locales`, `locale_custom_strings`, `contact_id`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`name`, NEW.`description`, NEW.`version`, NEW.`locales`, NEW.`locale_custom_strings`, NEW.`contact_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_domain_after_update after update ON civicrm_domain FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`name`,'') <> IFNULL(NEW.`name`,'') OR IFNULL(OLD.`description`,'') <> IFNULL(NEW.`description`,'') OR IFNULL(OLD.`version`,'') <> IFNULL(NEW.`version`,'') OR IFNULL(OLD.`locales`,'') <> IFNULL(NEW.`locales`,'') OR IFNULL(OLD.`locale_custom_strings`,'') <> IFNULL(NEW.`locale_custom_strings`,'') OR IFNULL(OLD.`contact_id`,'') <> IFNULL(NEW.`contact_id`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_domain (`id`, `name`, `description`, `version`, `locales`, `locale_custom_strings`, `contact_id`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`name`, NEW.`description`, NEW.`version`, NEW.`locales`, NEW.`locale_custom_strings`, NEW.`contact_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_domain_after_delete after delete ON civicrm_domain FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_domain (`id`, `name`, `description`, `version`, `locales`, `locale_custom_strings`, `contact_id`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`name`, OLD.`description`, OLD.`version`, OLD.`locales`, OLD.`locale_custom_strings`, OLD.`contact_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_email_after_insert after insert ON civicrm_email FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_email (`id`, `contact_id`, `location_type_id`, `email`, `is_primary`, `is_billing`, `on_hold`, `is_bulkmail`, `hold_date`, `reset_date`, `signature_text`, `signature_html`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`contact_id`, NEW.`location_type_id`, NEW.`email`, NEW.`is_primary`, NEW.`is_billing`, NEW.`on_hold`, NEW.`is_bulkmail`, NEW.`hold_date`, NEW.`reset_date`, NEW.`signature_text`, NEW.`signature_html`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF;
UPDATE civicrm_contact SET modified_date = CURRENT_TIMESTAMP WHERE id = NEW.contact_id; END //

CREATE TRIGGER civicrm_email_after_update after update ON civicrm_email FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`contact_id`,'') <> IFNULL(NEW.`contact_id`,'') OR IFNULL(OLD.`location_type_id`,'') <> IFNULL(NEW.`location_type_id`,'') OR IFNULL(OLD.`email`,'') <> IFNULL(NEW.`email`,'') OR IFNULL(OLD.`is_primary`,'') <> IFNULL(NEW.`is_primary`,'') OR IFNULL(OLD.`is_billing`,'') <> IFNULL(NEW.`is_billing`,'') OR IFNULL(OLD.`on_hold`,'') <> IFNULL(NEW.`on_hold`,'') OR IFNULL(OLD.`is_bulkmail`,'') <> IFNULL(NEW.`is_bulkmail`,'') OR IFNULL(OLD.`hold_date`,'') <> IFNULL(NEW.`hold_date`,'') OR IFNULL(OLD.`reset_date`,'') <> IFNULL(NEW.`reset_date`,'') OR IFNULL(OLD.`signature_text`,'') <> IFNULL(NEW.`signature_text`,'') OR IFNULL(OLD.`signature_html`,'') <> IFNULL(NEW.`signature_html`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_email (`id`, `contact_id`, `location_type_id`, `email`, `is_primary`, `is_billing`, `on_hold`, `is_bulkmail`, `hold_date`, `reset_date`, `signature_text`, `signature_html`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`contact_id`, NEW.`location_type_id`, NEW.`email`, NEW.`is_primary`, NEW.`is_billing`, NEW.`on_hold`, NEW.`is_bulkmail`, NEW.`hold_date`, NEW.`reset_date`, NEW.`signature_text`, NEW.`signature_html`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF;
UPDATE civicrm_contact SET modified_date = CURRENT_TIMESTAMP WHERE id = NEW.contact_id; END //

CREATE TRIGGER civicrm_email_after_delete after delete ON civicrm_email FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_email (`id`, `contact_id`, `location_type_id`, `email`, `is_primary`, `is_billing`, `on_hold`, `is_bulkmail`, `hold_date`, `reset_date`, `signature_text`, `signature_html`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`contact_id`, OLD.`location_type_id`, OLD.`email`, OLD.`is_primary`, OLD.`is_billing`, OLD.`on_hold`, OLD.`is_bulkmail`, OLD.`hold_date`, OLD.`reset_date`, OLD.`signature_text`, OLD.`signature_html`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF;
UPDATE civicrm_contact SET modified_date = CURRENT_TIMESTAMP WHERE id = OLD.contact_id; END //

CREATE TRIGGER civicrm_entity_batch_after_insert after insert ON civicrm_entity_batch FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_entity_batch (`id`, `entity_table`, `entity_id`, `batch_id`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`entity_table`, NEW.`entity_id`, NEW.`batch_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_entity_batch_after_update after update ON civicrm_entity_batch FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`entity_table`,'') <> IFNULL(NEW.`entity_table`,'') OR IFNULL(OLD.`entity_id`,'') <> IFNULL(NEW.`entity_id`,'') OR IFNULL(OLD.`batch_id`,'') <> IFNULL(NEW.`batch_id`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_entity_batch (`id`, `entity_table`, `entity_id`, `batch_id`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`entity_table`, NEW.`entity_id`, NEW.`batch_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_entity_batch_after_delete after delete ON civicrm_entity_batch FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_entity_batch (`id`, `entity_table`, `entity_id`, `batch_id`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`entity_table`, OLD.`entity_id`, OLD.`batch_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_entity_file_after_insert after insert ON civicrm_entity_file FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_entity_file (`id`, `entity_table`, `entity_id`, `file_id`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`entity_table`, NEW.`entity_id`, NEW.`file_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_entity_file_after_update after update ON civicrm_entity_file FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`entity_table`,'') <> IFNULL(NEW.`entity_table`,'') OR IFNULL(OLD.`entity_id`,'') <> IFNULL(NEW.`entity_id`,'') OR IFNULL(OLD.`file_id`,'') <> IFNULL(NEW.`file_id`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_entity_file (`id`, `entity_table`, `entity_id`, `file_id`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`entity_table`, NEW.`entity_id`, NEW.`file_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_entity_file_after_delete after delete ON civicrm_entity_file FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_entity_file (`id`, `entity_table`, `entity_id`, `file_id`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`entity_table`, OLD.`entity_id`, OLD.`file_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_entity_financial_account_after_insert after insert ON civicrm_entity_financial_account FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_entity_financial_account (`id`, `entity_table`, `entity_id`, `account_relationship`, `financial_account_id`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`entity_table`, NEW.`entity_id`, NEW.`account_relationship`, NEW.`financial_account_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_entity_financial_account_after_update after update ON civicrm_entity_financial_account FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`entity_table`,'') <> IFNULL(NEW.`entity_table`,'') OR IFNULL(OLD.`entity_id`,'') <> IFNULL(NEW.`entity_id`,'') OR IFNULL(OLD.`account_relationship`,'') <> IFNULL(NEW.`account_relationship`,'') OR IFNULL(OLD.`financial_account_id`,'') <> IFNULL(NEW.`financial_account_id`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_entity_financial_account (`id`, `entity_table`, `entity_id`, `account_relationship`, `financial_account_id`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`entity_table`, NEW.`entity_id`, NEW.`account_relationship`, NEW.`financial_account_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_entity_financial_account_after_delete after delete ON civicrm_entity_financial_account FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_entity_financial_account (`id`, `entity_table`, `entity_id`, `account_relationship`, `financial_account_id`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`entity_table`, OLD.`entity_id`, OLD.`account_relationship`, OLD.`financial_account_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_entity_tag_after_insert after insert ON civicrm_entity_tag FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_entity_tag (`id`, `entity_table`, `entity_id`, `tag_id`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`entity_table`, NEW.`entity_id`, NEW.`tag_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_entity_tag_after_update after update ON civicrm_entity_tag FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`entity_table`,'') <> IFNULL(NEW.`entity_table`,'') OR IFNULL(OLD.`entity_id`,'') <> IFNULL(NEW.`entity_id`,'') OR IFNULL(OLD.`tag_id`,'') <> IFNULL(NEW.`tag_id`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_entity_tag (`id`, `entity_table`, `entity_id`, `tag_id`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`entity_table`, NEW.`entity_id`, NEW.`tag_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_entity_tag_after_delete after delete ON civicrm_entity_tag FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_entity_tag (`id`, `entity_table`, `entity_id`, `tag_id`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`entity_table`, OLD.`entity_id`, OLD.`tag_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_event_after_insert after insert ON civicrm_event FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_event (`id`, `title`, `summary`, `description`, `event_type_id`, `participant_listing_id`, `is_public`, `start_date`, `end_date`, `is_online_registration`, `registration_link_text`, `registration_start_date`, `registration_end_date`, `max_participants`, `event_full_text`, `is_monetary`, `financial_type_id`, `payment_processor`, `is_map`, `is_active`, `fee_label`, `is_show_location`, `loc_block_id`, `default_role_id`, `intro_text`, `footer_text`, `confirm_title`, `confirm_text`, `confirm_footer_text`, `confirm_email_text`, `confirm_from_name`, `thankyou_title`, `thankyou_text`, `thankyou_footer_text`, `pay_later_text`, `pay_later_receipt`, `is_email_confirm`, `confirm_from_email`, `cc_confirm`, `bcc_confirm`, `default_fee_id`, `default_discount_fee_id`, `is_pay_later`, `is_multiple_registrations`, `max_additional_participants`, `allow_same_participant_emails`, `is_template`, `template_title`, `has_waitlist`, `requires_approval`, `expiration_time`, `waitlist_text`, `approval_req_text`, `created_id`, `created_date`, `currency`, `campaign_id`, `is_share`, `parent_event_id`, `slot_label_id`, `is_partial_payment`, `min_initial_amount`, `initial_amount_label`, `initial_amount_help_text`, `is_confirm_enabled`, `dedupe_rule_group_id`, `is_billing_required`, `selfcancelxfer_time`, `allow_selfcancelxfer`, `event_tz_bak`, `start_date_ts_bak`, `end_date_ts_bak`, `registration_start_date_ts_bak`, `registration_end_date_ts_bak`, `is_show_calendar_links`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`title`, NEW.`summary`, NEW.`description`, NEW.`event_type_id`, NEW.`participant_listing_id`, NEW.`is_public`, NEW.`start_date`, NEW.`end_date`, NEW.`is_online_registration`, NEW.`registration_link_text`, NEW.`registration_start_date`, NEW.`registration_end_date`, NEW.`max_participants`, NEW.`event_full_text`, NEW.`is_monetary`, NEW.`financial_type_id`, NEW.`payment_processor`, NEW.`is_map`, NEW.`is_active`, NEW.`fee_label`, NEW.`is_show_location`, NEW.`loc_block_id`, NEW.`default_role_id`, NEW.`intro_text`, NEW.`footer_text`, NEW.`confirm_title`, NEW.`confirm_text`, NEW.`confirm_footer_text`, NEW.`confirm_email_text`, NEW.`confirm_from_name`, NEW.`thankyou_title`, NEW.`thankyou_text`, NEW.`thankyou_footer_text`, NEW.`pay_later_text`, NEW.`pay_later_receipt`, NEW.`is_email_confirm`, NEW.`confirm_from_email`, NEW.`cc_confirm`, NEW.`bcc_confirm`, NEW.`default_fee_id`, NEW.`default_discount_fee_id`, NEW.`is_pay_later`, NEW.`is_multiple_registrations`, NEW.`max_additional_participants`, NEW.`allow_same_participant_emails`, NEW.`is_template`, NEW.`template_title`, NEW.`has_waitlist`, NEW.`requires_approval`, NEW.`expiration_time`, NEW.`waitlist_text`, NEW.`approval_req_text`, NEW.`created_id`, NEW.`created_date`, NEW.`currency`, NEW.`campaign_id`, NEW.`is_share`, NEW.`parent_event_id`, NEW.`slot_label_id`, NEW.`is_partial_payment`, NEW.`min_initial_amount`, NEW.`initial_amount_label`, NEW.`initial_amount_help_text`, NEW.`is_confirm_enabled`, NEW.`dedupe_rule_group_id`, NEW.`is_billing_required`, NEW.`selfcancelxfer_time`, NEW.`allow_selfcancelxfer`, NEW.`event_tz_bak`, NEW.`start_date_ts_bak`, NEW.`end_date_ts_bak`, NEW.`registration_start_date_ts_bak`, NEW.`registration_end_date_ts_bak`, NEW.`is_show_calendar_links`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_event_after_update after update ON civicrm_event FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`title`,'') <> IFNULL(NEW.`title`,'') OR IFNULL(OLD.`summary`,'') <> IFNULL(NEW.`summary`,'') OR IFNULL(OLD.`description`,'') <> IFNULL(NEW.`description`,'') OR IFNULL(OLD.`event_type_id`,'') <> IFNULL(NEW.`event_type_id`,'') OR IFNULL(OLD.`participant_listing_id`,'') <> IFNULL(NEW.`participant_listing_id`,'') OR IFNULL(OLD.`is_public`,'') <> IFNULL(NEW.`is_public`,'') OR IFNULL(OLD.`start_date`,'') <> IFNULL(NEW.`start_date`,'') OR IFNULL(OLD.`end_date`,'') <> IFNULL(NEW.`end_date`,'') OR IFNULL(OLD.`is_online_registration`,'') <> IFNULL(NEW.`is_online_registration`,'') OR IFNULL(OLD.`registration_link_text`,'') <> IFNULL(NEW.`registration_link_text`,'') OR IFNULL(OLD.`registration_start_date`,'') <> IFNULL(NEW.`registration_start_date`,'') OR IFNULL(OLD.`registration_end_date`,'') <> IFNULL(NEW.`registration_end_date`,'') OR IFNULL(OLD.`max_participants`,'') <> IFNULL(NEW.`max_participants`,'') OR IFNULL(OLD.`event_full_text`,'') <> IFNULL(NEW.`event_full_text`,'') OR IFNULL(OLD.`is_monetary`,'') <> IFNULL(NEW.`is_monetary`,'') OR IFNULL(OLD.`financial_type_id`,'') <> IFNULL(NEW.`financial_type_id`,'') OR IFNULL(OLD.`payment_processor`,'') <> IFNULL(NEW.`payment_processor`,'') OR IFNULL(OLD.`is_map`,'') <> IFNULL(NEW.`is_map`,'') OR IFNULL(OLD.`is_active`,'') <> IFNULL(NEW.`is_active`,'') OR IFNULL(OLD.`fee_label`,'') <> IFNULL(NEW.`fee_label`,'') OR IFNULL(OLD.`is_show_location`,'') <> IFNULL(NEW.`is_show_location`,'') OR IFNULL(OLD.`loc_block_id`,'') <> IFNULL(NEW.`loc_block_id`,'') OR IFNULL(OLD.`default_role_id`,'') <> IFNULL(NEW.`default_role_id`,'') OR IFNULL(OLD.`intro_text`,'') <> IFNULL(NEW.`intro_text`,'') OR IFNULL(OLD.`footer_text`,'') <> IFNULL(NEW.`footer_text`,'') OR IFNULL(OLD.`confirm_title`,'') <> IFNULL(NEW.`confirm_title`,'') OR IFNULL(OLD.`confirm_text`,'') <> IFNULL(NEW.`confirm_text`,'') OR IFNULL(OLD.`confirm_footer_text`,'') <> IFNULL(NEW.`confirm_footer_text`,'') OR IFNULL(OLD.`confirm_email_text`,'') <> IFNULL(NEW.`confirm_email_text`,'') OR IFNULL(OLD.`confirm_from_name`,'') <> IFNULL(NEW.`confirm_from_name`,'') OR IFNULL(OLD.`thankyou_title`,'') <> IFNULL(NEW.`thankyou_title`,'') OR IFNULL(OLD.`thankyou_text`,'') <> IFNULL(NEW.`thankyou_text`,'') OR IFNULL(OLD.`thankyou_footer_text`,'') <> IFNULL(NEW.`thankyou_footer_text`,'') OR IFNULL(OLD.`pay_later_text`,'') <> IFNULL(NEW.`pay_later_text`,'') OR IFNULL(OLD.`pay_later_receipt`,'') <> IFNULL(NEW.`pay_later_receipt`,'') OR IFNULL(OLD.`is_email_confirm`,'') <> IFNULL(NEW.`is_email_confirm`,'') OR IFNULL(OLD.`confirm_from_email`,'') <> IFNULL(NEW.`confirm_from_email`,'') OR IFNULL(OLD.`cc_confirm`,'') <> IFNULL(NEW.`cc_confirm`,'') OR IFNULL(OLD.`bcc_confirm`,'') <> IFNULL(NEW.`bcc_confirm`,'') OR IFNULL(OLD.`default_fee_id`,'') <> IFNULL(NEW.`default_fee_id`,'') OR IFNULL(OLD.`default_discount_fee_id`,'') <> IFNULL(NEW.`default_discount_fee_id`,'') OR IFNULL(OLD.`is_pay_later`,'') <> IFNULL(NEW.`is_pay_later`,'') OR IFNULL(OLD.`is_multiple_registrations`,'') <> IFNULL(NEW.`is_multiple_registrations`,'') OR IFNULL(OLD.`max_additional_participants`,'') <> IFNULL(NEW.`max_additional_participants`,'') OR IFNULL(OLD.`allow_same_participant_emails`,'') <> IFNULL(NEW.`allow_same_participant_emails`,'') OR IFNULL(OLD.`is_template`,'') <> IFNULL(NEW.`is_template`,'') OR IFNULL(OLD.`template_title`,'') <> IFNULL(NEW.`template_title`,'') OR IFNULL(OLD.`has_waitlist`,'') <> IFNULL(NEW.`has_waitlist`,'') OR IFNULL(OLD.`requires_approval`,'') <> IFNULL(NEW.`requires_approval`,'') OR IFNULL(OLD.`expiration_time`,'') <> IFNULL(NEW.`expiration_time`,'') OR IFNULL(OLD.`waitlist_text`,'') <> IFNULL(NEW.`waitlist_text`,'') OR IFNULL(OLD.`approval_req_text`,'') <> IFNULL(NEW.`approval_req_text`,'') OR IFNULL(OLD.`created_id`,'') <> IFNULL(NEW.`created_id`,'') OR IFNULL(OLD.`created_date`,'') <> IFNULL(NEW.`created_date`,'') OR IFNULL(OLD.`currency`,'') <> IFNULL(NEW.`currency`,'') OR IFNULL(OLD.`campaign_id`,'') <> IFNULL(NEW.`campaign_id`,'') OR IFNULL(OLD.`is_share`,'') <> IFNULL(NEW.`is_share`,'') OR IFNULL(OLD.`parent_event_id`,'') <> IFNULL(NEW.`parent_event_id`,'') OR IFNULL(OLD.`slot_label_id`,'') <> IFNULL(NEW.`slot_label_id`,'') OR IFNULL(OLD.`is_partial_payment`,'') <> IFNULL(NEW.`is_partial_payment`,'') OR IFNULL(OLD.`min_initial_amount`,'') <> IFNULL(NEW.`min_initial_amount`,'') OR IFNULL(OLD.`initial_amount_label`,'') <> IFNULL(NEW.`initial_amount_label`,'') OR IFNULL(OLD.`initial_amount_help_text`,'') <> IFNULL(NEW.`initial_amount_help_text`,'') OR IFNULL(OLD.`is_confirm_enabled`,'') <> IFNULL(NEW.`is_confirm_enabled`,'') OR IFNULL(OLD.`dedupe_rule_group_id`,'') <> IFNULL(NEW.`dedupe_rule_group_id`,'') OR IFNULL(OLD.`is_billing_required`,'') <> IFNULL(NEW.`is_billing_required`,'') OR IFNULL(OLD.`selfcancelxfer_time`,'') <> IFNULL(NEW.`selfcancelxfer_time`,'') OR IFNULL(OLD.`allow_selfcancelxfer`,'') <> IFNULL(NEW.`allow_selfcancelxfer`,'') OR IFNULL(OLD.`event_tz_bak`,'') <> IFNULL(NEW.`event_tz_bak`,'') OR IFNULL(OLD.`start_date_ts_bak`,'') <> IFNULL(NEW.`start_date_ts_bak`,'') OR IFNULL(OLD.`end_date_ts_bak`,'') <> IFNULL(NEW.`end_date_ts_bak`,'') OR IFNULL(OLD.`registration_start_date_ts_bak`,'') <> IFNULL(NEW.`registration_start_date_ts_bak`,'') OR IFNULL(OLD.`registration_end_date_ts_bak`,'') <> IFNULL(NEW.`registration_end_date_ts_bak`,'') OR IFNULL(OLD.`is_show_calendar_links`,'') <> IFNULL(NEW.`is_show_calendar_links`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_event (`id`, `title`, `summary`, `description`, `event_type_id`, `participant_listing_id`, `is_public`, `start_date`, `end_date`, `is_online_registration`, `registration_link_text`, `registration_start_date`, `registration_end_date`, `max_participants`, `event_full_text`, `is_monetary`, `financial_type_id`, `payment_processor`, `is_map`, `is_active`, `fee_label`, `is_show_location`, `loc_block_id`, `default_role_id`, `intro_text`, `footer_text`, `confirm_title`, `confirm_text`, `confirm_footer_text`, `confirm_email_text`, `confirm_from_name`, `thankyou_title`, `thankyou_text`, `thankyou_footer_text`, `pay_later_text`, `pay_later_receipt`, `is_email_confirm`, `confirm_from_email`, `cc_confirm`, `bcc_confirm`, `default_fee_id`, `default_discount_fee_id`, `is_pay_later`, `is_multiple_registrations`, `max_additional_participants`, `allow_same_participant_emails`, `is_template`, `template_title`, `has_waitlist`, `requires_approval`, `expiration_time`, `waitlist_text`, `approval_req_text`, `created_id`, `created_date`, `currency`, `campaign_id`, `is_share`, `parent_event_id`, `slot_label_id`, `is_partial_payment`, `min_initial_amount`, `initial_amount_label`, `initial_amount_help_text`, `is_confirm_enabled`, `dedupe_rule_group_id`, `is_billing_required`, `selfcancelxfer_time`, `allow_selfcancelxfer`, `event_tz_bak`, `start_date_ts_bak`, `end_date_ts_bak`, `registration_start_date_ts_bak`, `registration_end_date_ts_bak`, `is_show_calendar_links`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`title`, NEW.`summary`, NEW.`description`, NEW.`event_type_id`, NEW.`participant_listing_id`, NEW.`is_public`, NEW.`start_date`, NEW.`end_date`, NEW.`is_online_registration`, NEW.`registration_link_text`, NEW.`registration_start_date`, NEW.`registration_end_date`, NEW.`max_participants`, NEW.`event_full_text`, NEW.`is_monetary`, NEW.`financial_type_id`, NEW.`payment_processor`, NEW.`is_map`, NEW.`is_active`, NEW.`fee_label`, NEW.`is_show_location`, NEW.`loc_block_id`, NEW.`default_role_id`, NEW.`intro_text`, NEW.`footer_text`, NEW.`confirm_title`, NEW.`confirm_text`, NEW.`confirm_footer_text`, NEW.`confirm_email_text`, NEW.`confirm_from_name`, NEW.`thankyou_title`, NEW.`thankyou_text`, NEW.`thankyou_footer_text`, NEW.`pay_later_text`, NEW.`pay_later_receipt`, NEW.`is_email_confirm`, NEW.`confirm_from_email`, NEW.`cc_confirm`, NEW.`bcc_confirm`, NEW.`default_fee_id`, NEW.`default_discount_fee_id`, NEW.`is_pay_later`, NEW.`is_multiple_registrations`, NEW.`max_additional_participants`, NEW.`allow_same_participant_emails`, NEW.`is_template`, NEW.`template_title`, NEW.`has_waitlist`, NEW.`requires_approval`, NEW.`expiration_time`, NEW.`waitlist_text`, NEW.`approval_req_text`, NEW.`created_id`, NEW.`created_date`, NEW.`currency`, NEW.`campaign_id`, NEW.`is_share`, NEW.`parent_event_id`, NEW.`slot_label_id`, NEW.`is_partial_payment`, NEW.`min_initial_amount`, NEW.`initial_amount_label`, NEW.`initial_amount_help_text`, NEW.`is_confirm_enabled`, NEW.`dedupe_rule_group_id`, NEW.`is_billing_required`, NEW.`selfcancelxfer_time`, NEW.`allow_selfcancelxfer`, NEW.`event_tz_bak`, NEW.`start_date_ts_bak`, NEW.`end_date_ts_bak`, NEW.`registration_start_date_ts_bak`, NEW.`registration_end_date_ts_bak`, NEW.`is_show_calendar_links`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_event_after_delete after delete ON civicrm_event FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_event (`id`, `title`, `summary`, `description`, `event_type_id`, `participant_listing_id`, `is_public`, `start_date`, `end_date`, `is_online_registration`, `registration_link_text`, `registration_start_date`, `registration_end_date`, `max_participants`, `event_full_text`, `is_monetary`, `financial_type_id`, `payment_processor`, `is_map`, `is_active`, `fee_label`, `is_show_location`, `loc_block_id`, `default_role_id`, `intro_text`, `footer_text`, `confirm_title`, `confirm_text`, `confirm_footer_text`, `confirm_email_text`, `confirm_from_name`, `thankyou_title`, `thankyou_text`, `thankyou_footer_text`, `pay_later_text`, `pay_later_receipt`, `is_email_confirm`, `confirm_from_email`, `cc_confirm`, `bcc_confirm`, `default_fee_id`, `default_discount_fee_id`, `is_pay_later`, `is_multiple_registrations`, `max_additional_participants`, `allow_same_participant_emails`, `is_template`, `template_title`, `has_waitlist`, `requires_approval`, `expiration_time`, `waitlist_text`, `approval_req_text`, `created_id`, `created_date`, `currency`, `campaign_id`, `is_share`, `parent_event_id`, `slot_label_id`, `is_partial_payment`, `min_initial_amount`, `initial_amount_label`, `initial_amount_help_text`, `is_confirm_enabled`, `dedupe_rule_group_id`, `is_billing_required`, `selfcancelxfer_time`, `allow_selfcancelxfer`, `event_tz_bak`, `start_date_ts_bak`, `end_date_ts_bak`, `registration_start_date_ts_bak`, `registration_end_date_ts_bak`, `is_show_calendar_links`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`title`, OLD.`summary`, OLD.`description`, OLD.`event_type_id`, OLD.`participant_listing_id`, OLD.`is_public`, OLD.`start_date`, OLD.`end_date`, OLD.`is_online_registration`, OLD.`registration_link_text`, OLD.`registration_start_date`, OLD.`registration_end_date`, OLD.`max_participants`, OLD.`event_full_text`, OLD.`is_monetary`, OLD.`financial_type_id`, OLD.`payment_processor`, OLD.`is_map`, OLD.`is_active`, OLD.`fee_label`, OLD.`is_show_location`, OLD.`loc_block_id`, OLD.`default_role_id`, OLD.`intro_text`, OLD.`footer_text`, OLD.`confirm_title`, OLD.`confirm_text`, OLD.`confirm_footer_text`, OLD.`confirm_email_text`, OLD.`confirm_from_name`, OLD.`thankyou_title`, OLD.`thankyou_text`, OLD.`thankyou_footer_text`, OLD.`pay_later_text`, OLD.`pay_later_receipt`, OLD.`is_email_confirm`, OLD.`confirm_from_email`, OLD.`cc_confirm`, OLD.`bcc_confirm`, OLD.`default_fee_id`, OLD.`default_discount_fee_id`, OLD.`is_pay_later`, OLD.`is_multiple_registrations`, OLD.`max_additional_participants`, OLD.`allow_same_participant_emails`, OLD.`is_template`, OLD.`template_title`, OLD.`has_waitlist`, OLD.`requires_approval`, OLD.`expiration_time`, OLD.`waitlist_text`, OLD.`approval_req_text`, OLD.`created_id`, OLD.`created_date`, OLD.`currency`, OLD.`campaign_id`, OLD.`is_share`, OLD.`parent_event_id`, OLD.`slot_label_id`, OLD.`is_partial_payment`, OLD.`min_initial_amount`, OLD.`initial_amount_label`, OLD.`initial_amount_help_text`, OLD.`is_confirm_enabled`, OLD.`dedupe_rule_group_id`, OLD.`is_billing_required`, OLD.`selfcancelxfer_time`, OLD.`allow_selfcancelxfer`, OLD.`event_tz_bak`, OLD.`start_date_ts_bak`, OLD.`end_date_ts_bak`, OLD.`registration_start_date_ts_bak`, OLD.`registration_end_date_ts_bak`, OLD.`is_show_calendar_links`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_event_cart_participant_after_insert after insert ON civicrm_event_cart_participant FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_event_cart_participant (`id`, `participant_id`, `cart_id`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`participant_id`, NEW.`cart_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_event_cart_participant_after_update after update ON civicrm_event_cart_participant FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`participant_id`,'') <> IFNULL(NEW.`participant_id`,'') OR IFNULL(OLD.`cart_id`,'') <> IFNULL(NEW.`cart_id`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_event_cart_participant (`id`, `participant_id`, `cart_id`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`participant_id`, NEW.`cart_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_event_cart_participant_after_delete after delete ON civicrm_event_cart_participant FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_event_cart_participant (`id`, `participant_id`, `cart_id`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`participant_id`, OLD.`cart_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_event_carts_after_insert after insert ON civicrm_event_carts FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_event_carts (`id`, `user_id`, `completed`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`user_id`, NEW.`completed`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_event_carts_after_update after update ON civicrm_event_carts FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`user_id`,'') <> IFNULL(NEW.`user_id`,'') OR IFNULL(OLD.`completed`,'') <> IFNULL(NEW.`completed`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_event_carts (`id`, `user_id`, `completed`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`user_id`, NEW.`completed`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_event_carts_after_delete after delete ON civicrm_event_carts FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_event_carts (`id`, `user_id`, `completed`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`user_id`, OLD.`completed`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_events_in_carts_after_insert after insert ON civicrm_events_in_carts FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_events_in_carts (`id`, `event_id`, `event_cart_id`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`event_id`, NEW.`event_cart_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_events_in_carts_after_update after update ON civicrm_events_in_carts FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`event_id`,'') <> IFNULL(NEW.`event_id`,'') OR IFNULL(OLD.`event_cart_id`,'') <> IFNULL(NEW.`event_cart_id`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_events_in_carts (`id`, `event_id`, `event_cart_id`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`event_id`, NEW.`event_cart_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_events_in_carts_after_delete after delete ON civicrm_events_in_carts FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_events_in_carts (`id`, `event_id`, `event_cart_id`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`event_id`, OLD.`event_cart_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_exchange_rate_after_insert after insert ON civicrm_exchange_rate FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_exchange_rate (`id`, `currency`, `value_in_usd`, `local_update`, `bank_update`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`currency`, NEW.`value_in_usd`, NEW.`local_update`, NEW.`bank_update`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_exchange_rate_after_update after update ON civicrm_exchange_rate FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`currency`,'') <> IFNULL(NEW.`currency`,'') OR IFNULL(OLD.`value_in_usd`,'') <> IFNULL(NEW.`value_in_usd`,'') OR IFNULL(OLD.`local_update`,'') <> IFNULL(NEW.`local_update`,'') OR IFNULL(OLD.`bank_update`,'') <> IFNULL(NEW.`bank_update`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_exchange_rate (`id`, `currency`, `value_in_usd`, `local_update`, `bank_update`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`currency`, NEW.`value_in_usd`, NEW.`local_update`, NEW.`bank_update`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_exchange_rate_after_delete after delete ON civicrm_exchange_rate FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_exchange_rate (`id`, `currency`, `value_in_usd`, `local_update`, `bank_update`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`currency`, OLD.`value_in_usd`, OLD.`local_update`, OLD.`bank_update`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_extension_after_insert after insert ON civicrm_extension FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_extension (`id`, `type`, `full_name`, `name`, `label`, `file`, `schema_version`, `is_active`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`type`, NEW.`full_name`, NEW.`name`, NEW.`label`, NEW.`file`, NEW.`schema_version`, NEW.`is_active`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_extension_after_update after update ON civicrm_extension FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`type`,'') <> IFNULL(NEW.`type`,'') OR IFNULL(OLD.`full_name`,'') <> IFNULL(NEW.`full_name`,'') OR IFNULL(OLD.`name`,'') <> IFNULL(NEW.`name`,'') OR IFNULL(OLD.`label`,'') <> IFNULL(NEW.`label`,'') OR IFNULL(OLD.`file`,'') <> IFNULL(NEW.`file`,'') OR IFNULL(OLD.`schema_version`,'') <> IFNULL(NEW.`schema_version`,'') OR IFNULL(OLD.`is_active`,'') <> IFNULL(NEW.`is_active`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_extension (`id`, `type`, `full_name`, `name`, `label`, `file`, `schema_version`, `is_active`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`type`, NEW.`full_name`, NEW.`name`, NEW.`label`, NEW.`file`, NEW.`schema_version`, NEW.`is_active`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_extension_after_delete after delete ON civicrm_extension FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_extension (`id`, `type`, `full_name`, `name`, `label`, `file`, `schema_version`, `is_active`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`type`, OLD.`full_name`, OLD.`name`, OLD.`label`, OLD.`file`, OLD.`schema_version`, OLD.`is_active`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_file_after_insert after insert ON civicrm_file FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_file (`id`, `file_type_id`, `mime_type`, `uri`, `document`, `description`, `upload_date`, `created_id`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`file_type_id`, NEW.`mime_type`, NEW.`uri`, NEW.`document`, NEW.`description`, NEW.`upload_date`, NEW.`created_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_file_after_update after update ON civicrm_file FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`file_type_id`,'') <> IFNULL(NEW.`file_type_id`,'') OR IFNULL(OLD.`mime_type`,'') <> IFNULL(NEW.`mime_type`,'') OR IFNULL(OLD.`uri`,'') <> IFNULL(NEW.`uri`,'') OR IFNULL(OLD.`document`,'') <> IFNULL(NEW.`document`,'') OR IFNULL(OLD.`description`,'') <> IFNULL(NEW.`description`,'') OR IFNULL(OLD.`upload_date`,'') <> IFNULL(NEW.`upload_date`,'') OR IFNULL(OLD.`created_id`,'') <> IFNULL(NEW.`created_id`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_file (`id`, `file_type_id`, `mime_type`, `uri`, `document`, `description`, `upload_date`, `created_id`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`file_type_id`, NEW.`mime_type`, NEW.`uri`, NEW.`document`, NEW.`description`, NEW.`upload_date`, NEW.`created_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_file_after_delete after delete ON civicrm_file FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_file (`id`, `file_type_id`, `mime_type`, `uri`, `document`, `description`, `upload_date`, `created_id`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`file_type_id`, OLD.`mime_type`, OLD.`uri`, OLD.`document`, OLD.`description`, OLD.`upload_date`, OLD.`created_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_financial_account_after_insert after insert ON civicrm_financial_account FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_financial_account (`id`, `contact_id`, `name`, `financial_account_type_id`, `description`, `parent_id`, `is_header_account`, `accounting_code`, `account_type_code`, `is_deductible`, `is_tax`, `tax_rate`, `is_reserved`, `is_active`, `is_default`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`contact_id`, NEW.`name`, NEW.`financial_account_type_id`, NEW.`description`, NEW.`parent_id`, NEW.`is_header_account`, NEW.`accounting_code`, NEW.`account_type_code`, NEW.`is_deductible`, NEW.`is_tax`, NEW.`tax_rate`, NEW.`is_reserved`, NEW.`is_active`, NEW.`is_default`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_financial_account_after_update after update ON civicrm_financial_account FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`contact_id`,'') <> IFNULL(NEW.`contact_id`,'') OR IFNULL(OLD.`name`,'') <> IFNULL(NEW.`name`,'') OR IFNULL(OLD.`financial_account_type_id`,'') <> IFNULL(NEW.`financial_account_type_id`,'') OR IFNULL(OLD.`description`,'') <> IFNULL(NEW.`description`,'') OR IFNULL(OLD.`parent_id`,'') <> IFNULL(NEW.`parent_id`,'') OR IFNULL(OLD.`is_header_account`,'') <> IFNULL(NEW.`is_header_account`,'') OR IFNULL(OLD.`accounting_code`,'') <> IFNULL(NEW.`accounting_code`,'') OR IFNULL(OLD.`account_type_code`,'') <> IFNULL(NEW.`account_type_code`,'') OR IFNULL(OLD.`is_deductible`,'') <> IFNULL(NEW.`is_deductible`,'') OR IFNULL(OLD.`is_tax`,'') <> IFNULL(NEW.`is_tax`,'') OR IFNULL(OLD.`tax_rate`,'') <> IFNULL(NEW.`tax_rate`,'') OR IFNULL(OLD.`is_reserved`,'') <> IFNULL(NEW.`is_reserved`,'') OR IFNULL(OLD.`is_active`,'') <> IFNULL(NEW.`is_active`,'') OR IFNULL(OLD.`is_default`,'') <> IFNULL(NEW.`is_default`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_financial_account (`id`, `contact_id`, `name`, `financial_account_type_id`, `description`, `parent_id`, `is_header_account`, `accounting_code`, `account_type_code`, `is_deductible`, `is_tax`, `tax_rate`, `is_reserved`, `is_active`, `is_default`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`contact_id`, NEW.`name`, NEW.`financial_account_type_id`, NEW.`description`, NEW.`parent_id`, NEW.`is_header_account`, NEW.`accounting_code`, NEW.`account_type_code`, NEW.`is_deductible`, NEW.`is_tax`, NEW.`tax_rate`, NEW.`is_reserved`, NEW.`is_active`, NEW.`is_default`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_financial_account_after_delete after delete ON civicrm_financial_account FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_financial_account (`id`, `contact_id`, `name`, `financial_account_type_id`, `description`, `parent_id`, `is_header_account`, `accounting_code`, `account_type_code`, `is_deductible`, `is_tax`, `tax_rate`, `is_reserved`, `is_active`, `is_default`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`contact_id`, OLD.`name`, OLD.`financial_account_type_id`, OLD.`description`, OLD.`parent_id`, OLD.`is_header_account`, OLD.`accounting_code`, OLD.`account_type_code`, OLD.`is_deductible`, OLD.`is_tax`, OLD.`tax_rate`, OLD.`is_reserved`, OLD.`is_active`, OLD.`is_default`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_financial_type_after_insert after insert ON civicrm_financial_type FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_financial_type (`id`, `name`, `description`, `is_deductible`, `is_reserved`, `is_active`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`name`, NEW.`description`, NEW.`is_deductible`, NEW.`is_reserved`, NEW.`is_active`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_financial_type_after_update after update ON civicrm_financial_type FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`name`,'') <> IFNULL(NEW.`name`,'') OR IFNULL(OLD.`description`,'') <> IFNULL(NEW.`description`,'') OR IFNULL(OLD.`is_deductible`,'') <> IFNULL(NEW.`is_deductible`,'') OR IFNULL(OLD.`is_reserved`,'') <> IFNULL(NEW.`is_reserved`,'') OR IFNULL(OLD.`is_active`,'') <> IFNULL(NEW.`is_active`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_financial_type (`id`, `name`, `description`, `is_deductible`, `is_reserved`, `is_active`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`name`, NEW.`description`, NEW.`is_deductible`, NEW.`is_reserved`, NEW.`is_active`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_financial_type_after_delete after delete ON civicrm_financial_type FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_financial_type (`id`, `name`, `description`, `is_deductible`, `is_reserved`, `is_active`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`name`, OLD.`description`, OLD.`is_deductible`, OLD.`is_reserved`, OLD.`is_active`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_geocoder_after_insert after insert ON civicrm_geocoder FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_geocoder (`id`, `name`, `title`, `class`, `is_active`, `weight`, `api_key`, `url`, `required_fields`, `retained_response_fields`, `datafill_response_fields`, `threshold_standdown`, `threshold_last_hit`, `valid_countries`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`name`, NEW.`title`, NEW.`class`, NEW.`is_active`, NEW.`weight`, NEW.`api_key`, NEW.`url`, NEW.`required_fields`, NEW.`retained_response_fields`, NEW.`datafill_response_fields`, NEW.`threshold_standdown`, NEW.`threshold_last_hit`, NEW.`valid_countries`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_geocoder_after_update after update ON civicrm_geocoder FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`name`,'') <> IFNULL(NEW.`name`,'') OR IFNULL(OLD.`title`,'') <> IFNULL(NEW.`title`,'') OR IFNULL(OLD.`class`,'') <> IFNULL(NEW.`class`,'') OR IFNULL(OLD.`is_active`,'') <> IFNULL(NEW.`is_active`,'') OR IFNULL(OLD.`weight`,'') <> IFNULL(NEW.`weight`,'') OR IFNULL(OLD.`api_key`,'') <> IFNULL(NEW.`api_key`,'') OR IFNULL(OLD.`url`,'') <> IFNULL(NEW.`url`,'') OR IFNULL(OLD.`required_fields`,'') <> IFNULL(NEW.`required_fields`,'') OR IFNULL(OLD.`retained_response_fields`,'') <> IFNULL(NEW.`retained_response_fields`,'') OR IFNULL(OLD.`datafill_response_fields`,'') <> IFNULL(NEW.`datafill_response_fields`,'') OR IFNULL(OLD.`threshold_standdown`,'') <> IFNULL(NEW.`threshold_standdown`,'') OR IFNULL(OLD.`threshold_last_hit`,'') <> IFNULL(NEW.`threshold_last_hit`,'') OR IFNULL(OLD.`valid_countries`,'') <> IFNULL(NEW.`valid_countries`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_geocoder (`id`, `name`, `title`, `class`, `is_active`, `weight`, `api_key`, `url`, `required_fields`, `retained_response_fields`, `datafill_response_fields`, `threshold_standdown`, `threshold_last_hit`, `valid_countries`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`name`, NEW.`title`, NEW.`class`, NEW.`is_active`, NEW.`weight`, NEW.`api_key`, NEW.`url`, NEW.`required_fields`, NEW.`retained_response_fields`, NEW.`datafill_response_fields`, NEW.`threshold_standdown`, NEW.`threshold_last_hit`, NEW.`valid_countries`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_geocoder_after_delete after delete ON civicrm_geocoder FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_geocoder (`id`, `name`, `title`, `class`, `is_active`, `weight`, `api_key`, `url`, `required_fields`, `retained_response_fields`, `datafill_response_fields`, `threshold_standdown`, `threshold_last_hit`, `valid_countries`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`name`, OLD.`title`, OLD.`class`, OLD.`is_active`, OLD.`weight`, OLD.`api_key`, OLD.`url`, OLD.`required_fields`, OLD.`retained_response_fields`, OLD.`datafill_response_fields`, OLD.`threshold_standdown`, OLD.`threshold_last_hit`, OLD.`valid_countries`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_grant_after_insert after insert ON civicrm_grant FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_grant (`id`, `contact_id`, `application_received_date`, `decision_date`, `money_transfer_date`, `grant_due_date`, `grant_report_received`, `grant_type_id`, `amount_total`, `amount_requested`, `amount_granted`, `rationale`, `status_id`, `currency`, `financial_type_id`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`contact_id`, NEW.`application_received_date`, NEW.`decision_date`, NEW.`money_transfer_date`, NEW.`grant_due_date`, NEW.`grant_report_received`, NEW.`grant_type_id`, NEW.`amount_total`, NEW.`amount_requested`, NEW.`amount_granted`, NEW.`rationale`, NEW.`status_id`, NEW.`currency`, NEW.`financial_type_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_grant_after_update after update ON civicrm_grant FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`contact_id`,'') <> IFNULL(NEW.`contact_id`,'') OR IFNULL(OLD.`application_received_date`,'') <> IFNULL(NEW.`application_received_date`,'') OR IFNULL(OLD.`decision_date`,'') <> IFNULL(NEW.`decision_date`,'') OR IFNULL(OLD.`money_transfer_date`,'') <> IFNULL(NEW.`money_transfer_date`,'') OR IFNULL(OLD.`grant_due_date`,'') <> IFNULL(NEW.`grant_due_date`,'') OR IFNULL(OLD.`grant_report_received`,'') <> IFNULL(NEW.`grant_report_received`,'') OR IFNULL(OLD.`grant_type_id`,'') <> IFNULL(NEW.`grant_type_id`,'') OR IFNULL(OLD.`amount_total`,'') <> IFNULL(NEW.`amount_total`,'') OR IFNULL(OLD.`amount_requested`,'') <> IFNULL(NEW.`amount_requested`,'') OR IFNULL(OLD.`amount_granted`,'') <> IFNULL(NEW.`amount_granted`,'') OR IFNULL(OLD.`rationale`,'') <> IFNULL(NEW.`rationale`,'') OR IFNULL(OLD.`status_id`,'') <> IFNULL(NEW.`status_id`,'') OR IFNULL(OLD.`currency`,'') <> IFNULL(NEW.`currency`,'') OR IFNULL(OLD.`financial_type_id`,'') <> IFNULL(NEW.`financial_type_id`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_grant (`id`, `contact_id`, `application_received_date`, `decision_date`, `money_transfer_date`, `grant_due_date`, `grant_report_received`, `grant_type_id`, `amount_total`, `amount_requested`, `amount_granted`, `rationale`, `status_id`, `currency`, `financial_type_id`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`contact_id`, NEW.`application_received_date`, NEW.`decision_date`, NEW.`money_transfer_date`, NEW.`grant_due_date`, NEW.`grant_report_received`, NEW.`grant_type_id`, NEW.`amount_total`, NEW.`amount_requested`, NEW.`amount_granted`, NEW.`rationale`, NEW.`status_id`, NEW.`currency`, NEW.`financial_type_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_grant_after_delete after delete ON civicrm_grant FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_grant (`id`, `contact_id`, `application_received_date`, `decision_date`, `money_transfer_date`, `grant_due_date`, `grant_report_received`, `grant_type_id`, `amount_total`, `amount_requested`, `amount_granted`, `rationale`, `status_id`, `currency`, `financial_type_id`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`contact_id`, OLD.`application_received_date`, OLD.`decision_date`, OLD.`money_transfer_date`, OLD.`grant_due_date`, OLD.`grant_report_received`, OLD.`grant_type_id`, OLD.`amount_total`, OLD.`amount_requested`, OLD.`amount_granted`, OLD.`rationale`, OLD.`status_id`, OLD.`currency`, OLD.`financial_type_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_group_after_insert after insert ON civicrm_group FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_group (`id`, `name`, `title`, `description`, `source`, `saved_search_id`, `is_active`, `visibility`, `where_clause`, `select_tables`, `where_tables`, `group_type`, `cache_date`, `refresh_date`, `parents`, `children`, `is_hidden`, `is_reserved`, `created_id`, `modified_id`, `frontend_title`, `frontend_description`, `cache_fill_took`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`name`, NEW.`title`, NEW.`description`, NEW.`source`, NEW.`saved_search_id`, NEW.`is_active`, NEW.`visibility`, NEW.`where_clause`, NEW.`select_tables`, NEW.`where_tables`, NEW.`group_type`, NEW.`cache_date`, NEW.`refresh_date`, NEW.`parents`, NEW.`children`, NEW.`is_hidden`, NEW.`is_reserved`, NEW.`created_id`, NEW.`modified_id`, NEW.`frontend_title`, NEW.`frontend_description`, NEW.`cache_fill_took`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_group_after_update after update ON civicrm_group FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`name`,'') <> IFNULL(NEW.`name`,'') OR IFNULL(OLD.`title`,'') <> IFNULL(NEW.`title`,'') OR IFNULL(OLD.`description`,'') <> IFNULL(NEW.`description`,'') OR IFNULL(OLD.`source`,'') <> IFNULL(NEW.`source`,'') OR IFNULL(OLD.`saved_search_id`,'') <> IFNULL(NEW.`saved_search_id`,'') OR IFNULL(OLD.`is_active`,'') <> IFNULL(NEW.`is_active`,'') OR IFNULL(OLD.`visibility`,'') <> IFNULL(NEW.`visibility`,'') OR IFNULL(OLD.`where_clause`,'') <> IFNULL(NEW.`where_clause`,'') OR IFNULL(OLD.`select_tables`,'') <> IFNULL(NEW.`select_tables`,'') OR IFNULL(OLD.`where_tables`,'') <> IFNULL(NEW.`where_tables`,'') OR IFNULL(OLD.`group_type`,'') <> IFNULL(NEW.`group_type`,'') OR IFNULL(OLD.`parents`,'') <> IFNULL(NEW.`parents`,'') OR IFNULL(OLD.`children`,'') <> IFNULL(NEW.`children`,'') OR IFNULL(OLD.`is_hidden`,'') <> IFNULL(NEW.`is_hidden`,'') OR IFNULL(OLD.`is_reserved`,'') <> IFNULL(NEW.`is_reserved`,'') OR IFNULL(OLD.`created_id`,'') <> IFNULL(NEW.`created_id`,'') OR IFNULL(OLD.`modified_id`,'') <> IFNULL(NEW.`modified_id`,'') OR IFNULL(OLD.`frontend_title`,'') <> IFNULL(NEW.`frontend_title`,'') OR IFNULL(OLD.`frontend_description`,'') <> IFNULL(NEW.`frontend_description`,'') OR IFNULL(OLD.`cache_fill_took`,'') <> IFNULL(NEW.`cache_fill_took`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_group (`id`, `name`, `title`, `description`, `source`, `saved_search_id`, `is_active`, `visibility`, `where_clause`, `select_tables`, `where_tables`, `group_type`, `cache_date`, `refresh_date`, `parents`, `children`, `is_hidden`, `is_reserved`, `created_id`, `modified_id`, `frontend_title`, `frontend_description`, `cache_fill_took`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`name`, NEW.`title`, NEW.`description`, NEW.`source`, NEW.`saved_search_id`, NEW.`is_active`, NEW.`visibility`, NEW.`where_clause`, NEW.`select_tables`, NEW.`where_tables`, NEW.`group_type`, NEW.`cache_date`, NEW.`refresh_date`, NEW.`parents`, NEW.`children`, NEW.`is_hidden`, NEW.`is_reserved`, NEW.`created_id`, NEW.`modified_id`, NEW.`frontend_title`, NEW.`frontend_description`, NEW.`cache_fill_took`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_group_after_delete after delete ON civicrm_group FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_group (`id`, `name`, `title`, `description`, `source`, `saved_search_id`, `is_active`, `visibility`, `where_clause`, `select_tables`, `where_tables`, `group_type`, `cache_date`, `refresh_date`, `parents`, `children`, `is_hidden`, `is_reserved`, `created_id`, `modified_id`, `frontend_title`, `frontend_description`, `cache_fill_took`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`name`, OLD.`title`, OLD.`description`, OLD.`source`, OLD.`saved_search_id`, OLD.`is_active`, OLD.`visibility`, OLD.`where_clause`, OLD.`select_tables`, OLD.`where_tables`, OLD.`group_type`, OLD.`cache_date`, OLD.`refresh_date`, OLD.`parents`, OLD.`children`, OLD.`is_hidden`, OLD.`is_reserved`, OLD.`created_id`, OLD.`modified_id`, OLD.`frontend_title`, OLD.`frontend_description`, OLD.`cache_fill_took`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_group_contact_after_insert after insert ON civicrm_group_contact FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_group_contact (`id`, `group_id`, `contact_id`, `status`, `email_id`, `location_id`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`group_id`, NEW.`contact_id`, NEW.`status`, NEW.`email_id`, NEW.`location_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_group_contact_after_update after update ON civicrm_group_contact FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`group_id`,'') <> IFNULL(NEW.`group_id`,'') OR IFNULL(OLD.`contact_id`,'') <> IFNULL(NEW.`contact_id`,'') OR IFNULL(OLD.`status`,'') <> IFNULL(NEW.`status`,'') OR IFNULL(OLD.`email_id`,'') <> IFNULL(NEW.`email_id`,'') OR IFNULL(OLD.`location_id`,'') <> IFNULL(NEW.`location_id`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_group_contact (`id`, `group_id`, `contact_id`, `status`, `email_id`, `location_id`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`group_id`, NEW.`contact_id`, NEW.`status`, NEW.`email_id`, NEW.`location_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_group_contact_after_delete after delete ON civicrm_group_contact FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_group_contact (`id`, `group_id`, `contact_id`, `status`, `email_id`, `location_id`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`group_id`, OLD.`contact_id`, OLD.`status`, OLD.`email_id`, OLD.`location_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_group_nesting_after_insert after insert ON civicrm_group_nesting FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_group_nesting (`id`, `child_group_id`, `parent_group_id`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`child_group_id`, NEW.`parent_group_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_group_nesting_after_update after update ON civicrm_group_nesting FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`child_group_id`,'') <> IFNULL(NEW.`child_group_id`,'') OR IFNULL(OLD.`parent_group_id`,'') <> IFNULL(NEW.`parent_group_id`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_group_nesting (`id`, `child_group_id`, `parent_group_id`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`child_group_id`, NEW.`parent_group_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_group_nesting_after_delete after delete ON civicrm_group_nesting FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_group_nesting (`id`, `child_group_id`, `parent_group_id`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`child_group_id`, OLD.`parent_group_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_group_organization_after_insert after insert ON civicrm_group_organization FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_group_organization (`id`, `group_id`, `organization_id`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`group_id`, NEW.`organization_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_group_organization_after_update after update ON civicrm_group_organization FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`group_id`,'') <> IFNULL(NEW.`group_id`,'') OR IFNULL(OLD.`organization_id`,'') <> IFNULL(NEW.`organization_id`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_group_organization (`id`, `group_id`, `organization_id`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`group_id`, NEW.`organization_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_group_organization_after_delete after delete ON civicrm_group_organization FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_group_organization (`id`, `group_id`, `organization_id`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`group_id`, OLD.`organization_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_im_after_insert after insert ON civicrm_im FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_im (`id`, `contact_id`, `location_type_id`, `name`, `provider_id`, `is_primary`, `is_billing`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`contact_id`, NEW.`location_type_id`, NEW.`name`, NEW.`provider_id`, NEW.`is_primary`, NEW.`is_billing`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF;
UPDATE civicrm_contact SET modified_date = CURRENT_TIMESTAMP WHERE id = NEW.contact_id; END //

CREATE TRIGGER civicrm_im_after_update after update ON civicrm_im FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`contact_id`,'') <> IFNULL(NEW.`contact_id`,'') OR IFNULL(OLD.`location_type_id`,'') <> IFNULL(NEW.`location_type_id`,'') OR IFNULL(OLD.`name`,'') <> IFNULL(NEW.`name`,'') OR IFNULL(OLD.`provider_id`,'') <> IFNULL(NEW.`provider_id`,'') OR IFNULL(OLD.`is_primary`,'') <> IFNULL(NEW.`is_primary`,'') OR IFNULL(OLD.`is_billing`,'') <> IFNULL(NEW.`is_billing`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_im (`id`, `contact_id`, `location_type_id`, `name`, `provider_id`, `is_primary`, `is_billing`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`contact_id`, NEW.`location_type_id`, NEW.`name`, NEW.`provider_id`, NEW.`is_primary`, NEW.`is_billing`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF;
UPDATE civicrm_contact SET modified_date = CURRENT_TIMESTAMP WHERE id = NEW.contact_id; END //

CREATE TRIGGER civicrm_im_after_delete after delete ON civicrm_im FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_im (`id`, `contact_id`, `location_type_id`, `name`, `provider_id`, `is_primary`, `is_billing`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`contact_id`, OLD.`location_type_id`, OLD.`name`, OLD.`provider_id`, OLD.`is_primary`, OLD.`is_billing`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF;
UPDATE civicrm_contact SET modified_date = CURRENT_TIMESTAMP WHERE id = OLD.contact_id; END //

CREATE TRIGGER civicrm_job_after_insert after insert ON civicrm_job FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_job (`id`, `domain_id`, `run_frequency`, `last_run`, `scheduled_run_date`, `name`, `description`, `api_entity`, `api_action`, `parameters`, `is_active`, `last_run_end`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`domain_id`, NEW.`run_frequency`, NEW.`last_run`, NEW.`scheduled_run_date`, NEW.`name`, NEW.`description`, NEW.`api_entity`, NEW.`api_action`, NEW.`parameters`, NEW.`is_active`, NEW.`last_run_end`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_job_after_update after update ON civicrm_job FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`domain_id`,'') <> IFNULL(NEW.`domain_id`,'') OR IFNULL(OLD.`run_frequency`,'') <> IFNULL(NEW.`run_frequency`,'') OR IFNULL(OLD.`scheduled_run_date`,'') <> IFNULL(NEW.`scheduled_run_date`,'') OR IFNULL(OLD.`name`,'') <> IFNULL(NEW.`name`,'') OR IFNULL(OLD.`description`,'') <> IFNULL(NEW.`description`,'') OR IFNULL(OLD.`api_entity`,'') <> IFNULL(NEW.`api_entity`,'') OR IFNULL(OLD.`api_action`,'') <> IFNULL(NEW.`api_action`,'') OR IFNULL(OLD.`parameters`,'') <> IFNULL(NEW.`parameters`,'') OR IFNULL(OLD.`is_active`,'') <> IFNULL(NEW.`is_active`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_job (`id`, `domain_id`, `run_frequency`, `last_run`, `scheduled_run_date`, `name`, `description`, `api_entity`, `api_action`, `parameters`, `is_active`, `last_run_end`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`domain_id`, NEW.`run_frequency`, NEW.`last_run`, NEW.`scheduled_run_date`, NEW.`name`, NEW.`description`, NEW.`api_entity`, NEW.`api_action`, NEW.`parameters`, NEW.`is_active`, NEW.`last_run_end`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_job_after_delete after delete ON civicrm_job FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_job (`id`, `domain_id`, `run_frequency`, `last_run`, `scheduled_run_date`, `name`, `description`, `api_entity`, `api_action`, `parameters`, `is_active`, `last_run_end`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`domain_id`, OLD.`run_frequency`, OLD.`last_run`, OLD.`scheduled_run_date`, OLD.`name`, OLD.`description`, OLD.`api_entity`, OLD.`api_action`, OLD.`parameters`, OLD.`is_active`, OLD.`last_run_end`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_loc_block_after_insert after insert ON civicrm_loc_block FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_loc_block (`id`, `address_id`, `email_id`, `phone_id`, `im_id`, `address_2_id`, `email_2_id`, `phone_2_id`, `im_2_id`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`address_id`, NEW.`email_id`, NEW.`phone_id`, NEW.`im_id`, NEW.`address_2_id`, NEW.`email_2_id`, NEW.`phone_2_id`, NEW.`im_2_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_loc_block_after_update after update ON civicrm_loc_block FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`address_id`,'') <> IFNULL(NEW.`address_id`,'') OR IFNULL(OLD.`email_id`,'') <> IFNULL(NEW.`email_id`,'') OR IFNULL(OLD.`phone_id`,'') <> IFNULL(NEW.`phone_id`,'') OR IFNULL(OLD.`im_id`,'') <> IFNULL(NEW.`im_id`,'') OR IFNULL(OLD.`address_2_id`,'') <> IFNULL(NEW.`address_2_id`,'') OR IFNULL(OLD.`email_2_id`,'') <> IFNULL(NEW.`email_2_id`,'') OR IFNULL(OLD.`phone_2_id`,'') <> IFNULL(NEW.`phone_2_id`,'') OR IFNULL(OLD.`im_2_id`,'') <> IFNULL(NEW.`im_2_id`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_loc_block (`id`, `address_id`, `email_id`, `phone_id`, `im_id`, `address_2_id`, `email_2_id`, `phone_2_id`, `im_2_id`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`address_id`, NEW.`email_id`, NEW.`phone_id`, NEW.`im_id`, NEW.`address_2_id`, NEW.`email_2_id`, NEW.`phone_2_id`, NEW.`im_2_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_loc_block_after_delete after delete ON civicrm_loc_block FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_loc_block (`id`, `address_id`, `email_id`, `phone_id`, `im_id`, `address_2_id`, `email_2_id`, `phone_2_id`, `im_2_id`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`address_id`, OLD.`email_id`, OLD.`phone_id`, OLD.`im_id`, OLD.`address_2_id`, OLD.`email_2_id`, OLD.`phone_2_id`, OLD.`im_2_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_location_type_after_insert after insert ON civicrm_location_type FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_location_type (`id`, `name`, `display_name`, `vcard_name`, `description`, `is_reserved`, `is_active`, `is_default`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`name`, NEW.`display_name`, NEW.`vcard_name`, NEW.`description`, NEW.`is_reserved`, NEW.`is_active`, NEW.`is_default`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_location_type_after_update after update ON civicrm_location_type FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`name`,'') <> IFNULL(NEW.`name`,'') OR IFNULL(OLD.`display_name`,'') <> IFNULL(NEW.`display_name`,'') OR IFNULL(OLD.`vcard_name`,'') <> IFNULL(NEW.`vcard_name`,'') OR IFNULL(OLD.`description`,'') <> IFNULL(NEW.`description`,'') OR IFNULL(OLD.`is_reserved`,'') <> IFNULL(NEW.`is_reserved`,'') OR IFNULL(OLD.`is_active`,'') <> IFNULL(NEW.`is_active`,'') OR IFNULL(OLD.`is_default`,'') <> IFNULL(NEW.`is_default`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_location_type (`id`, `name`, `display_name`, `vcard_name`, `description`, `is_reserved`, `is_active`, `is_default`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`name`, NEW.`display_name`, NEW.`vcard_name`, NEW.`description`, NEW.`is_reserved`, NEW.`is_active`, NEW.`is_default`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_location_type_after_delete after delete ON civicrm_location_type FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_location_type (`id`, `name`, `display_name`, `vcard_name`, `description`, `is_reserved`, `is_active`, `is_default`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`name`, OLD.`display_name`, OLD.`vcard_name`, OLD.`description`, OLD.`is_reserved`, OLD.`is_active`, OLD.`is_default`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_mail_settings_after_insert after insert ON civicrm_mail_settings FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_mail_settings (`id`, `domain_id`, `name`, `is_default`, `domain`, `localpart`, `return_path`, `protocol`, `server`, `port`, `username`, `password`, `is_ssl`, `source`, `activity_status`, `is_non_case_email_skipped`, `is_contact_creation_disabled_if_no_match`, `is_active`, `activity_type_id`, `campaign_id`, `activity_source`, `activity_targets`, `activity_assignees`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`domain_id`, NEW.`name`, NEW.`is_default`, NEW.`domain`, NEW.`localpart`, NEW.`return_path`, NEW.`protocol`, NEW.`server`, NEW.`port`, NEW.`username`, NEW.`password`, NEW.`is_ssl`, NEW.`source`, NEW.`activity_status`, NEW.`is_non_case_email_skipped`, NEW.`is_contact_creation_disabled_if_no_match`, NEW.`is_active`, NEW.`activity_type_id`, NEW.`campaign_id`, NEW.`activity_source`, NEW.`activity_targets`, NEW.`activity_assignees`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_mail_settings_after_update after update ON civicrm_mail_settings FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`domain_id`,'') <> IFNULL(NEW.`domain_id`,'') OR IFNULL(OLD.`name`,'') <> IFNULL(NEW.`name`,'') OR IFNULL(OLD.`is_default`,'') <> IFNULL(NEW.`is_default`,'') OR IFNULL(OLD.`domain`,'') <> IFNULL(NEW.`domain`,'') OR IFNULL(OLD.`localpart`,'') <> IFNULL(NEW.`localpart`,'') OR IFNULL(OLD.`return_path`,'') <> IFNULL(NEW.`return_path`,'') OR IFNULL(OLD.`protocol`,'') <> IFNULL(NEW.`protocol`,'') OR IFNULL(OLD.`server`,'') <> IFNULL(NEW.`server`,'') OR IFNULL(OLD.`port`,'') <> IFNULL(NEW.`port`,'') OR IFNULL(OLD.`username`,'') <> IFNULL(NEW.`username`,'') OR IFNULL(OLD.`password`,'') <> IFNULL(NEW.`password`,'') OR IFNULL(OLD.`is_ssl`,'') <> IFNULL(NEW.`is_ssl`,'') OR IFNULL(OLD.`source`,'') <> IFNULL(NEW.`source`,'') OR IFNULL(OLD.`activity_status`,'') <> IFNULL(NEW.`activity_status`,'') OR IFNULL(OLD.`is_non_case_email_skipped`,'') <> IFNULL(NEW.`is_non_case_email_skipped`,'') OR IFNULL(OLD.`is_contact_creation_disabled_if_no_match`,'') <> IFNULL(NEW.`is_contact_creation_disabled_if_no_match`,'') OR IFNULL(OLD.`is_active`,'') <> IFNULL(NEW.`is_active`,'') OR IFNULL(OLD.`activity_type_id`,'') <> IFNULL(NEW.`activity_type_id`,'') OR IFNULL(OLD.`campaign_id`,'') <> IFNULL(NEW.`campaign_id`,'') OR IFNULL(OLD.`activity_source`,'') <> IFNULL(NEW.`activity_source`,'') OR IFNULL(OLD.`activity_targets`,'') <> IFNULL(NEW.`activity_targets`,'') OR IFNULL(OLD.`activity_assignees`,'') <> IFNULL(NEW.`activity_assignees`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_mail_settings (`id`, `domain_id`, `name`, `is_default`, `domain`, `localpart`, `return_path`, `protocol`, `server`, `port`, `username`, `password`, `is_ssl`, `source`, `activity_status`, `is_non_case_email_skipped`, `is_contact_creation_disabled_if_no_match`, `is_active`, `activity_type_id`, `campaign_id`, `activity_source`, `activity_targets`, `activity_assignees`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`domain_id`, NEW.`name`, NEW.`is_default`, NEW.`domain`, NEW.`localpart`, NEW.`return_path`, NEW.`protocol`, NEW.`server`, NEW.`port`, NEW.`username`, NEW.`password`, NEW.`is_ssl`, NEW.`source`, NEW.`activity_status`, NEW.`is_non_case_email_skipped`, NEW.`is_contact_creation_disabled_if_no_match`, NEW.`is_active`, NEW.`activity_type_id`, NEW.`campaign_id`, NEW.`activity_source`, NEW.`activity_targets`, NEW.`activity_assignees`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_mail_settings_after_delete after delete ON civicrm_mail_settings FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_mail_settings (`id`, `domain_id`, `name`, `is_default`, `domain`, `localpart`, `return_path`, `protocol`, `server`, `port`, `username`, `password`, `is_ssl`, `source`, `activity_status`, `is_non_case_email_skipped`, `is_contact_creation_disabled_if_no_match`, `is_active`, `activity_type_id`, `campaign_id`, `activity_source`, `activity_targets`, `activity_assignees`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`domain_id`, OLD.`name`, OLD.`is_default`, OLD.`domain`, OLD.`localpart`, OLD.`return_path`, OLD.`protocol`, OLD.`server`, OLD.`port`, OLD.`username`, OLD.`password`, OLD.`is_ssl`, OLD.`source`, OLD.`activity_status`, OLD.`is_non_case_email_skipped`, OLD.`is_contact_creation_disabled_if_no_match`, OLD.`is_active`, OLD.`activity_type_id`, OLD.`campaign_id`, OLD.`activity_source`, OLD.`activity_targets`, OLD.`activity_assignees`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_mailing_abtest_after_insert after insert ON civicrm_mailing_abtest FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_mailing_abtest (`id`, `name`, `status`, `mailing_id_a`, `mailing_id_b`, `mailing_id_c`, `domain_id`, `specific_url`, `declare_winning_time`, `group_percentage`, `created_id`, `created_date`, `testing_criteria`, `winner_criteria`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`name`, NEW.`status`, NEW.`mailing_id_a`, NEW.`mailing_id_b`, NEW.`mailing_id_c`, NEW.`domain_id`, NEW.`specific_url`, NEW.`declare_winning_time`, NEW.`group_percentage`, NEW.`created_id`, NEW.`created_date`, NEW.`testing_criteria`, NEW.`winner_criteria`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_mailing_abtest_after_update after update ON civicrm_mailing_abtest FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`name`,'') <> IFNULL(NEW.`name`,'') OR IFNULL(OLD.`status`,'') <> IFNULL(NEW.`status`,'') OR IFNULL(OLD.`mailing_id_a`,'') <> IFNULL(NEW.`mailing_id_a`,'') OR IFNULL(OLD.`mailing_id_b`,'') <> IFNULL(NEW.`mailing_id_b`,'') OR IFNULL(OLD.`mailing_id_c`,'') <> IFNULL(NEW.`mailing_id_c`,'') OR IFNULL(OLD.`domain_id`,'') <> IFNULL(NEW.`domain_id`,'') OR IFNULL(OLD.`specific_url`,'') <> IFNULL(NEW.`specific_url`,'') OR IFNULL(OLD.`declare_winning_time`,'') <> IFNULL(NEW.`declare_winning_time`,'') OR IFNULL(OLD.`group_percentage`,'') <> IFNULL(NEW.`group_percentage`,'') OR IFNULL(OLD.`created_id`,'') <> IFNULL(NEW.`created_id`,'') OR IFNULL(OLD.`created_date`,'') <> IFNULL(NEW.`created_date`,'') OR IFNULL(OLD.`testing_criteria`,'') <> IFNULL(NEW.`testing_criteria`,'') OR IFNULL(OLD.`winner_criteria`,'') <> IFNULL(NEW.`winner_criteria`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_mailing_abtest (`id`, `name`, `status`, `mailing_id_a`, `mailing_id_b`, `mailing_id_c`, `domain_id`, `specific_url`, `declare_winning_time`, `group_percentage`, `created_id`, `created_date`, `testing_criteria`, `winner_criteria`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`name`, NEW.`status`, NEW.`mailing_id_a`, NEW.`mailing_id_b`, NEW.`mailing_id_c`, NEW.`domain_id`, NEW.`specific_url`, NEW.`declare_winning_time`, NEW.`group_percentage`, NEW.`created_id`, NEW.`created_date`, NEW.`testing_criteria`, NEW.`winner_criteria`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_mailing_abtest_after_delete after delete ON civicrm_mailing_abtest FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_mailing_abtest (`id`, `name`, `status`, `mailing_id_a`, `mailing_id_b`, `mailing_id_c`, `domain_id`, `specific_url`, `declare_winning_time`, `group_percentage`, `created_id`, `created_date`, `testing_criteria`, `winner_criteria`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`name`, OLD.`status`, OLD.`mailing_id_a`, OLD.`mailing_id_b`, OLD.`mailing_id_c`, OLD.`domain_id`, OLD.`specific_url`, OLD.`declare_winning_time`, OLD.`group_percentage`, OLD.`created_id`, OLD.`created_date`, OLD.`testing_criteria`, OLD.`winner_criteria`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_mailing_bounce_pattern_after_insert after insert ON civicrm_mailing_bounce_pattern FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_mailing_bounce_pattern (`id`, `bounce_type_id`, `pattern`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`bounce_type_id`, NEW.`pattern`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_mailing_bounce_pattern_after_update after update ON civicrm_mailing_bounce_pattern FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`bounce_type_id`,'') <> IFNULL(NEW.`bounce_type_id`,'') OR IFNULL(OLD.`pattern`,'') <> IFNULL(NEW.`pattern`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_mailing_bounce_pattern (`id`, `bounce_type_id`, `pattern`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`bounce_type_id`, NEW.`pattern`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_mailing_bounce_pattern_after_delete after delete ON civicrm_mailing_bounce_pattern FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_mailing_bounce_pattern (`id`, `bounce_type_id`, `pattern`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`bounce_type_id`, OLD.`pattern`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_mailing_bounce_type_after_insert after insert ON civicrm_mailing_bounce_type FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_mailing_bounce_type (`id`, `name`, `description`, `hold_threshold`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`name`, NEW.`description`, NEW.`hold_threshold`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_mailing_bounce_type_after_update after update ON civicrm_mailing_bounce_type FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`name`,'') <> IFNULL(NEW.`name`,'') OR IFNULL(OLD.`description`,'') <> IFNULL(NEW.`description`,'') OR IFNULL(OLD.`hold_threshold`,'') <> IFNULL(NEW.`hold_threshold`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_mailing_bounce_type (`id`, `name`, `description`, `hold_threshold`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`name`, NEW.`description`, NEW.`hold_threshold`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_mailing_bounce_type_after_delete after delete ON civicrm_mailing_bounce_type FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_mailing_bounce_type (`id`, `name`, `description`, `hold_threshold`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`name`, OLD.`description`, OLD.`hold_threshold`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_mailing_component_after_insert after insert ON civicrm_mailing_component FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_mailing_component (`id`, `name`, `component_type`, `subject`, `body_html`, `body_text`, `is_default`, `is_active`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`name`, NEW.`component_type`, NEW.`subject`, NEW.`body_html`, NEW.`body_text`, NEW.`is_default`, NEW.`is_active`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_mailing_component_after_update after update ON civicrm_mailing_component FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`name`,'') <> IFNULL(NEW.`name`,'') OR IFNULL(OLD.`component_type`,'') <> IFNULL(NEW.`component_type`,'') OR IFNULL(OLD.`subject`,'') <> IFNULL(NEW.`subject`,'') OR IFNULL(OLD.`body_html`,'') <> IFNULL(NEW.`body_html`,'') OR IFNULL(OLD.`body_text`,'') <> IFNULL(NEW.`body_text`,'') OR IFNULL(OLD.`is_default`,'') <> IFNULL(NEW.`is_default`,'') OR IFNULL(OLD.`is_active`,'') <> IFNULL(NEW.`is_active`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_mailing_component (`id`, `name`, `component_type`, `subject`, `body_html`, `body_text`, `is_default`, `is_active`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`name`, NEW.`component_type`, NEW.`subject`, NEW.`body_html`, NEW.`body_text`, NEW.`is_default`, NEW.`is_active`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_mailing_component_after_delete after delete ON civicrm_mailing_component FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_mailing_component (`id`, `name`, `component_type`, `subject`, `body_html`, `body_text`, `is_default`, `is_active`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`name`, OLD.`component_type`, OLD.`subject`, OLD.`body_html`, OLD.`body_text`, OLD.`is_default`, OLD.`is_active`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_mailing_group_after_insert after insert ON civicrm_mailing_group FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_mailing_group (`id`, `mailing_id`, `group_type`, `entity_table`, `entity_id`, `search_id`, `search_args`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`mailing_id`, NEW.`group_type`, NEW.`entity_table`, NEW.`entity_id`, NEW.`search_id`, NEW.`search_args`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_mailing_group_after_update after update ON civicrm_mailing_group FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`mailing_id`,'') <> IFNULL(NEW.`mailing_id`,'') OR IFNULL(OLD.`group_type`,'') <> IFNULL(NEW.`group_type`,'') OR IFNULL(OLD.`entity_table`,'') <> IFNULL(NEW.`entity_table`,'') OR IFNULL(OLD.`entity_id`,'') <> IFNULL(NEW.`entity_id`,'') OR IFNULL(OLD.`search_id`,'') <> IFNULL(NEW.`search_id`,'') OR IFNULL(OLD.`search_args`,'') <> IFNULL(NEW.`search_args`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_mailing_group (`id`, `mailing_id`, `group_type`, `entity_table`, `entity_id`, `search_id`, `search_args`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`mailing_id`, NEW.`group_type`, NEW.`entity_table`, NEW.`entity_id`, NEW.`search_id`, NEW.`search_args`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_mailing_group_after_delete after delete ON civicrm_mailing_group FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_mailing_group (`id`, `mailing_id`, `group_type`, `entity_table`, `entity_id`, `search_id`, `search_args`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`mailing_id`, OLD.`group_type`, OLD.`entity_table`, OLD.`entity_id`, OLD.`search_id`, OLD.`search_args`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_mailing_spool_after_insert after insert ON civicrm_mailing_spool FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_mailing_spool (`id`, `job_id`, `recipient_email`, `headers`, `body`, `added_at`, `removed_at`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`job_id`, NEW.`recipient_email`, NEW.`headers`, NEW.`body`, NEW.`added_at`, NEW.`removed_at`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_mailing_spool_after_update after update ON civicrm_mailing_spool FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`job_id`,'') <> IFNULL(NEW.`job_id`,'') OR IFNULL(OLD.`recipient_email`,'') <> IFNULL(NEW.`recipient_email`,'') OR IFNULL(OLD.`headers`,'') <> IFNULL(NEW.`headers`,'') OR IFNULL(OLD.`body`,'') <> IFNULL(NEW.`body`,'') OR IFNULL(OLD.`added_at`,'') <> IFNULL(NEW.`added_at`,'') OR IFNULL(OLD.`removed_at`,'') <> IFNULL(NEW.`removed_at`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_mailing_spool (`id`, `job_id`, `recipient_email`, `headers`, `body`, `added_at`, `removed_at`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`job_id`, NEW.`recipient_email`, NEW.`headers`, NEW.`body`, NEW.`added_at`, NEW.`removed_at`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_mailing_spool_after_delete after delete ON civicrm_mailing_spool FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_mailing_spool (`id`, `job_id`, `recipient_email`, `headers`, `body`, `added_at`, `removed_at`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`job_id`, OLD.`recipient_email`, OLD.`headers`, OLD.`body`, OLD.`added_at`, OLD.`removed_at`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_mailing_stats_after_insert after insert ON civicrm_mailing_stats FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_mailing_stats (`id`, `mailing_id`, `mailing_name`, `is_completed`, `created_date`, `start`, `finish`, `recipients`, `delivered`, `send_rate`, `bounced`, `blocked`, `suppressed`, `abuse_complaints`, `opened_total`, `opened_unique`, `unsubscribed`, `forwarded`, `clicked_total`, `clicked_unique`, `trackable_urls`, `clicked_contribution_page`, `contribution_count`, `contribution_total`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`mailing_id`, NEW.`mailing_name`, NEW.`is_completed`, NEW.`created_date`, NEW.`start`, NEW.`finish`, NEW.`recipients`, NEW.`delivered`, NEW.`send_rate`, NEW.`bounced`, NEW.`blocked`, NEW.`suppressed`, NEW.`abuse_complaints`, NEW.`opened_total`, NEW.`opened_unique`, NEW.`unsubscribed`, NEW.`forwarded`, NEW.`clicked_total`, NEW.`clicked_unique`, NEW.`trackable_urls`, NEW.`clicked_contribution_page`, NEW.`contribution_count`, NEW.`contribution_total`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_mailing_stats_after_update after update ON civicrm_mailing_stats FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`mailing_id`,'') <> IFNULL(NEW.`mailing_id`,'') OR IFNULL(OLD.`mailing_name`,'') <> IFNULL(NEW.`mailing_name`,'') OR IFNULL(OLD.`is_completed`,'') <> IFNULL(NEW.`is_completed`,'') OR IFNULL(OLD.`created_date`,'') <> IFNULL(NEW.`created_date`,'') OR IFNULL(OLD.`start`,'') <> IFNULL(NEW.`start`,'') OR IFNULL(OLD.`finish`,'') <> IFNULL(NEW.`finish`,'') OR IFNULL(OLD.`recipients`,'') <> IFNULL(NEW.`recipients`,'') OR IFNULL(OLD.`delivered`,'') <> IFNULL(NEW.`delivered`,'') OR IFNULL(OLD.`send_rate`,'') <> IFNULL(NEW.`send_rate`,'') OR IFNULL(OLD.`bounced`,'') <> IFNULL(NEW.`bounced`,'') OR IFNULL(OLD.`blocked`,'') <> IFNULL(NEW.`blocked`,'') OR IFNULL(OLD.`suppressed`,'') <> IFNULL(NEW.`suppressed`,'') OR IFNULL(OLD.`abuse_complaints`,'') <> IFNULL(NEW.`abuse_complaints`,'') OR IFNULL(OLD.`opened_total`,'') <> IFNULL(NEW.`opened_total`,'') OR IFNULL(OLD.`opened_unique`,'') <> IFNULL(NEW.`opened_unique`,'') OR IFNULL(OLD.`unsubscribed`,'') <> IFNULL(NEW.`unsubscribed`,'') OR IFNULL(OLD.`forwarded`,'') <> IFNULL(NEW.`forwarded`,'') OR IFNULL(OLD.`clicked_total`,'') <> IFNULL(NEW.`clicked_total`,'') OR IFNULL(OLD.`clicked_unique`,'') <> IFNULL(NEW.`clicked_unique`,'') OR IFNULL(OLD.`trackable_urls`,'') <> IFNULL(NEW.`trackable_urls`,'') OR IFNULL(OLD.`clicked_contribution_page`,'') <> IFNULL(NEW.`clicked_contribution_page`,'') OR IFNULL(OLD.`contribution_count`,'') <> IFNULL(NEW.`contribution_count`,'') OR IFNULL(OLD.`contribution_total`,'') <> IFNULL(NEW.`contribution_total`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_mailing_stats (`id`, `mailing_id`, `mailing_name`, `is_completed`, `created_date`, `start`, `finish`, `recipients`, `delivered`, `send_rate`, `bounced`, `blocked`, `suppressed`, `abuse_complaints`, `opened_total`, `opened_unique`, `unsubscribed`, `forwarded`, `clicked_total`, `clicked_unique`, `trackable_urls`, `clicked_contribution_page`, `contribution_count`, `contribution_total`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`mailing_id`, NEW.`mailing_name`, NEW.`is_completed`, NEW.`created_date`, NEW.`start`, NEW.`finish`, NEW.`recipients`, NEW.`delivered`, NEW.`send_rate`, NEW.`bounced`, NEW.`blocked`, NEW.`suppressed`, NEW.`abuse_complaints`, NEW.`opened_total`, NEW.`opened_unique`, NEW.`unsubscribed`, NEW.`forwarded`, NEW.`clicked_total`, NEW.`clicked_unique`, NEW.`trackable_urls`, NEW.`clicked_contribution_page`, NEW.`contribution_count`, NEW.`contribution_total`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_mailing_stats_after_delete after delete ON civicrm_mailing_stats FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_mailing_stats (`id`, `mailing_id`, `mailing_name`, `is_completed`, `created_date`, `start`, `finish`, `recipients`, `delivered`, `send_rate`, `bounced`, `blocked`, `suppressed`, `abuse_complaints`, `opened_total`, `opened_unique`, `unsubscribed`, `forwarded`, `clicked_total`, `clicked_unique`, `trackable_urls`, `clicked_contribution_page`, `contribution_count`, `contribution_total`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`mailing_id`, OLD.`mailing_name`, OLD.`is_completed`, OLD.`created_date`, OLD.`start`, OLD.`finish`, OLD.`recipients`, OLD.`delivered`, OLD.`send_rate`, OLD.`bounced`, OLD.`blocked`, OLD.`suppressed`, OLD.`abuse_complaints`, OLD.`opened_total`, OLD.`opened_unique`, OLD.`unsubscribed`, OLD.`forwarded`, OLD.`clicked_total`, OLD.`clicked_unique`, OLD.`trackable_urls`, OLD.`clicked_contribution_page`, OLD.`contribution_count`, OLD.`contribution_total`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_mailing_stats_performance_after_insert after insert ON civicrm_mailing_stats_performance FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_mailing_stats_performance (`id`, `time`, `doing`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`time`, NEW.`doing`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_mailing_stats_performance_after_update after update ON civicrm_mailing_stats_performance FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`time`,'') <> IFNULL(NEW.`time`,'') OR IFNULL(OLD.`doing`,'') <> IFNULL(NEW.`doing`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_mailing_stats_performance (`id`, `time`, `doing`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`time`, NEW.`doing`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_mailing_stats_performance_after_delete after delete ON civicrm_mailing_stats_performance FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_mailing_stats_performance (`id`, `time`, `doing`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`time`, OLD.`doing`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_mailing_trackable_url_after_insert after insert ON civicrm_mailing_trackable_url FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_mailing_trackable_url (`id`, `url`, `mailing_id`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`url`, NEW.`mailing_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_mailing_trackable_url_after_update after update ON civicrm_mailing_trackable_url FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`url`,'') <> IFNULL(NEW.`url`,'') OR IFNULL(OLD.`mailing_id`,'') <> IFNULL(NEW.`mailing_id`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_mailing_trackable_url (`id`, `url`, `mailing_id`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`url`, NEW.`mailing_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_mailing_trackable_url_after_delete after delete ON civicrm_mailing_trackable_url FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_mailing_trackable_url (`id`, `url`, `mailing_id`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`url`, OLD.`mailing_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_managed_after_insert after insert ON civicrm_managed FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_managed (`id`, `module`, `name`, `entity_type`, `entity_id`, `cleanup`, `entity_modified_date`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`module`, NEW.`name`, NEW.`entity_type`, NEW.`entity_id`, NEW.`cleanup`, NEW.`entity_modified_date`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_managed_after_update after update ON civicrm_managed FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`module`,'') <> IFNULL(NEW.`module`,'') OR IFNULL(OLD.`name`,'') <> IFNULL(NEW.`name`,'') OR IFNULL(OLD.`entity_type`,'') <> IFNULL(NEW.`entity_type`,'') OR IFNULL(OLD.`entity_id`,'') <> IFNULL(NEW.`entity_id`,'') OR IFNULL(OLD.`cleanup`,'') <> IFNULL(NEW.`cleanup`,'') OR IFNULL(OLD.`entity_modified_date`,'') <> IFNULL(NEW.`entity_modified_date`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_managed (`id`, `module`, `name`, `entity_type`, `entity_id`, `cleanup`, `entity_modified_date`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`module`, NEW.`name`, NEW.`entity_type`, NEW.`entity_id`, NEW.`cleanup`, NEW.`entity_modified_date`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_managed_after_delete after delete ON civicrm_managed FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_managed (`id`, `module`, `name`, `entity_type`, `entity_id`, `cleanup`, `entity_modified_date`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`module`, OLD.`name`, OLD.`entity_type`, OLD.`entity_id`, OLD.`cleanup`, OLD.`entity_modified_date`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_mapping_after_insert after insert ON civicrm_mapping FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_mapping (`id`, `name`, `description`, `mapping_type_id`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`name`, NEW.`description`, NEW.`mapping_type_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_mapping_after_update after update ON civicrm_mapping FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`name`,'') <> IFNULL(NEW.`name`,'') OR IFNULL(OLD.`description`,'') <> IFNULL(NEW.`description`,'') OR IFNULL(OLD.`mapping_type_id`,'') <> IFNULL(NEW.`mapping_type_id`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_mapping (`id`, `name`, `description`, `mapping_type_id`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`name`, NEW.`description`, NEW.`mapping_type_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_mapping_after_delete after delete ON civicrm_mapping FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_mapping (`id`, `name`, `description`, `mapping_type_id`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`name`, OLD.`description`, OLD.`mapping_type_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_mapping_field_after_insert after insert ON civicrm_mapping_field FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_mapping_field (`id`, `mapping_id`, `name`, `contact_type`, `column_number`, `location_type_id`, `phone_type_id`, `im_provider_id`, `relationship_type_id`, `relationship_direction`, `grouping`, `operator`, `value`, `website_type_id`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`mapping_id`, NEW.`name`, NEW.`contact_type`, NEW.`column_number`, NEW.`location_type_id`, NEW.`phone_type_id`, NEW.`im_provider_id`, NEW.`relationship_type_id`, NEW.`relationship_direction`, NEW.`grouping`, NEW.`operator`, NEW.`value`, NEW.`website_type_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_mapping_field_after_update after update ON civicrm_mapping_field FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`mapping_id`,'') <> IFNULL(NEW.`mapping_id`,'') OR IFNULL(OLD.`name`,'') <> IFNULL(NEW.`name`,'') OR IFNULL(OLD.`contact_type`,'') <> IFNULL(NEW.`contact_type`,'') OR IFNULL(OLD.`column_number`,'') <> IFNULL(NEW.`column_number`,'') OR IFNULL(OLD.`location_type_id`,'') <> IFNULL(NEW.`location_type_id`,'') OR IFNULL(OLD.`phone_type_id`,'') <> IFNULL(NEW.`phone_type_id`,'') OR IFNULL(OLD.`im_provider_id`,'') <> IFNULL(NEW.`im_provider_id`,'') OR IFNULL(OLD.`relationship_type_id`,'') <> IFNULL(NEW.`relationship_type_id`,'') OR IFNULL(OLD.`relationship_direction`,'') <> IFNULL(NEW.`relationship_direction`,'') OR IFNULL(OLD.`grouping`,'') <> IFNULL(NEW.`grouping`,'') OR IFNULL(OLD.`operator`,'') <> IFNULL(NEW.`operator`,'') OR IFNULL(OLD.`value`,'') <> IFNULL(NEW.`value`,'') OR IFNULL(OLD.`website_type_id`,'') <> IFNULL(NEW.`website_type_id`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_mapping_field (`id`, `mapping_id`, `name`, `contact_type`, `column_number`, `location_type_id`, `phone_type_id`, `im_provider_id`, `relationship_type_id`, `relationship_direction`, `grouping`, `operator`, `value`, `website_type_id`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`mapping_id`, NEW.`name`, NEW.`contact_type`, NEW.`column_number`, NEW.`location_type_id`, NEW.`phone_type_id`, NEW.`im_provider_id`, NEW.`relationship_type_id`, NEW.`relationship_direction`, NEW.`grouping`, NEW.`operator`, NEW.`value`, NEW.`website_type_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_mapping_field_after_delete after delete ON civicrm_mapping_field FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_mapping_field (`id`, `mapping_id`, `name`, `contact_type`, `column_number`, `location_type_id`, `phone_type_id`, `im_provider_id`, `relationship_type_id`, `relationship_direction`, `grouping`, `operator`, `value`, `website_type_id`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`mapping_id`, OLD.`name`, OLD.`contact_type`, OLD.`column_number`, OLD.`location_type_id`, OLD.`phone_type_id`, OLD.`im_provider_id`, OLD.`relationship_type_id`, OLD.`relationship_direction`, OLD.`grouping`, OLD.`operator`, OLD.`value`, OLD.`website_type_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_membership_after_insert after insert ON civicrm_membership FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_membership (`id`, `contact_id`, `membership_type_id`, `join_date`, `start_date`, `end_date`, `source`, `status_id`, `is_override`, `owner_membership_id`, `max_related`, `is_test`, `is_pay_later`, `contribution_recur_id`, `campaign_id`, `status_override_end_date`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`contact_id`, NEW.`membership_type_id`, NEW.`join_date`, NEW.`start_date`, NEW.`end_date`, NEW.`source`, NEW.`status_id`, NEW.`is_override`, NEW.`owner_membership_id`, NEW.`max_related`, NEW.`is_test`, NEW.`is_pay_later`, NEW.`contribution_recur_id`, NEW.`campaign_id`, NEW.`status_override_end_date`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_membership_after_update after update ON civicrm_membership FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`contact_id`,'') <> IFNULL(NEW.`contact_id`,'') OR IFNULL(OLD.`membership_type_id`,'') <> IFNULL(NEW.`membership_type_id`,'') OR IFNULL(OLD.`join_date`,'') <> IFNULL(NEW.`join_date`,'') OR IFNULL(OLD.`start_date`,'') <> IFNULL(NEW.`start_date`,'') OR IFNULL(OLD.`end_date`,'') <> IFNULL(NEW.`end_date`,'') OR IFNULL(OLD.`source`,'') <> IFNULL(NEW.`source`,'') OR IFNULL(OLD.`status_id`,'') <> IFNULL(NEW.`status_id`,'') OR IFNULL(OLD.`is_override`,'') <> IFNULL(NEW.`is_override`,'') OR IFNULL(OLD.`owner_membership_id`,'') <> IFNULL(NEW.`owner_membership_id`,'') OR IFNULL(OLD.`max_related`,'') <> IFNULL(NEW.`max_related`,'') OR IFNULL(OLD.`is_test`,'') <> IFNULL(NEW.`is_test`,'') OR IFNULL(OLD.`is_pay_later`,'') <> IFNULL(NEW.`is_pay_later`,'') OR IFNULL(OLD.`contribution_recur_id`,'') <> IFNULL(NEW.`contribution_recur_id`,'') OR IFNULL(OLD.`campaign_id`,'') <> IFNULL(NEW.`campaign_id`,'') OR IFNULL(OLD.`status_override_end_date`,'') <> IFNULL(NEW.`status_override_end_date`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_membership (`id`, `contact_id`, `membership_type_id`, `join_date`, `start_date`, `end_date`, `source`, `status_id`, `is_override`, `owner_membership_id`, `max_related`, `is_test`, `is_pay_later`, `contribution_recur_id`, `campaign_id`, `status_override_end_date`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`contact_id`, NEW.`membership_type_id`, NEW.`join_date`, NEW.`start_date`, NEW.`end_date`, NEW.`source`, NEW.`status_id`, NEW.`is_override`, NEW.`owner_membership_id`, NEW.`max_related`, NEW.`is_test`, NEW.`is_pay_later`, NEW.`contribution_recur_id`, NEW.`campaign_id`, NEW.`status_override_end_date`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_membership_after_delete after delete ON civicrm_membership FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_membership (`id`, `contact_id`, `membership_type_id`, `join_date`, `start_date`, `end_date`, `source`, `status_id`, `is_override`, `owner_membership_id`, `max_related`, `is_test`, `is_pay_later`, `contribution_recur_id`, `campaign_id`, `status_override_end_date`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`contact_id`, OLD.`membership_type_id`, OLD.`join_date`, OLD.`start_date`, OLD.`end_date`, OLD.`source`, OLD.`status_id`, OLD.`is_override`, OLD.`owner_membership_id`, OLD.`max_related`, OLD.`is_test`, OLD.`is_pay_later`, OLD.`contribution_recur_id`, OLD.`campaign_id`, OLD.`status_override_end_date`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_membership_block_after_insert after insert ON civicrm_membership_block FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_membership_block (`id`, `entity_table`, `entity_id`, `membership_types`, `membership_type_default`, `display_min_fee`, `is_separate_payment`, `new_title`, `new_text`, `renewal_title`, `renewal_text`, `is_required`, `is_active`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`entity_table`, NEW.`entity_id`, NEW.`membership_types`, NEW.`membership_type_default`, NEW.`display_min_fee`, NEW.`is_separate_payment`, NEW.`new_title`, NEW.`new_text`, NEW.`renewal_title`, NEW.`renewal_text`, NEW.`is_required`, NEW.`is_active`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_membership_block_after_update after update ON civicrm_membership_block FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`entity_table`,'') <> IFNULL(NEW.`entity_table`,'') OR IFNULL(OLD.`entity_id`,'') <> IFNULL(NEW.`entity_id`,'') OR IFNULL(OLD.`membership_types`,'') <> IFNULL(NEW.`membership_types`,'') OR IFNULL(OLD.`membership_type_default`,'') <> IFNULL(NEW.`membership_type_default`,'') OR IFNULL(OLD.`display_min_fee`,'') <> IFNULL(NEW.`display_min_fee`,'') OR IFNULL(OLD.`is_separate_payment`,'') <> IFNULL(NEW.`is_separate_payment`,'') OR IFNULL(OLD.`new_title`,'') <> IFNULL(NEW.`new_title`,'') OR IFNULL(OLD.`new_text`,'') <> IFNULL(NEW.`new_text`,'') OR IFNULL(OLD.`renewal_title`,'') <> IFNULL(NEW.`renewal_title`,'') OR IFNULL(OLD.`renewal_text`,'') <> IFNULL(NEW.`renewal_text`,'') OR IFNULL(OLD.`is_required`,'') <> IFNULL(NEW.`is_required`,'') OR IFNULL(OLD.`is_active`,'') <> IFNULL(NEW.`is_active`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_membership_block (`id`, `entity_table`, `entity_id`, `membership_types`, `membership_type_default`, `display_min_fee`, `is_separate_payment`, `new_title`, `new_text`, `renewal_title`, `renewal_text`, `is_required`, `is_active`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`entity_table`, NEW.`entity_id`, NEW.`membership_types`, NEW.`membership_type_default`, NEW.`display_min_fee`, NEW.`is_separate_payment`, NEW.`new_title`, NEW.`new_text`, NEW.`renewal_title`, NEW.`renewal_text`, NEW.`is_required`, NEW.`is_active`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_membership_block_after_delete after delete ON civicrm_membership_block FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_membership_block (`id`, `entity_table`, `entity_id`, `membership_types`, `membership_type_default`, `display_min_fee`, `is_separate_payment`, `new_title`, `new_text`, `renewal_title`, `renewal_text`, `is_required`, `is_active`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`entity_table`, OLD.`entity_id`, OLD.`membership_types`, OLD.`membership_type_default`, OLD.`display_min_fee`, OLD.`is_separate_payment`, OLD.`new_title`, OLD.`new_text`, OLD.`renewal_title`, OLD.`renewal_text`, OLD.`is_required`, OLD.`is_active`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_membership_payment_after_insert after insert ON civicrm_membership_payment FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_membership_payment (`id`, `membership_id`, `contribution_id`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`membership_id`, NEW.`contribution_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_membership_payment_after_update after update ON civicrm_membership_payment FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`membership_id`,'') <> IFNULL(NEW.`membership_id`,'') OR IFNULL(OLD.`contribution_id`,'') <> IFNULL(NEW.`contribution_id`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_membership_payment (`id`, `membership_id`, `contribution_id`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`membership_id`, NEW.`contribution_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_membership_payment_after_delete after delete ON civicrm_membership_payment FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_membership_payment (`id`, `membership_id`, `contribution_id`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`membership_id`, OLD.`contribution_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_membership_status_after_insert after insert ON civicrm_membership_status FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_membership_status (`id`, `name`, `start_event`, `start_event_adjust_unit`, `start_event_adjust_interval`, `end_event`, `end_event_adjust_unit`, `end_event_adjust_interval`, `is_current_member`, `is_admin`, `weight`, `is_default`, `is_active`, `is_reserved`, `label`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`name`, NEW.`start_event`, NEW.`start_event_adjust_unit`, NEW.`start_event_adjust_interval`, NEW.`end_event`, NEW.`end_event_adjust_unit`, NEW.`end_event_adjust_interval`, NEW.`is_current_member`, NEW.`is_admin`, NEW.`weight`, NEW.`is_default`, NEW.`is_active`, NEW.`is_reserved`, NEW.`label`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_membership_status_after_update after update ON civicrm_membership_status FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`name`,'') <> IFNULL(NEW.`name`,'') OR IFNULL(OLD.`start_event`,'') <> IFNULL(NEW.`start_event`,'') OR IFNULL(OLD.`start_event_adjust_unit`,'') <> IFNULL(NEW.`start_event_adjust_unit`,'') OR IFNULL(OLD.`start_event_adjust_interval`,'') <> IFNULL(NEW.`start_event_adjust_interval`,'') OR IFNULL(OLD.`end_event`,'') <> IFNULL(NEW.`end_event`,'') OR IFNULL(OLD.`end_event_adjust_unit`,'') <> IFNULL(NEW.`end_event_adjust_unit`,'') OR IFNULL(OLD.`end_event_adjust_interval`,'') <> IFNULL(NEW.`end_event_adjust_interval`,'') OR IFNULL(OLD.`is_current_member`,'') <> IFNULL(NEW.`is_current_member`,'') OR IFNULL(OLD.`is_admin`,'') <> IFNULL(NEW.`is_admin`,'') OR IFNULL(OLD.`weight`,'') <> IFNULL(NEW.`weight`,'') OR IFNULL(OLD.`is_default`,'') <> IFNULL(NEW.`is_default`,'') OR IFNULL(OLD.`is_active`,'') <> IFNULL(NEW.`is_active`,'') OR IFNULL(OLD.`is_reserved`,'') <> IFNULL(NEW.`is_reserved`,'') OR IFNULL(OLD.`label`,'') <> IFNULL(NEW.`label`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_membership_status (`id`, `name`, `start_event`, `start_event_adjust_unit`, `start_event_adjust_interval`, `end_event`, `end_event_adjust_unit`, `end_event_adjust_interval`, `is_current_member`, `is_admin`, `weight`, `is_default`, `is_active`, `is_reserved`, `label`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`name`, NEW.`start_event`, NEW.`start_event_adjust_unit`, NEW.`start_event_adjust_interval`, NEW.`end_event`, NEW.`end_event_adjust_unit`, NEW.`end_event_adjust_interval`, NEW.`is_current_member`, NEW.`is_admin`, NEW.`weight`, NEW.`is_default`, NEW.`is_active`, NEW.`is_reserved`, NEW.`label`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_membership_status_after_delete after delete ON civicrm_membership_status FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_membership_status (`id`, `name`, `start_event`, `start_event_adjust_unit`, `start_event_adjust_interval`, `end_event`, `end_event_adjust_unit`, `end_event_adjust_interval`, `is_current_member`, `is_admin`, `weight`, `is_default`, `is_active`, `is_reserved`, `label`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`name`, OLD.`start_event`, OLD.`start_event_adjust_unit`, OLD.`start_event_adjust_interval`, OLD.`end_event`, OLD.`end_event_adjust_unit`, OLD.`end_event_adjust_interval`, OLD.`is_current_member`, OLD.`is_admin`, OLD.`weight`, OLD.`is_default`, OLD.`is_active`, OLD.`is_reserved`, OLD.`label`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_membership_type_after_insert after insert ON civicrm_membership_type FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_membership_type (`id`, `domain_id`, `name`, `description`, `member_of_contact_id`, `financial_type_id`, `minimum_fee`, `duration_unit`, `duration_interval`, `period_type`, `fixed_period_start_day`, `fixed_period_rollover_day`, `relationship_type_id`, `relationship_direction`, `max_related`, `visibility`, `weight`, `receipt_text_signup`, `receipt_text_renewal`, `is_active`, `auto_renew`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`domain_id`, NEW.`name`, NEW.`description`, NEW.`member_of_contact_id`, NEW.`financial_type_id`, NEW.`minimum_fee`, NEW.`duration_unit`, NEW.`duration_interval`, NEW.`period_type`, NEW.`fixed_period_start_day`, NEW.`fixed_period_rollover_day`, NEW.`relationship_type_id`, NEW.`relationship_direction`, NEW.`max_related`, NEW.`visibility`, NEW.`weight`, NEW.`receipt_text_signup`, NEW.`receipt_text_renewal`, NEW.`is_active`, NEW.`auto_renew`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_membership_type_after_update after update ON civicrm_membership_type FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`domain_id`,'') <> IFNULL(NEW.`domain_id`,'') OR IFNULL(OLD.`name`,'') <> IFNULL(NEW.`name`,'') OR IFNULL(OLD.`description`,'') <> IFNULL(NEW.`description`,'') OR IFNULL(OLD.`member_of_contact_id`,'') <> IFNULL(NEW.`member_of_contact_id`,'') OR IFNULL(OLD.`financial_type_id`,'') <> IFNULL(NEW.`financial_type_id`,'') OR IFNULL(OLD.`minimum_fee`,'') <> IFNULL(NEW.`minimum_fee`,'') OR IFNULL(OLD.`duration_unit`,'') <> IFNULL(NEW.`duration_unit`,'') OR IFNULL(OLD.`duration_interval`,'') <> IFNULL(NEW.`duration_interval`,'') OR IFNULL(OLD.`period_type`,'') <> IFNULL(NEW.`period_type`,'') OR IFNULL(OLD.`fixed_period_start_day`,'') <> IFNULL(NEW.`fixed_period_start_day`,'') OR IFNULL(OLD.`fixed_period_rollover_day`,'') <> IFNULL(NEW.`fixed_period_rollover_day`,'') OR IFNULL(OLD.`relationship_type_id`,'') <> IFNULL(NEW.`relationship_type_id`,'') OR IFNULL(OLD.`relationship_direction`,'') <> IFNULL(NEW.`relationship_direction`,'') OR IFNULL(OLD.`max_related`,'') <> IFNULL(NEW.`max_related`,'') OR IFNULL(OLD.`visibility`,'') <> IFNULL(NEW.`visibility`,'') OR IFNULL(OLD.`weight`,'') <> IFNULL(NEW.`weight`,'') OR IFNULL(OLD.`receipt_text_signup`,'') <> IFNULL(NEW.`receipt_text_signup`,'') OR IFNULL(OLD.`receipt_text_renewal`,'') <> IFNULL(NEW.`receipt_text_renewal`,'') OR IFNULL(OLD.`is_active`,'') <> IFNULL(NEW.`is_active`,'') OR IFNULL(OLD.`auto_renew`,'') <> IFNULL(NEW.`auto_renew`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_membership_type (`id`, `domain_id`, `name`, `description`, `member_of_contact_id`, `financial_type_id`, `minimum_fee`, `duration_unit`, `duration_interval`, `period_type`, `fixed_period_start_day`, `fixed_period_rollover_day`, `relationship_type_id`, `relationship_direction`, `max_related`, `visibility`, `weight`, `receipt_text_signup`, `receipt_text_renewal`, `is_active`, `auto_renew`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`domain_id`, NEW.`name`, NEW.`description`, NEW.`member_of_contact_id`, NEW.`financial_type_id`, NEW.`minimum_fee`, NEW.`duration_unit`, NEW.`duration_interval`, NEW.`period_type`, NEW.`fixed_period_start_day`, NEW.`fixed_period_rollover_day`, NEW.`relationship_type_id`, NEW.`relationship_direction`, NEW.`max_related`, NEW.`visibility`, NEW.`weight`, NEW.`receipt_text_signup`, NEW.`receipt_text_renewal`, NEW.`is_active`, NEW.`auto_renew`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_membership_type_after_delete after delete ON civicrm_membership_type FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_membership_type (`id`, `domain_id`, `name`, `description`, `member_of_contact_id`, `financial_type_id`, `minimum_fee`, `duration_unit`, `duration_interval`, `period_type`, `fixed_period_start_day`, `fixed_period_rollover_day`, `relationship_type_id`, `relationship_direction`, `max_related`, `visibility`, `weight`, `receipt_text_signup`, `receipt_text_renewal`, `is_active`, `auto_renew`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`domain_id`, OLD.`name`, OLD.`description`, OLD.`member_of_contact_id`, OLD.`financial_type_id`, OLD.`minimum_fee`, OLD.`duration_unit`, OLD.`duration_interval`, OLD.`period_type`, OLD.`fixed_period_start_day`, OLD.`fixed_period_rollover_day`, OLD.`relationship_type_id`, OLD.`relationship_direction`, OLD.`max_related`, OLD.`visibility`, OLD.`weight`, OLD.`receipt_text_signup`, OLD.`receipt_text_renewal`, OLD.`is_active`, OLD.`auto_renew`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_mergeconflict_after_insert after insert ON civicrm_mergeconflict FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_mergeconflict (`id`, `contact_1`, `contact_2`, `group_id`, `conflicted_field`, `value_1`, `value_2`, `analysis`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`contact_1`, NEW.`contact_2`, NEW.`group_id`, NEW.`conflicted_field`, NEW.`value_1`, NEW.`value_2`, NEW.`analysis`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_mergeconflict_after_update after update ON civicrm_mergeconflict FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`contact_1`,'') <> IFNULL(NEW.`contact_1`,'') OR IFNULL(OLD.`contact_2`,'') <> IFNULL(NEW.`contact_2`,'') OR IFNULL(OLD.`group_id`,'') <> IFNULL(NEW.`group_id`,'') OR IFNULL(OLD.`conflicted_field`,'') <> IFNULL(NEW.`conflicted_field`,'') OR IFNULL(OLD.`value_1`,'') <> IFNULL(NEW.`value_1`,'') OR IFNULL(OLD.`value_2`,'') <> IFNULL(NEW.`value_2`,'') OR IFNULL(OLD.`analysis`,'') <> IFNULL(NEW.`analysis`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_mergeconflict (`id`, `contact_1`, `contact_2`, `group_id`, `conflicted_field`, `value_1`, `value_2`, `analysis`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`contact_1`, NEW.`contact_2`, NEW.`group_id`, NEW.`conflicted_field`, NEW.`value_1`, NEW.`value_2`, NEW.`analysis`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_mergeconflict_after_delete after delete ON civicrm_mergeconflict FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_mergeconflict (`id`, `contact_1`, `contact_2`, `group_id`, `conflicted_field`, `value_1`, `value_2`, `analysis`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`contact_1`, OLD.`contact_2`, OLD.`group_id`, OLD.`conflicted_field`, OLD.`value_1`, OLD.`value_2`, OLD.`analysis`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_monolog_after_insert after insert ON civicrm_monolog FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_monolog (`id`, `name`, `channel`, `description`, `type`, `minimum_severity`, `weight`, `is_active`, `is_final`, `is_default`, `configuration_options`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`name`, NEW.`channel`, NEW.`description`, NEW.`type`, NEW.`minimum_severity`, NEW.`weight`, NEW.`is_active`, NEW.`is_final`, NEW.`is_default`, NEW.`configuration_options`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_monolog_after_update after update ON civicrm_monolog FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`name`,'') <> IFNULL(NEW.`name`,'') OR IFNULL(OLD.`channel`,'') <> IFNULL(NEW.`channel`,'') OR IFNULL(OLD.`description`,'') <> IFNULL(NEW.`description`,'') OR IFNULL(OLD.`type`,'') <> IFNULL(NEW.`type`,'') OR IFNULL(OLD.`minimum_severity`,'') <> IFNULL(NEW.`minimum_severity`,'') OR IFNULL(OLD.`weight`,'') <> IFNULL(NEW.`weight`,'') OR IFNULL(OLD.`is_active`,'') <> IFNULL(NEW.`is_active`,'') OR IFNULL(OLD.`is_final`,'') <> IFNULL(NEW.`is_final`,'') OR IFNULL(OLD.`is_default`,'') <> IFNULL(NEW.`is_default`,'') OR IFNULL(OLD.`configuration_options`,'') <> IFNULL(NEW.`configuration_options`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_monolog (`id`, `name`, `channel`, `description`, `type`, `minimum_severity`, `weight`, `is_active`, `is_final`, `is_default`, `configuration_options`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`name`, NEW.`channel`, NEW.`description`, NEW.`type`, NEW.`minimum_severity`, NEW.`weight`, NEW.`is_active`, NEW.`is_final`, NEW.`is_default`, NEW.`configuration_options`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_monolog_after_delete after delete ON civicrm_monolog FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_monolog (`id`, `name`, `channel`, `description`, `type`, `minimum_severity`, `weight`, `is_active`, `is_final`, `is_default`, `configuration_options`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`name`, OLD.`channel`, OLD.`description`, OLD.`type`, OLD.`minimum_severity`, OLD.`weight`, OLD.`is_active`, OLD.`is_final`, OLD.`is_default`, OLD.`configuration_options`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_msg_template_after_insert after insert ON civicrm_msg_template FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_msg_template (`id`, `msg_title`, `msg_subject`, `msg_text`, `msg_html`, `is_active`, `workflow_id`, `is_default`, `is_reserved`, `pdf_format_id`, `is_sms`, `workflow_name`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`msg_title`, NEW.`msg_subject`, NEW.`msg_text`, NEW.`msg_html`, NEW.`is_active`, NEW.`workflow_id`, NEW.`is_default`, NEW.`is_reserved`, NEW.`pdf_format_id`, NEW.`is_sms`, NEW.`workflow_name`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_msg_template_after_update after update ON civicrm_msg_template FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`msg_title`,'') <> IFNULL(NEW.`msg_title`,'') OR IFNULL(OLD.`msg_subject`,'') <> IFNULL(NEW.`msg_subject`,'') OR IFNULL(OLD.`msg_text`,'') <> IFNULL(NEW.`msg_text`,'') OR IFNULL(OLD.`msg_html`,'') <> IFNULL(NEW.`msg_html`,'') OR IFNULL(OLD.`is_active`,'') <> IFNULL(NEW.`is_active`,'') OR IFNULL(OLD.`workflow_id`,'') <> IFNULL(NEW.`workflow_id`,'') OR IFNULL(OLD.`is_default`,'') <> IFNULL(NEW.`is_default`,'') OR IFNULL(OLD.`is_reserved`,'') <> IFNULL(NEW.`is_reserved`,'') OR IFNULL(OLD.`pdf_format_id`,'') <> IFNULL(NEW.`pdf_format_id`,'') OR IFNULL(OLD.`is_sms`,'') <> IFNULL(NEW.`is_sms`,'') OR IFNULL(OLD.`workflow_name`,'') <> IFNULL(NEW.`workflow_name`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_msg_template (`id`, `msg_title`, `msg_subject`, `msg_text`, `msg_html`, `is_active`, `workflow_id`, `is_default`, `is_reserved`, `pdf_format_id`, `is_sms`, `workflow_name`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`msg_title`, NEW.`msg_subject`, NEW.`msg_text`, NEW.`msg_html`, NEW.`is_active`, NEW.`workflow_id`, NEW.`is_default`, NEW.`is_reserved`, NEW.`pdf_format_id`, NEW.`is_sms`, NEW.`workflow_name`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_msg_template_after_delete after delete ON civicrm_msg_template FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_msg_template (`id`, `msg_title`, `msg_subject`, `msg_text`, `msg_html`, `is_active`, `workflow_id`, `is_default`, `is_reserved`, `pdf_format_id`, `is_sms`, `workflow_name`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`msg_title`, OLD.`msg_subject`, OLD.`msg_text`, OLD.`msg_html`, OLD.`is_active`, OLD.`workflow_id`, OLD.`is_default`, OLD.`is_reserved`, OLD.`pdf_format_id`, OLD.`is_sms`, OLD.`workflow_name`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_navigation_after_insert after insert ON civicrm_navigation FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_navigation (`id`, `domain_id`, `label`, `name`, `url`, `permission`, `permission_operator`, `parent_id`, `is_active`, `has_separator`, `weight`, `icon`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`domain_id`, NEW.`label`, NEW.`name`, NEW.`url`, NEW.`permission`, NEW.`permission_operator`, NEW.`parent_id`, NEW.`is_active`, NEW.`has_separator`, NEW.`weight`, NEW.`icon`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_navigation_after_update after update ON civicrm_navigation FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`domain_id`,'') <> IFNULL(NEW.`domain_id`,'') OR IFNULL(OLD.`label`,'') <> IFNULL(NEW.`label`,'') OR IFNULL(OLD.`name`,'') <> IFNULL(NEW.`name`,'') OR IFNULL(OLD.`url`,'') <> IFNULL(NEW.`url`,'') OR IFNULL(OLD.`permission`,'') <> IFNULL(NEW.`permission`,'') OR IFNULL(OLD.`permission_operator`,'') <> IFNULL(NEW.`permission_operator`,'') OR IFNULL(OLD.`parent_id`,'') <> IFNULL(NEW.`parent_id`,'') OR IFNULL(OLD.`is_active`,'') <> IFNULL(NEW.`is_active`,'') OR IFNULL(OLD.`has_separator`,'') <> IFNULL(NEW.`has_separator`,'') OR IFNULL(OLD.`weight`,'') <> IFNULL(NEW.`weight`,'') OR IFNULL(OLD.`icon`,'') <> IFNULL(NEW.`icon`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_navigation (`id`, `domain_id`, `label`, `name`, `url`, `permission`, `permission_operator`, `parent_id`, `is_active`, `has_separator`, `weight`, `icon`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`domain_id`, NEW.`label`, NEW.`name`, NEW.`url`, NEW.`permission`, NEW.`permission_operator`, NEW.`parent_id`, NEW.`is_active`, NEW.`has_separator`, NEW.`weight`, NEW.`icon`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_navigation_after_delete after delete ON civicrm_navigation FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_navigation (`id`, `domain_id`, `label`, `name`, `url`, `permission`, `permission_operator`, `parent_id`, `is_active`, `has_separator`, `weight`, `icon`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`domain_id`, OLD.`label`, OLD.`name`, OLD.`url`, OLD.`permission`, OLD.`permission_operator`, OLD.`parent_id`, OLD.`is_active`, OLD.`has_separator`, OLD.`weight`, OLD.`icon`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_note_after_insert after insert ON civicrm_note FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_note (`id`, `entity_table`, `entity_id`, `note`, `contact_id`, `modified_date`, `subject`, `privacy`, `note_date`, `created_date`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`entity_table`, NEW.`entity_id`, NEW.`note`, NEW.`contact_id`, NEW.`modified_date`, NEW.`subject`, NEW.`privacy`, NEW.`note_date`, NEW.`created_date`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_note_after_update after update ON civicrm_note FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`entity_table`,'') <> IFNULL(NEW.`entity_table`,'') OR IFNULL(OLD.`entity_id`,'') <> IFNULL(NEW.`entity_id`,'') OR IFNULL(OLD.`note`,'') <> IFNULL(NEW.`note`,'') OR IFNULL(OLD.`contact_id`,'') <> IFNULL(NEW.`contact_id`,'') OR IFNULL(OLD.`subject`,'') <> IFNULL(NEW.`subject`,'') OR IFNULL(OLD.`privacy`,'') <> IFNULL(NEW.`privacy`,'') OR IFNULL(OLD.`note_date`,'') <> IFNULL(NEW.`note_date`,'') OR IFNULL(OLD.`created_date`,'') <> IFNULL(NEW.`created_date`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_note (`id`, `entity_table`, `entity_id`, `note`, `contact_id`, `modified_date`, `subject`, `privacy`, `note_date`, `created_date`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`entity_table`, NEW.`entity_id`, NEW.`note`, NEW.`contact_id`, NEW.`modified_date`, NEW.`subject`, NEW.`privacy`, NEW.`note_date`, NEW.`created_date`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_note_after_delete after delete ON civicrm_note FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_note (`id`, `entity_table`, `entity_id`, `note`, `contact_id`, `modified_date`, `subject`, `privacy`, `note_date`, `created_date`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`entity_table`, OLD.`entity_id`, OLD.`note`, OLD.`contact_id`, OLD.`modified_date`, OLD.`subject`, OLD.`privacy`, OLD.`note_date`, OLD.`created_date`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_oauth_client_after_insert after insert ON civicrm_oauth_client FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_oauth_client (`id`, `provider`, `guid`, `tenant`, `secret`, `options`, `is_active`, `created_date`, `modified_date`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`provider`, NEW.`guid`, NEW.`tenant`, NEW.`secret`, NEW.`options`, NEW.`is_active`, NEW.`created_date`, NEW.`modified_date`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_oauth_client_after_update after update ON civicrm_oauth_client FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`provider`,'') <> IFNULL(NEW.`provider`,'') OR IFNULL(OLD.`guid`,'') <> IFNULL(NEW.`guid`,'') OR IFNULL(OLD.`tenant`,'') <> IFNULL(NEW.`tenant`,'') OR IFNULL(OLD.`secret`,'') <> IFNULL(NEW.`secret`,'') OR IFNULL(OLD.`options`,'') <> IFNULL(NEW.`options`,'') OR IFNULL(OLD.`is_active`,'') <> IFNULL(NEW.`is_active`,'') OR IFNULL(OLD.`created_date`,'') <> IFNULL(NEW.`created_date`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_oauth_client (`id`, `provider`, `guid`, `tenant`, `secret`, `options`, `is_active`, `created_date`, `modified_date`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`provider`, NEW.`guid`, NEW.`tenant`, NEW.`secret`, NEW.`options`, NEW.`is_active`, NEW.`created_date`, NEW.`modified_date`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_oauth_client_after_delete after delete ON civicrm_oauth_client FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_oauth_client (`id`, `provider`, `guid`, `tenant`, `secret`, `options`, `is_active`, `created_date`, `modified_date`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`provider`, OLD.`guid`, OLD.`tenant`, OLD.`secret`, OLD.`options`, OLD.`is_active`, OLD.`created_date`, OLD.`modified_date`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_oauth_contact_token_after_insert after insert ON civicrm_oauth_contact_token FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_oauth_contact_token (`id`, `tag`, `client_id`, `contact_id`, `grant_type`, `scopes`, `token_type`, `access_token`, `expires`, `refresh_token`, `resource_owner_name`, `resource_owner`, `error`, `raw`, `created_date`, `modified_date`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`tag`, NEW.`client_id`, NEW.`contact_id`, NEW.`grant_type`, NEW.`scopes`, NEW.`token_type`, NEW.`access_token`, NEW.`expires`, NEW.`refresh_token`, NEW.`resource_owner_name`, NEW.`resource_owner`, NEW.`error`, NEW.`raw`, NEW.`created_date`, NEW.`modified_date`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_oauth_contact_token_after_update after update ON civicrm_oauth_contact_token FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`tag`,'') <> IFNULL(NEW.`tag`,'') OR IFNULL(OLD.`client_id`,'') <> IFNULL(NEW.`client_id`,'') OR IFNULL(OLD.`contact_id`,'') <> IFNULL(NEW.`contact_id`,'') OR IFNULL(OLD.`grant_type`,'') <> IFNULL(NEW.`grant_type`,'') OR IFNULL(OLD.`scopes`,'') <> IFNULL(NEW.`scopes`,'') OR IFNULL(OLD.`token_type`,'') <> IFNULL(NEW.`token_type`,'') OR IFNULL(OLD.`access_token`,'') <> IFNULL(NEW.`access_token`,'') OR IFNULL(OLD.`expires`,'') <> IFNULL(NEW.`expires`,'') OR IFNULL(OLD.`refresh_token`,'') <> IFNULL(NEW.`refresh_token`,'') OR IFNULL(OLD.`resource_owner_name`,'') <> IFNULL(NEW.`resource_owner_name`,'') OR IFNULL(OLD.`resource_owner`,'') <> IFNULL(NEW.`resource_owner`,'') OR IFNULL(OLD.`error`,'') <> IFNULL(NEW.`error`,'') OR IFNULL(OLD.`raw`,'') <> IFNULL(NEW.`raw`,'') OR IFNULL(OLD.`created_date`,'') <> IFNULL(NEW.`created_date`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_oauth_contact_token (`id`, `tag`, `client_id`, `contact_id`, `grant_type`, `scopes`, `token_type`, `access_token`, `expires`, `refresh_token`, `resource_owner_name`, `resource_owner`, `error`, `raw`, `created_date`, `modified_date`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`tag`, NEW.`client_id`, NEW.`contact_id`, NEW.`grant_type`, NEW.`scopes`, NEW.`token_type`, NEW.`access_token`, NEW.`expires`, NEW.`refresh_token`, NEW.`resource_owner_name`, NEW.`resource_owner`, NEW.`error`, NEW.`raw`, NEW.`created_date`, NEW.`modified_date`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_oauth_contact_token_after_delete after delete ON civicrm_oauth_contact_token FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_oauth_contact_token (`id`, `tag`, `client_id`, `contact_id`, `grant_type`, `scopes`, `token_type`, `access_token`, `expires`, `refresh_token`, `resource_owner_name`, `resource_owner`, `error`, `raw`, `created_date`, `modified_date`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`tag`, OLD.`client_id`, OLD.`contact_id`, OLD.`grant_type`, OLD.`scopes`, OLD.`token_type`, OLD.`access_token`, OLD.`expires`, OLD.`refresh_token`, OLD.`resource_owner_name`, OLD.`resource_owner`, OLD.`error`, OLD.`raw`, OLD.`created_date`, OLD.`modified_date`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_oauth_systoken_after_insert after insert ON civicrm_oauth_systoken FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_oauth_systoken (`id`, `tag`, `client_id`, `grant_type`, `scopes`, `token_type`, `access_token`, `expires`, `refresh_token`, `resource_owner_name`, `resource_owner`, `error`, `raw`, `created_date`, `modified_date`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`tag`, NEW.`client_id`, NEW.`grant_type`, NEW.`scopes`, NEW.`token_type`, NEW.`access_token`, NEW.`expires`, NEW.`refresh_token`, NEW.`resource_owner_name`, NEW.`resource_owner`, NEW.`error`, NEW.`raw`, NEW.`created_date`, NEW.`modified_date`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_oauth_systoken_after_update after update ON civicrm_oauth_systoken FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`tag`,'') <> IFNULL(NEW.`tag`,'') OR IFNULL(OLD.`client_id`,'') <> IFNULL(NEW.`client_id`,'') OR IFNULL(OLD.`grant_type`,'') <> IFNULL(NEW.`grant_type`,'') OR IFNULL(OLD.`scopes`,'') <> IFNULL(NEW.`scopes`,'') OR IFNULL(OLD.`token_type`,'') <> IFNULL(NEW.`token_type`,'') OR IFNULL(OLD.`access_token`,'') <> IFNULL(NEW.`access_token`,'') OR IFNULL(OLD.`expires`,'') <> IFNULL(NEW.`expires`,'') OR IFNULL(OLD.`refresh_token`,'') <> IFNULL(NEW.`refresh_token`,'') OR IFNULL(OLD.`resource_owner_name`,'') <> IFNULL(NEW.`resource_owner_name`,'') OR IFNULL(OLD.`resource_owner`,'') <> IFNULL(NEW.`resource_owner`,'') OR IFNULL(OLD.`error`,'') <> IFNULL(NEW.`error`,'') OR IFNULL(OLD.`raw`,'') <> IFNULL(NEW.`raw`,'') OR IFNULL(OLD.`created_date`,'') <> IFNULL(NEW.`created_date`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_oauth_systoken (`id`, `tag`, `client_id`, `grant_type`, `scopes`, `token_type`, `access_token`, `expires`, `refresh_token`, `resource_owner_name`, `resource_owner`, `error`, `raw`, `created_date`, `modified_date`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`tag`, NEW.`client_id`, NEW.`grant_type`, NEW.`scopes`, NEW.`token_type`, NEW.`access_token`, NEW.`expires`, NEW.`refresh_token`, NEW.`resource_owner_name`, NEW.`resource_owner`, NEW.`error`, NEW.`raw`, NEW.`created_date`, NEW.`modified_date`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_oauth_systoken_after_delete after delete ON civicrm_oauth_systoken FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_oauth_systoken (`id`, `tag`, `client_id`, `grant_type`, `scopes`, `token_type`, `access_token`, `expires`, `refresh_token`, `resource_owner_name`, `resource_owner`, `error`, `raw`, `created_date`, `modified_date`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`tag`, OLD.`client_id`, OLD.`grant_type`, OLD.`scopes`, OLD.`token_type`, OLD.`access_token`, OLD.`expires`, OLD.`refresh_token`, OLD.`resource_owner_name`, OLD.`resource_owner`, OLD.`error`, OLD.`raw`, OLD.`created_date`, OLD.`modified_date`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_openid_after_insert after insert ON civicrm_openid FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_openid (`id`, `contact_id`, `location_type_id`, `openid`, `allowed_to_login`, `is_primary`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`contact_id`, NEW.`location_type_id`, NEW.`openid`, NEW.`allowed_to_login`, NEW.`is_primary`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_openid_after_update after update ON civicrm_openid FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`contact_id`,'') <> IFNULL(NEW.`contact_id`,'') OR IFNULL(OLD.`location_type_id`,'') <> IFNULL(NEW.`location_type_id`,'') OR IFNULL(OLD.`openid`,'') <> IFNULL(NEW.`openid`,'') OR IFNULL(OLD.`allowed_to_login`,'') <> IFNULL(NEW.`allowed_to_login`,'') OR IFNULL(OLD.`is_primary`,'') <> IFNULL(NEW.`is_primary`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_openid (`id`, `contact_id`, `location_type_id`, `openid`, `allowed_to_login`, `is_primary`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`contact_id`, NEW.`location_type_id`, NEW.`openid`, NEW.`allowed_to_login`, NEW.`is_primary`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_openid_after_delete after delete ON civicrm_openid FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_openid (`id`, `contact_id`, `location_type_id`, `openid`, `allowed_to_login`, `is_primary`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`contact_id`, OLD.`location_type_id`, OLD.`openid`, OLD.`allowed_to_login`, OLD.`is_primary`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_option_group_after_insert after insert ON civicrm_option_group FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_option_group (`id`, `name`, `title`, `description`, `is_reserved`, `is_active`, `is_locked`, `data_type`, `option_value_fields`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`name`, NEW.`title`, NEW.`description`, NEW.`is_reserved`, NEW.`is_active`, NEW.`is_locked`, NEW.`data_type`, NEW.`option_value_fields`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_option_group_after_update after update ON civicrm_option_group FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`name`,'') <> IFNULL(NEW.`name`,'') OR IFNULL(OLD.`title`,'') <> IFNULL(NEW.`title`,'') OR IFNULL(OLD.`description`,'') <> IFNULL(NEW.`description`,'') OR IFNULL(OLD.`is_reserved`,'') <> IFNULL(NEW.`is_reserved`,'') OR IFNULL(OLD.`is_active`,'') <> IFNULL(NEW.`is_active`,'') OR IFNULL(OLD.`is_locked`,'') <> IFNULL(NEW.`is_locked`,'') OR IFNULL(OLD.`data_type`,'') <> IFNULL(NEW.`data_type`,'') OR IFNULL(OLD.`option_value_fields`,'') <> IFNULL(NEW.`option_value_fields`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_option_group (`id`, `name`, `title`, `description`, `is_reserved`, `is_active`, `is_locked`, `data_type`, `option_value_fields`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`name`, NEW.`title`, NEW.`description`, NEW.`is_reserved`, NEW.`is_active`, NEW.`is_locked`, NEW.`data_type`, NEW.`option_value_fields`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_option_group_after_delete after delete ON civicrm_option_group FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_option_group (`id`, `name`, `title`, `description`, `is_reserved`, `is_active`, `is_locked`, `data_type`, `option_value_fields`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`name`, OLD.`title`, OLD.`description`, OLD.`is_reserved`, OLD.`is_active`, OLD.`is_locked`, OLD.`data_type`, OLD.`option_value_fields`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_option_value_after_insert after insert ON civicrm_option_value FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_option_value (`id`, `option_group_id`, `label`, `value`, `name`, `grouping`, `filter`, `is_default`, `weight`, `description`, `is_optgroup`, `is_reserved`, `is_active`, `component_id`, `domain_id`, `visibility_id`, `icon`, `color`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`option_group_id`, NEW.`label`, NEW.`value`, NEW.`name`, NEW.`grouping`, NEW.`filter`, NEW.`is_default`, NEW.`weight`, NEW.`description`, NEW.`is_optgroup`, NEW.`is_reserved`, NEW.`is_active`, NEW.`component_id`, NEW.`domain_id`, NEW.`visibility_id`, NEW.`icon`, NEW.`color`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_option_value_after_update after update ON civicrm_option_value FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`option_group_id`,'') <> IFNULL(NEW.`option_group_id`,'') OR IFNULL(OLD.`label`,'') <> IFNULL(NEW.`label`,'') OR IFNULL(OLD.`value`,'') <> IFNULL(NEW.`value`,'') OR IFNULL(OLD.`name`,'') <> IFNULL(NEW.`name`,'') OR IFNULL(OLD.`grouping`,'') <> IFNULL(NEW.`grouping`,'') OR IFNULL(OLD.`filter`,'') <> IFNULL(NEW.`filter`,'') OR IFNULL(OLD.`is_default`,'') <> IFNULL(NEW.`is_default`,'') OR IFNULL(OLD.`weight`,'') <> IFNULL(NEW.`weight`,'') OR IFNULL(OLD.`description`,'') <> IFNULL(NEW.`description`,'') OR IFNULL(OLD.`is_optgroup`,'') <> IFNULL(NEW.`is_optgroup`,'') OR IFNULL(OLD.`is_reserved`,'') <> IFNULL(NEW.`is_reserved`,'') OR IFNULL(OLD.`is_active`,'') <> IFNULL(NEW.`is_active`,'') OR IFNULL(OLD.`component_id`,'') <> IFNULL(NEW.`component_id`,'') OR IFNULL(OLD.`domain_id`,'') <> IFNULL(NEW.`domain_id`,'') OR IFNULL(OLD.`visibility_id`,'') <> IFNULL(NEW.`visibility_id`,'') OR IFNULL(OLD.`icon`,'') <> IFNULL(NEW.`icon`,'') OR IFNULL(OLD.`color`,'') <> IFNULL(NEW.`color`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_option_value (`id`, `option_group_id`, `label`, `value`, `name`, `grouping`, `filter`, `is_default`, `weight`, `description`, `is_optgroup`, `is_reserved`, `is_active`, `component_id`, `domain_id`, `visibility_id`, `icon`, `color`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`option_group_id`, NEW.`label`, NEW.`value`, NEW.`name`, NEW.`grouping`, NEW.`filter`, NEW.`is_default`, NEW.`weight`, NEW.`description`, NEW.`is_optgroup`, NEW.`is_reserved`, NEW.`is_active`, NEW.`component_id`, NEW.`domain_id`, NEW.`visibility_id`, NEW.`icon`, NEW.`color`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_option_value_after_delete after delete ON civicrm_option_value FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_option_value (`id`, `option_group_id`, `label`, `value`, `name`, `grouping`, `filter`, `is_default`, `weight`, `description`, `is_optgroup`, `is_reserved`, `is_active`, `component_id`, `domain_id`, `visibility_id`, `icon`, `color`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`option_group_id`, OLD.`label`, OLD.`value`, OLD.`name`, OLD.`grouping`, OLD.`filter`, OLD.`is_default`, OLD.`weight`, OLD.`description`, OLD.`is_optgroup`, OLD.`is_reserved`, OLD.`is_active`, OLD.`component_id`, OLD.`domain_id`, OLD.`visibility_id`, OLD.`icon`, OLD.`color`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_participant_after_insert after insert ON civicrm_participant FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_participant (`id`, `contact_id`, `event_id`, `status_id`, `role_id`, `register_date`, `source`, `fee_level`, `is_test`, `is_pay_later`, `fee_amount`, `registered_by_id`, `discount_id`, `fee_currency`, `campaign_id`, `discount_amount`, `cart_id`, `must_wait`, `transferred_to_contact_id`, `created_id`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`contact_id`, NEW.`event_id`, NEW.`status_id`, NEW.`role_id`, NEW.`register_date`, NEW.`source`, NEW.`fee_level`, NEW.`is_test`, NEW.`is_pay_later`, NEW.`fee_amount`, NEW.`registered_by_id`, NEW.`discount_id`, NEW.`fee_currency`, NEW.`campaign_id`, NEW.`discount_amount`, NEW.`cart_id`, NEW.`must_wait`, NEW.`transferred_to_contact_id`, NEW.`created_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_participant_after_update after update ON civicrm_participant FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`contact_id`,'') <> IFNULL(NEW.`contact_id`,'') OR IFNULL(OLD.`event_id`,'') <> IFNULL(NEW.`event_id`,'') OR IFNULL(OLD.`status_id`,'') <> IFNULL(NEW.`status_id`,'') OR IFNULL(OLD.`role_id`,'') <> IFNULL(NEW.`role_id`,'') OR IFNULL(OLD.`register_date`,'') <> IFNULL(NEW.`register_date`,'') OR IFNULL(OLD.`source`,'') <> IFNULL(NEW.`source`,'') OR IFNULL(OLD.`fee_level`,'') <> IFNULL(NEW.`fee_level`,'') OR IFNULL(OLD.`is_test`,'') <> IFNULL(NEW.`is_test`,'') OR IFNULL(OLD.`is_pay_later`,'') <> IFNULL(NEW.`is_pay_later`,'') OR IFNULL(OLD.`fee_amount`,'') <> IFNULL(NEW.`fee_amount`,'') OR IFNULL(OLD.`registered_by_id`,'') <> IFNULL(NEW.`registered_by_id`,'') OR IFNULL(OLD.`discount_id`,'') <> IFNULL(NEW.`discount_id`,'') OR IFNULL(OLD.`fee_currency`,'') <> IFNULL(NEW.`fee_currency`,'') OR IFNULL(OLD.`campaign_id`,'') <> IFNULL(NEW.`campaign_id`,'') OR IFNULL(OLD.`discount_amount`,'') <> IFNULL(NEW.`discount_amount`,'') OR IFNULL(OLD.`cart_id`,'') <> IFNULL(NEW.`cart_id`,'') OR IFNULL(OLD.`must_wait`,'') <> IFNULL(NEW.`must_wait`,'') OR IFNULL(OLD.`transferred_to_contact_id`,'') <> IFNULL(NEW.`transferred_to_contact_id`,'') OR IFNULL(OLD.`created_id`,'') <> IFNULL(NEW.`created_id`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_participant (`id`, `contact_id`, `event_id`, `status_id`, `role_id`, `register_date`, `source`, `fee_level`, `is_test`, `is_pay_later`, `fee_amount`, `registered_by_id`, `discount_id`, `fee_currency`, `campaign_id`, `discount_amount`, `cart_id`, `must_wait`, `transferred_to_contact_id`, `created_id`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`contact_id`, NEW.`event_id`, NEW.`status_id`, NEW.`role_id`, NEW.`register_date`, NEW.`source`, NEW.`fee_level`, NEW.`is_test`, NEW.`is_pay_later`, NEW.`fee_amount`, NEW.`registered_by_id`, NEW.`discount_id`, NEW.`fee_currency`, NEW.`campaign_id`, NEW.`discount_amount`, NEW.`cart_id`, NEW.`must_wait`, NEW.`transferred_to_contact_id`, NEW.`created_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_participant_after_delete after delete ON civicrm_participant FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_participant (`id`, `contact_id`, `event_id`, `status_id`, `role_id`, `register_date`, `source`, `fee_level`, `is_test`, `is_pay_later`, `fee_amount`, `registered_by_id`, `discount_id`, `fee_currency`, `campaign_id`, `discount_amount`, `cart_id`, `must_wait`, `transferred_to_contact_id`, `created_id`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`contact_id`, OLD.`event_id`, OLD.`status_id`, OLD.`role_id`, OLD.`register_date`, OLD.`source`, OLD.`fee_level`, OLD.`is_test`, OLD.`is_pay_later`, OLD.`fee_amount`, OLD.`registered_by_id`, OLD.`discount_id`, OLD.`fee_currency`, OLD.`campaign_id`, OLD.`discount_amount`, OLD.`cart_id`, OLD.`must_wait`, OLD.`transferred_to_contact_id`, OLD.`created_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_participant_payment_after_insert after insert ON civicrm_participant_payment FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_participant_payment (`id`, `participant_id`, `contribution_id`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`participant_id`, NEW.`contribution_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_participant_payment_after_update after update ON civicrm_participant_payment FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`participant_id`,'') <> IFNULL(NEW.`participant_id`,'') OR IFNULL(OLD.`contribution_id`,'') <> IFNULL(NEW.`contribution_id`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_participant_payment (`id`, `participant_id`, `contribution_id`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`participant_id`, NEW.`contribution_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_participant_payment_after_delete after delete ON civicrm_participant_payment FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_participant_payment (`id`, `participant_id`, `contribution_id`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`participant_id`, OLD.`contribution_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_participant_status_type_after_insert after insert ON civicrm_participant_status_type FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_participant_status_type (`id`, `name`, `label`, `class`, `is_reserved`, `is_active`, `is_counted`, `weight`, `visibility_id`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`name`, NEW.`label`, NEW.`class`, NEW.`is_reserved`, NEW.`is_active`, NEW.`is_counted`, NEW.`weight`, NEW.`visibility_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_participant_status_type_after_update after update ON civicrm_participant_status_type FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`name`,'') <> IFNULL(NEW.`name`,'') OR IFNULL(OLD.`label`,'') <> IFNULL(NEW.`label`,'') OR IFNULL(OLD.`class`,'') <> IFNULL(NEW.`class`,'') OR IFNULL(OLD.`is_reserved`,'') <> IFNULL(NEW.`is_reserved`,'') OR IFNULL(OLD.`is_active`,'') <> IFNULL(NEW.`is_active`,'') OR IFNULL(OLD.`is_counted`,'') <> IFNULL(NEW.`is_counted`,'') OR IFNULL(OLD.`weight`,'') <> IFNULL(NEW.`weight`,'') OR IFNULL(OLD.`visibility_id`,'') <> IFNULL(NEW.`visibility_id`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_participant_status_type (`id`, `name`, `label`, `class`, `is_reserved`, `is_active`, `is_counted`, `weight`, `visibility_id`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`name`, NEW.`label`, NEW.`class`, NEW.`is_reserved`, NEW.`is_active`, NEW.`is_counted`, NEW.`weight`, NEW.`visibility_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_participant_status_type_after_delete after delete ON civicrm_participant_status_type FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_participant_status_type (`id`, `name`, `label`, `class`, `is_reserved`, `is_active`, `is_counted`, `weight`, `visibility_id`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`name`, OLD.`label`, OLD.`class`, OLD.`is_reserved`, OLD.`is_active`, OLD.`is_counted`, OLD.`weight`, OLD.`visibility_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_payment_processor_after_insert after insert ON civicrm_payment_processor FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_payment_processor (`id`, `domain_id`, `name`, `description`, `payment_processor_type_id`, `is_active`, `is_default`, `is_test`, `user_name`, `password`, `signature`, `url_site`, `url_api`, `url_recur`, `url_button`, `subject`, `class_name`, `billing_mode`, `is_recur`, `payment_type`, `payment_instrument_id`, `accepted_credit_cards`, `title`, `frontend_title`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`domain_id`, NEW.`name`, NEW.`description`, NEW.`payment_processor_type_id`, NEW.`is_active`, NEW.`is_default`, NEW.`is_test`, NEW.`user_name`, NEW.`password`, NEW.`signature`, NEW.`url_site`, NEW.`url_api`, NEW.`url_recur`, NEW.`url_button`, NEW.`subject`, NEW.`class_name`, NEW.`billing_mode`, NEW.`is_recur`, NEW.`payment_type`, NEW.`payment_instrument_id`, NEW.`accepted_credit_cards`, NEW.`title`, NEW.`frontend_title`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_payment_processor_after_update after update ON civicrm_payment_processor FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`domain_id`,'') <> IFNULL(NEW.`domain_id`,'') OR IFNULL(OLD.`name`,'') <> IFNULL(NEW.`name`,'') OR IFNULL(OLD.`description`,'') <> IFNULL(NEW.`description`,'') OR IFNULL(OLD.`payment_processor_type_id`,'') <> IFNULL(NEW.`payment_processor_type_id`,'') OR IFNULL(OLD.`is_active`,'') <> IFNULL(NEW.`is_active`,'') OR IFNULL(OLD.`is_default`,'') <> IFNULL(NEW.`is_default`,'') OR IFNULL(OLD.`is_test`,'') <> IFNULL(NEW.`is_test`,'') OR IFNULL(OLD.`user_name`,'') <> IFNULL(NEW.`user_name`,'') OR IFNULL(OLD.`password`,'') <> IFNULL(NEW.`password`,'') OR IFNULL(OLD.`signature`,'') <> IFNULL(NEW.`signature`,'') OR IFNULL(OLD.`url_site`,'') <> IFNULL(NEW.`url_site`,'') OR IFNULL(OLD.`url_api`,'') <> IFNULL(NEW.`url_api`,'') OR IFNULL(OLD.`url_recur`,'') <> IFNULL(NEW.`url_recur`,'') OR IFNULL(OLD.`url_button`,'') <> IFNULL(NEW.`url_button`,'') OR IFNULL(OLD.`subject`,'') <> IFNULL(NEW.`subject`,'') OR IFNULL(OLD.`class_name`,'') <> IFNULL(NEW.`class_name`,'') OR IFNULL(OLD.`billing_mode`,'') <> IFNULL(NEW.`billing_mode`,'') OR IFNULL(OLD.`is_recur`,'') <> IFNULL(NEW.`is_recur`,'') OR IFNULL(OLD.`payment_type`,'') <> IFNULL(NEW.`payment_type`,'') OR IFNULL(OLD.`payment_instrument_id`,'') <> IFNULL(NEW.`payment_instrument_id`,'') OR IFNULL(OLD.`accepted_credit_cards`,'') <> IFNULL(NEW.`accepted_credit_cards`,'') OR IFNULL(OLD.`title`,'') <> IFNULL(NEW.`title`,'') OR IFNULL(OLD.`frontend_title`,'') <> IFNULL(NEW.`frontend_title`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_payment_processor (`id`, `domain_id`, `name`, `description`, `payment_processor_type_id`, `is_active`, `is_default`, `is_test`, `user_name`, `password`, `signature`, `url_site`, `url_api`, `url_recur`, `url_button`, `subject`, `class_name`, `billing_mode`, `is_recur`, `payment_type`, `payment_instrument_id`, `accepted_credit_cards`, `title`, `frontend_title`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`domain_id`, NEW.`name`, NEW.`description`, NEW.`payment_processor_type_id`, NEW.`is_active`, NEW.`is_default`, NEW.`is_test`, NEW.`user_name`, NEW.`password`, NEW.`signature`, NEW.`url_site`, NEW.`url_api`, NEW.`url_recur`, NEW.`url_button`, NEW.`subject`, NEW.`class_name`, NEW.`billing_mode`, NEW.`is_recur`, NEW.`payment_type`, NEW.`payment_instrument_id`, NEW.`accepted_credit_cards`, NEW.`title`, NEW.`frontend_title`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_payment_processor_after_delete after delete ON civicrm_payment_processor FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_payment_processor (`id`, `domain_id`, `name`, `description`, `payment_processor_type_id`, `is_active`, `is_default`, `is_test`, `user_name`, `password`, `signature`, `url_site`, `url_api`, `url_recur`, `url_button`, `subject`, `class_name`, `billing_mode`, `is_recur`, `payment_type`, `payment_instrument_id`, `accepted_credit_cards`, `title`, `frontend_title`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`domain_id`, OLD.`name`, OLD.`description`, OLD.`payment_processor_type_id`, OLD.`is_active`, OLD.`is_default`, OLD.`is_test`, OLD.`user_name`, OLD.`password`, OLD.`signature`, OLD.`url_site`, OLD.`url_api`, OLD.`url_recur`, OLD.`url_button`, OLD.`subject`, OLD.`class_name`, OLD.`billing_mode`, OLD.`is_recur`, OLD.`payment_type`, OLD.`payment_instrument_id`, OLD.`accepted_credit_cards`, OLD.`title`, OLD.`frontend_title`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_payment_processor_type_after_insert after insert ON civicrm_payment_processor_type FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_payment_processor_type (`id`, `name`, `title`, `description`, `is_active`, `is_default`, `user_name_label`, `password_label`, `signature_label`, `subject_label`, `class_name`, `url_site_default`, `url_api_default`, `url_recur_default`, `url_button_default`, `url_site_test_default`, `url_api_test_default`, `url_recur_test_default`, `url_button_test_default`, `billing_mode`, `is_recur`, `payment_type`, `payment_instrument_id`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`name`, NEW.`title`, NEW.`description`, NEW.`is_active`, NEW.`is_default`, NEW.`user_name_label`, NEW.`password_label`, NEW.`signature_label`, NEW.`subject_label`, NEW.`class_name`, NEW.`url_site_default`, NEW.`url_api_default`, NEW.`url_recur_default`, NEW.`url_button_default`, NEW.`url_site_test_default`, NEW.`url_api_test_default`, NEW.`url_recur_test_default`, NEW.`url_button_test_default`, NEW.`billing_mode`, NEW.`is_recur`, NEW.`payment_type`, NEW.`payment_instrument_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_payment_processor_type_after_update after update ON civicrm_payment_processor_type FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`name`,'') <> IFNULL(NEW.`name`,'') OR IFNULL(OLD.`title`,'') <> IFNULL(NEW.`title`,'') OR IFNULL(OLD.`description`,'') <> IFNULL(NEW.`description`,'') OR IFNULL(OLD.`is_active`,'') <> IFNULL(NEW.`is_active`,'') OR IFNULL(OLD.`is_default`,'') <> IFNULL(NEW.`is_default`,'') OR IFNULL(OLD.`user_name_label`,'') <> IFNULL(NEW.`user_name_label`,'') OR IFNULL(OLD.`password_label`,'') <> IFNULL(NEW.`password_label`,'') OR IFNULL(OLD.`signature_label`,'') <> IFNULL(NEW.`signature_label`,'') OR IFNULL(OLD.`subject_label`,'') <> IFNULL(NEW.`subject_label`,'') OR IFNULL(OLD.`class_name`,'') <> IFNULL(NEW.`class_name`,'') OR IFNULL(OLD.`url_site_default`,'') <> IFNULL(NEW.`url_site_default`,'') OR IFNULL(OLD.`url_api_default`,'') <> IFNULL(NEW.`url_api_default`,'') OR IFNULL(OLD.`url_recur_default`,'') <> IFNULL(NEW.`url_recur_default`,'') OR IFNULL(OLD.`url_button_default`,'') <> IFNULL(NEW.`url_button_default`,'') OR IFNULL(OLD.`url_site_test_default`,'') <> IFNULL(NEW.`url_site_test_default`,'') OR IFNULL(OLD.`url_api_test_default`,'') <> IFNULL(NEW.`url_api_test_default`,'') OR IFNULL(OLD.`url_recur_test_default`,'') <> IFNULL(NEW.`url_recur_test_default`,'') OR IFNULL(OLD.`url_button_test_default`,'') <> IFNULL(NEW.`url_button_test_default`,'') OR IFNULL(OLD.`billing_mode`,'') <> IFNULL(NEW.`billing_mode`,'') OR IFNULL(OLD.`is_recur`,'') <> IFNULL(NEW.`is_recur`,'') OR IFNULL(OLD.`payment_type`,'') <> IFNULL(NEW.`payment_type`,'') OR IFNULL(OLD.`payment_instrument_id`,'') <> IFNULL(NEW.`payment_instrument_id`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_payment_processor_type (`id`, `name`, `title`, `description`, `is_active`, `is_default`, `user_name_label`, `password_label`, `signature_label`, `subject_label`, `class_name`, `url_site_default`, `url_api_default`, `url_recur_default`, `url_button_default`, `url_site_test_default`, `url_api_test_default`, `url_recur_test_default`, `url_button_test_default`, `billing_mode`, `is_recur`, `payment_type`, `payment_instrument_id`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`name`, NEW.`title`, NEW.`description`, NEW.`is_active`, NEW.`is_default`, NEW.`user_name_label`, NEW.`password_label`, NEW.`signature_label`, NEW.`subject_label`, NEW.`class_name`, NEW.`url_site_default`, NEW.`url_api_default`, NEW.`url_recur_default`, NEW.`url_button_default`, NEW.`url_site_test_default`, NEW.`url_api_test_default`, NEW.`url_recur_test_default`, NEW.`url_button_test_default`, NEW.`billing_mode`, NEW.`is_recur`, NEW.`payment_type`, NEW.`payment_instrument_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_payment_processor_type_after_delete after delete ON civicrm_payment_processor_type FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_payment_processor_type (`id`, `name`, `title`, `description`, `is_active`, `is_default`, `user_name_label`, `password_label`, `signature_label`, `subject_label`, `class_name`, `url_site_default`, `url_api_default`, `url_recur_default`, `url_button_default`, `url_site_test_default`, `url_api_test_default`, `url_recur_test_default`, `url_button_test_default`, `billing_mode`, `is_recur`, `payment_type`, `payment_instrument_id`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`name`, OLD.`title`, OLD.`description`, OLD.`is_active`, OLD.`is_default`, OLD.`user_name_label`, OLD.`password_label`, OLD.`signature_label`, OLD.`subject_label`, OLD.`class_name`, OLD.`url_site_default`, OLD.`url_api_default`, OLD.`url_recur_default`, OLD.`url_button_default`, OLD.`url_site_test_default`, OLD.`url_api_test_default`, OLD.`url_recur_test_default`, OLD.`url_button_test_default`, OLD.`billing_mode`, OLD.`is_recur`, OLD.`payment_type`, OLD.`payment_instrument_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_payment_token_after_insert after insert ON civicrm_payment_token FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_payment_token (`id`, `contact_id`, `payment_processor_id`, `token`, `created_date`, `created_id`, `expiry_date`, `email`, `billing_first_name`, `billing_middle_name`, `billing_last_name`, `masked_account_number`, `ip_address`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`contact_id`, NEW.`payment_processor_id`, NEW.`token`, NEW.`created_date`, NEW.`created_id`, NEW.`expiry_date`, NEW.`email`, NEW.`billing_first_name`, NEW.`billing_middle_name`, NEW.`billing_last_name`, NEW.`masked_account_number`, NEW.`ip_address`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_payment_token_after_update after update ON civicrm_payment_token FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`contact_id`,'') <> IFNULL(NEW.`contact_id`,'') OR IFNULL(OLD.`payment_processor_id`,'') <> IFNULL(NEW.`payment_processor_id`,'') OR IFNULL(OLD.`token`,'') <> IFNULL(NEW.`token`,'') OR IFNULL(OLD.`created_date`,'') <> IFNULL(NEW.`created_date`,'') OR IFNULL(OLD.`created_id`,'') <> IFNULL(NEW.`created_id`,'') OR IFNULL(OLD.`expiry_date`,'') <> IFNULL(NEW.`expiry_date`,'') OR IFNULL(OLD.`email`,'') <> IFNULL(NEW.`email`,'') OR IFNULL(OLD.`billing_first_name`,'') <> IFNULL(NEW.`billing_first_name`,'') OR IFNULL(OLD.`billing_middle_name`,'') <> IFNULL(NEW.`billing_middle_name`,'') OR IFNULL(OLD.`billing_last_name`,'') <> IFNULL(NEW.`billing_last_name`,'') OR IFNULL(OLD.`masked_account_number`,'') <> IFNULL(NEW.`masked_account_number`,'') OR IFNULL(OLD.`ip_address`,'') <> IFNULL(NEW.`ip_address`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_payment_token (`id`, `contact_id`, `payment_processor_id`, `token`, `created_date`, `created_id`, `expiry_date`, `email`, `billing_first_name`, `billing_middle_name`, `billing_last_name`, `masked_account_number`, `ip_address`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`contact_id`, NEW.`payment_processor_id`, NEW.`token`, NEW.`created_date`, NEW.`created_id`, NEW.`expiry_date`, NEW.`email`, NEW.`billing_first_name`, NEW.`billing_middle_name`, NEW.`billing_last_name`, NEW.`masked_account_number`, NEW.`ip_address`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_payment_token_after_delete after delete ON civicrm_payment_token FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_payment_token (`id`, `contact_id`, `payment_processor_id`, `token`, `created_date`, `created_id`, `expiry_date`, `email`, `billing_first_name`, `billing_middle_name`, `billing_last_name`, `masked_account_number`, `ip_address`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`contact_id`, OLD.`payment_processor_id`, OLD.`token`, OLD.`created_date`, OLD.`created_id`, OLD.`expiry_date`, OLD.`email`, OLD.`billing_first_name`, OLD.`billing_middle_name`, OLD.`billing_last_name`, OLD.`masked_account_number`, OLD.`ip_address`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_pcp_after_insert after insert ON civicrm_pcp FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_pcp (`id`, `contact_id`, `status_id`, `title`, `intro_text`, `page_text`, `donate_link_text`, `page_id`, `page_type`, `pcp_block_id`, `is_thermometer`, `is_honor_roll`, `goal_amount`, `is_active`, `currency`, `is_notify`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`contact_id`, NEW.`status_id`, NEW.`title`, NEW.`intro_text`, NEW.`page_text`, NEW.`donate_link_text`, NEW.`page_id`, NEW.`page_type`, NEW.`pcp_block_id`, NEW.`is_thermometer`, NEW.`is_honor_roll`, NEW.`goal_amount`, NEW.`is_active`, NEW.`currency`, NEW.`is_notify`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_pcp_after_update after update ON civicrm_pcp FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`contact_id`,'') <> IFNULL(NEW.`contact_id`,'') OR IFNULL(OLD.`status_id`,'') <> IFNULL(NEW.`status_id`,'') OR IFNULL(OLD.`title`,'') <> IFNULL(NEW.`title`,'') OR IFNULL(OLD.`intro_text`,'') <> IFNULL(NEW.`intro_text`,'') OR IFNULL(OLD.`page_text`,'') <> IFNULL(NEW.`page_text`,'') OR IFNULL(OLD.`donate_link_text`,'') <> IFNULL(NEW.`donate_link_text`,'') OR IFNULL(OLD.`page_id`,'') <> IFNULL(NEW.`page_id`,'') OR IFNULL(OLD.`page_type`,'') <> IFNULL(NEW.`page_type`,'') OR IFNULL(OLD.`pcp_block_id`,'') <> IFNULL(NEW.`pcp_block_id`,'') OR IFNULL(OLD.`is_thermometer`,'') <> IFNULL(NEW.`is_thermometer`,'') OR IFNULL(OLD.`is_honor_roll`,'') <> IFNULL(NEW.`is_honor_roll`,'') OR IFNULL(OLD.`goal_amount`,'') <> IFNULL(NEW.`goal_amount`,'') OR IFNULL(OLD.`is_active`,'') <> IFNULL(NEW.`is_active`,'') OR IFNULL(OLD.`currency`,'') <> IFNULL(NEW.`currency`,'') OR IFNULL(OLD.`is_notify`,'') <> IFNULL(NEW.`is_notify`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_pcp (`id`, `contact_id`, `status_id`, `title`, `intro_text`, `page_text`, `donate_link_text`, `page_id`, `page_type`, `pcp_block_id`, `is_thermometer`, `is_honor_roll`, `goal_amount`, `is_active`, `currency`, `is_notify`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`contact_id`, NEW.`status_id`, NEW.`title`, NEW.`intro_text`, NEW.`page_text`, NEW.`donate_link_text`, NEW.`page_id`, NEW.`page_type`, NEW.`pcp_block_id`, NEW.`is_thermometer`, NEW.`is_honor_roll`, NEW.`goal_amount`, NEW.`is_active`, NEW.`currency`, NEW.`is_notify`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_pcp_after_delete after delete ON civicrm_pcp FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_pcp (`id`, `contact_id`, `status_id`, `title`, `intro_text`, `page_text`, `donate_link_text`, `page_id`, `page_type`, `pcp_block_id`, `is_thermometer`, `is_honor_roll`, `goal_amount`, `is_active`, `currency`, `is_notify`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`contact_id`, OLD.`status_id`, OLD.`title`, OLD.`intro_text`, OLD.`page_text`, OLD.`donate_link_text`, OLD.`page_id`, OLD.`page_type`, OLD.`pcp_block_id`, OLD.`is_thermometer`, OLD.`is_honor_roll`, OLD.`goal_amount`, OLD.`is_active`, OLD.`currency`, OLD.`is_notify`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_pcp_block_after_insert after insert ON civicrm_pcp_block FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_pcp_block (`id`, `entity_table`, `entity_id`, `target_entity_type`, `target_entity_id`, `supporter_profile_id`, `is_approval_needed`, `is_tellfriend_enabled`, `tellfriend_limit`, `link_text`, `is_active`, `notify_email`, `owner_notify_id`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`entity_table`, NEW.`entity_id`, NEW.`target_entity_type`, NEW.`target_entity_id`, NEW.`supporter_profile_id`, NEW.`is_approval_needed`, NEW.`is_tellfriend_enabled`, NEW.`tellfriend_limit`, NEW.`link_text`, NEW.`is_active`, NEW.`notify_email`, NEW.`owner_notify_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_pcp_block_after_update after update ON civicrm_pcp_block FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`entity_table`,'') <> IFNULL(NEW.`entity_table`,'') OR IFNULL(OLD.`entity_id`,'') <> IFNULL(NEW.`entity_id`,'') OR IFNULL(OLD.`target_entity_type`,'') <> IFNULL(NEW.`target_entity_type`,'') OR IFNULL(OLD.`target_entity_id`,'') <> IFNULL(NEW.`target_entity_id`,'') OR IFNULL(OLD.`supporter_profile_id`,'') <> IFNULL(NEW.`supporter_profile_id`,'') OR IFNULL(OLD.`is_approval_needed`,'') <> IFNULL(NEW.`is_approval_needed`,'') OR IFNULL(OLD.`is_tellfriend_enabled`,'') <> IFNULL(NEW.`is_tellfriend_enabled`,'') OR IFNULL(OLD.`tellfriend_limit`,'') <> IFNULL(NEW.`tellfriend_limit`,'') OR IFNULL(OLD.`link_text`,'') <> IFNULL(NEW.`link_text`,'') OR IFNULL(OLD.`is_active`,'') <> IFNULL(NEW.`is_active`,'') OR IFNULL(OLD.`notify_email`,'') <> IFNULL(NEW.`notify_email`,'') OR IFNULL(OLD.`owner_notify_id`,'') <> IFNULL(NEW.`owner_notify_id`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_pcp_block (`id`, `entity_table`, `entity_id`, `target_entity_type`, `target_entity_id`, `supporter_profile_id`, `is_approval_needed`, `is_tellfriend_enabled`, `tellfriend_limit`, `link_text`, `is_active`, `notify_email`, `owner_notify_id`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`entity_table`, NEW.`entity_id`, NEW.`target_entity_type`, NEW.`target_entity_id`, NEW.`supporter_profile_id`, NEW.`is_approval_needed`, NEW.`is_tellfriend_enabled`, NEW.`tellfriend_limit`, NEW.`link_text`, NEW.`is_active`, NEW.`notify_email`, NEW.`owner_notify_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_pcp_block_after_delete after delete ON civicrm_pcp_block FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_pcp_block (`id`, `entity_table`, `entity_id`, `target_entity_type`, `target_entity_id`, `supporter_profile_id`, `is_approval_needed`, `is_tellfriend_enabled`, `tellfriend_limit`, `link_text`, `is_active`, `notify_email`, `owner_notify_id`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`entity_table`, OLD.`entity_id`, OLD.`target_entity_type`, OLD.`target_entity_id`, OLD.`supporter_profile_id`, OLD.`is_approval_needed`, OLD.`is_tellfriend_enabled`, OLD.`tellfriend_limit`, OLD.`link_text`, OLD.`is_active`, OLD.`notify_email`, OLD.`owner_notify_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_phone_after_insert after insert ON civicrm_phone FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_phone (`id`, `contact_id`, `location_type_id`, `is_primary`, `is_billing`, `mobile_provider_id`, `phone`, `phone_ext`, `phone_numeric`, `phone_type_id`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`contact_id`, NEW.`location_type_id`, NEW.`is_primary`, NEW.`is_billing`, NEW.`mobile_provider_id`, NEW.`phone`, NEW.`phone_ext`, NEW.`phone_numeric`, NEW.`phone_type_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF;
UPDATE civicrm_contact SET modified_date = CURRENT_TIMESTAMP WHERE id = NEW.contact_id; END //

CREATE TRIGGER civicrm_phone_before_insert before insert ON civicrm_phone FOR EACH ROW BEGIN  
SET NEW.phone_numeric = civicrm_strip_non_numeric(NEW.phone);
 END //

CREATE TRIGGER civicrm_phone_after_update after update ON civicrm_phone FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`contact_id`,'') <> IFNULL(NEW.`contact_id`,'') OR IFNULL(OLD.`location_type_id`,'') <> IFNULL(NEW.`location_type_id`,'') OR IFNULL(OLD.`is_primary`,'') <> IFNULL(NEW.`is_primary`,'') OR IFNULL(OLD.`is_billing`,'') <> IFNULL(NEW.`is_billing`,'') OR IFNULL(OLD.`mobile_provider_id`,'') <> IFNULL(NEW.`mobile_provider_id`,'') OR IFNULL(OLD.`phone`,'') <> IFNULL(NEW.`phone`,'') OR IFNULL(OLD.`phone_ext`,'') <> IFNULL(NEW.`phone_ext`,'') OR IFNULL(OLD.`phone_numeric`,'') <> IFNULL(NEW.`phone_numeric`,'') OR IFNULL(OLD.`phone_type_id`,'') <> IFNULL(NEW.`phone_type_id`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_phone (`id`, `contact_id`, `location_type_id`, `is_primary`, `is_billing`, `mobile_provider_id`, `phone`, `phone_ext`, `phone_numeric`, `phone_type_id`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`contact_id`, NEW.`location_type_id`, NEW.`is_primary`, NEW.`is_billing`, NEW.`mobile_provider_id`, NEW.`phone`, NEW.`phone_ext`, NEW.`phone_numeric`, NEW.`phone_type_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF;
UPDATE civicrm_contact SET modified_date = CURRENT_TIMESTAMP WHERE id = NEW.contact_id; END //

CREATE TRIGGER civicrm_phone_before_update before update ON civicrm_phone FOR EACH ROW BEGIN  
SET NEW.phone_numeric = civicrm_strip_non_numeric(NEW.phone);
 END //

CREATE TRIGGER civicrm_phone_after_delete after delete ON civicrm_phone FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_phone (`id`, `contact_id`, `location_type_id`, `is_primary`, `is_billing`, `mobile_provider_id`, `phone`, `phone_ext`, `phone_numeric`, `phone_type_id`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`contact_id`, OLD.`location_type_id`, OLD.`is_primary`, OLD.`is_billing`, OLD.`mobile_provider_id`, OLD.`phone`, OLD.`phone_ext`, OLD.`phone_numeric`, OLD.`phone_type_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF;
UPDATE civicrm_contact SET modified_date = CURRENT_TIMESTAMP WHERE id = OLD.contact_id; END //

CREATE TRIGGER civicrm_pledge_after_insert after insert ON civicrm_pledge FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_pledge (`id`, `contact_id`, `financial_type_id`, `contribution_page_id`, `amount`, `original_installment_amount`, `frequency_unit`, `frequency_interval`, `frequency_day`, `installments`, `start_date`, `create_date`, `acknowledge_date`, `modified_date`, `cancel_date`, `end_date`, `max_reminders`, `initial_reminder_day`, `additional_reminder_day`, `status_id`, `is_test`, `currency`, `campaign_id`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`contact_id`, NEW.`financial_type_id`, NEW.`contribution_page_id`, NEW.`amount`, NEW.`original_installment_amount`, NEW.`frequency_unit`, NEW.`frequency_interval`, NEW.`frequency_day`, NEW.`installments`, NEW.`start_date`, NEW.`create_date`, NEW.`acknowledge_date`, NEW.`modified_date`, NEW.`cancel_date`, NEW.`end_date`, NEW.`max_reminders`, NEW.`initial_reminder_day`, NEW.`additional_reminder_day`, NEW.`status_id`, NEW.`is_test`, NEW.`currency`, NEW.`campaign_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_pledge_after_update after update ON civicrm_pledge FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`contact_id`,'') <> IFNULL(NEW.`contact_id`,'') OR IFNULL(OLD.`financial_type_id`,'') <> IFNULL(NEW.`financial_type_id`,'') OR IFNULL(OLD.`contribution_page_id`,'') <> IFNULL(NEW.`contribution_page_id`,'') OR IFNULL(OLD.`amount`,'') <> IFNULL(NEW.`amount`,'') OR IFNULL(OLD.`original_installment_amount`,'') <> IFNULL(NEW.`original_installment_amount`,'') OR IFNULL(OLD.`frequency_unit`,'') <> IFNULL(NEW.`frequency_unit`,'') OR IFNULL(OLD.`frequency_interval`,'') <> IFNULL(NEW.`frequency_interval`,'') OR IFNULL(OLD.`frequency_day`,'') <> IFNULL(NEW.`frequency_day`,'') OR IFNULL(OLD.`installments`,'') <> IFNULL(NEW.`installments`,'') OR IFNULL(OLD.`start_date`,'') <> IFNULL(NEW.`start_date`,'') OR IFNULL(OLD.`create_date`,'') <> IFNULL(NEW.`create_date`,'') OR IFNULL(OLD.`acknowledge_date`,'') <> IFNULL(NEW.`acknowledge_date`,'') OR IFNULL(OLD.`cancel_date`,'') <> IFNULL(NEW.`cancel_date`,'') OR IFNULL(OLD.`end_date`,'') <> IFNULL(NEW.`end_date`,'') OR IFNULL(OLD.`max_reminders`,'') <> IFNULL(NEW.`max_reminders`,'') OR IFNULL(OLD.`initial_reminder_day`,'') <> IFNULL(NEW.`initial_reminder_day`,'') OR IFNULL(OLD.`additional_reminder_day`,'') <> IFNULL(NEW.`additional_reminder_day`,'') OR IFNULL(OLD.`status_id`,'') <> IFNULL(NEW.`status_id`,'') OR IFNULL(OLD.`is_test`,'') <> IFNULL(NEW.`is_test`,'') OR IFNULL(OLD.`currency`,'') <> IFNULL(NEW.`currency`,'') OR IFNULL(OLD.`campaign_id`,'') <> IFNULL(NEW.`campaign_id`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_pledge (`id`, `contact_id`, `financial_type_id`, `contribution_page_id`, `amount`, `original_installment_amount`, `frequency_unit`, `frequency_interval`, `frequency_day`, `installments`, `start_date`, `create_date`, `acknowledge_date`, `modified_date`, `cancel_date`, `end_date`, `max_reminders`, `initial_reminder_day`, `additional_reminder_day`, `status_id`, `is_test`, `currency`, `campaign_id`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`contact_id`, NEW.`financial_type_id`, NEW.`contribution_page_id`, NEW.`amount`, NEW.`original_installment_amount`, NEW.`frequency_unit`, NEW.`frequency_interval`, NEW.`frequency_day`, NEW.`installments`, NEW.`start_date`, NEW.`create_date`, NEW.`acknowledge_date`, NEW.`modified_date`, NEW.`cancel_date`, NEW.`end_date`, NEW.`max_reminders`, NEW.`initial_reminder_day`, NEW.`additional_reminder_day`, NEW.`status_id`, NEW.`is_test`, NEW.`currency`, NEW.`campaign_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_pledge_after_delete after delete ON civicrm_pledge FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_pledge (`id`, `contact_id`, `financial_type_id`, `contribution_page_id`, `amount`, `original_installment_amount`, `frequency_unit`, `frequency_interval`, `frequency_day`, `installments`, `start_date`, `create_date`, `acknowledge_date`, `modified_date`, `cancel_date`, `end_date`, `max_reminders`, `initial_reminder_day`, `additional_reminder_day`, `status_id`, `is_test`, `currency`, `campaign_id`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`contact_id`, OLD.`financial_type_id`, OLD.`contribution_page_id`, OLD.`amount`, OLD.`original_installment_amount`, OLD.`frequency_unit`, OLD.`frequency_interval`, OLD.`frequency_day`, OLD.`installments`, OLD.`start_date`, OLD.`create_date`, OLD.`acknowledge_date`, OLD.`modified_date`, OLD.`cancel_date`, OLD.`end_date`, OLD.`max_reminders`, OLD.`initial_reminder_day`, OLD.`additional_reminder_day`, OLD.`status_id`, OLD.`is_test`, OLD.`currency`, OLD.`campaign_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_pledge_block_after_insert after insert ON civicrm_pledge_block FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_pledge_block (`id`, `entity_table`, `entity_id`, `pledge_frequency_unit`, `is_pledge_interval`, `max_reminders`, `initial_reminder_day`, `additional_reminder_day`, `pledge_start_date`, `is_pledge_start_date_visible`, `is_pledge_start_date_editable`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`entity_table`, NEW.`entity_id`, NEW.`pledge_frequency_unit`, NEW.`is_pledge_interval`, NEW.`max_reminders`, NEW.`initial_reminder_day`, NEW.`additional_reminder_day`, NEW.`pledge_start_date`, NEW.`is_pledge_start_date_visible`, NEW.`is_pledge_start_date_editable`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_pledge_block_after_update after update ON civicrm_pledge_block FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`entity_table`,'') <> IFNULL(NEW.`entity_table`,'') OR IFNULL(OLD.`entity_id`,'') <> IFNULL(NEW.`entity_id`,'') OR IFNULL(OLD.`pledge_frequency_unit`,'') <> IFNULL(NEW.`pledge_frequency_unit`,'') OR IFNULL(OLD.`is_pledge_interval`,'') <> IFNULL(NEW.`is_pledge_interval`,'') OR IFNULL(OLD.`max_reminders`,'') <> IFNULL(NEW.`max_reminders`,'') OR IFNULL(OLD.`initial_reminder_day`,'') <> IFNULL(NEW.`initial_reminder_day`,'') OR IFNULL(OLD.`additional_reminder_day`,'') <> IFNULL(NEW.`additional_reminder_day`,'') OR IFNULL(OLD.`pledge_start_date`,'') <> IFNULL(NEW.`pledge_start_date`,'') OR IFNULL(OLD.`is_pledge_start_date_visible`,'') <> IFNULL(NEW.`is_pledge_start_date_visible`,'') OR IFNULL(OLD.`is_pledge_start_date_editable`,'') <> IFNULL(NEW.`is_pledge_start_date_editable`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_pledge_block (`id`, `entity_table`, `entity_id`, `pledge_frequency_unit`, `is_pledge_interval`, `max_reminders`, `initial_reminder_day`, `additional_reminder_day`, `pledge_start_date`, `is_pledge_start_date_visible`, `is_pledge_start_date_editable`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`entity_table`, NEW.`entity_id`, NEW.`pledge_frequency_unit`, NEW.`is_pledge_interval`, NEW.`max_reminders`, NEW.`initial_reminder_day`, NEW.`additional_reminder_day`, NEW.`pledge_start_date`, NEW.`is_pledge_start_date_visible`, NEW.`is_pledge_start_date_editable`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_pledge_block_after_delete after delete ON civicrm_pledge_block FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_pledge_block (`id`, `entity_table`, `entity_id`, `pledge_frequency_unit`, `is_pledge_interval`, `max_reminders`, `initial_reminder_day`, `additional_reminder_day`, `pledge_start_date`, `is_pledge_start_date_visible`, `is_pledge_start_date_editable`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`entity_table`, OLD.`entity_id`, OLD.`pledge_frequency_unit`, OLD.`is_pledge_interval`, OLD.`max_reminders`, OLD.`initial_reminder_day`, OLD.`additional_reminder_day`, OLD.`pledge_start_date`, OLD.`is_pledge_start_date_visible`, OLD.`is_pledge_start_date_editable`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_pledge_payment_after_insert after insert ON civicrm_pledge_payment FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_pledge_payment (`id`, `pledge_id`, `contribution_id`, `scheduled_amount`, `actual_amount`, `scheduled_date`, `reminder_date`, `reminder_count`, `status_id`, `currency`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`pledge_id`, NEW.`contribution_id`, NEW.`scheduled_amount`, NEW.`actual_amount`, NEW.`scheduled_date`, NEW.`reminder_date`, NEW.`reminder_count`, NEW.`status_id`, NEW.`currency`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_pledge_payment_after_update after update ON civicrm_pledge_payment FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`pledge_id`,'') <> IFNULL(NEW.`pledge_id`,'') OR IFNULL(OLD.`contribution_id`,'') <> IFNULL(NEW.`contribution_id`,'') OR IFNULL(OLD.`scheduled_amount`,'') <> IFNULL(NEW.`scheduled_amount`,'') OR IFNULL(OLD.`actual_amount`,'') <> IFNULL(NEW.`actual_amount`,'') OR IFNULL(OLD.`scheduled_date`,'') <> IFNULL(NEW.`scheduled_date`,'') OR IFNULL(OLD.`reminder_date`,'') <> IFNULL(NEW.`reminder_date`,'') OR IFNULL(OLD.`reminder_count`,'') <> IFNULL(NEW.`reminder_count`,'') OR IFNULL(OLD.`status_id`,'') <> IFNULL(NEW.`status_id`,'') OR IFNULL(OLD.`currency`,'') <> IFNULL(NEW.`currency`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_pledge_payment (`id`, `pledge_id`, `contribution_id`, `scheduled_amount`, `actual_amount`, `scheduled_date`, `reminder_date`, `reminder_count`, `status_id`, `currency`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`pledge_id`, NEW.`contribution_id`, NEW.`scheduled_amount`, NEW.`actual_amount`, NEW.`scheduled_date`, NEW.`reminder_date`, NEW.`reminder_count`, NEW.`status_id`, NEW.`currency`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_pledge_payment_after_delete after delete ON civicrm_pledge_payment FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_pledge_payment (`id`, `pledge_id`, `contribution_id`, `scheduled_amount`, `actual_amount`, `scheduled_date`, `reminder_date`, `reminder_count`, `status_id`, `currency`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`pledge_id`, OLD.`contribution_id`, OLD.`scheduled_amount`, OLD.`actual_amount`, OLD.`scheduled_date`, OLD.`reminder_date`, OLD.`reminder_count`, OLD.`status_id`, OLD.`currency`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_preferences_date_after_insert after insert ON civicrm_preferences_date FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_preferences_date (`id`, `name`, `description`, `start`, `end`, `date_format`, `time_format`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`name`, NEW.`description`, NEW.`start`, NEW.`end`, NEW.`date_format`, NEW.`time_format`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_preferences_date_after_update after update ON civicrm_preferences_date FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`name`,'') <> IFNULL(NEW.`name`,'') OR IFNULL(OLD.`description`,'') <> IFNULL(NEW.`description`,'') OR IFNULL(OLD.`start`,'') <> IFNULL(NEW.`start`,'') OR IFNULL(OLD.`end`,'') <> IFNULL(NEW.`end`,'') OR IFNULL(OLD.`date_format`,'') <> IFNULL(NEW.`date_format`,'') OR IFNULL(OLD.`time_format`,'') <> IFNULL(NEW.`time_format`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_preferences_date (`id`, `name`, `description`, `start`, `end`, `date_format`, `time_format`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`name`, NEW.`description`, NEW.`start`, NEW.`end`, NEW.`date_format`, NEW.`time_format`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_preferences_date_after_delete after delete ON civicrm_preferences_date FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_preferences_date (`id`, `name`, `description`, `start`, `end`, `date_format`, `time_format`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`name`, OLD.`description`, OLD.`start`, OLD.`end`, OLD.`date_format`, OLD.`time_format`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_premiums_after_insert after insert ON civicrm_premiums FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_premiums (`id`, `entity_table`, `entity_id`, `premiums_active`, `premiums_intro_title`, `premiums_intro_text`, `premiums_contact_email`, `premiums_contact_phone`, `premiums_display_min_contribution`, `premiums_nothankyou_position`, `premiums_nothankyou_label`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`entity_table`, NEW.`entity_id`, NEW.`premiums_active`, NEW.`premiums_intro_title`, NEW.`premiums_intro_text`, NEW.`premiums_contact_email`, NEW.`premiums_contact_phone`, NEW.`premiums_display_min_contribution`, NEW.`premiums_nothankyou_position`, NEW.`premiums_nothankyou_label`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_premiums_after_update after update ON civicrm_premiums FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`entity_table`,'') <> IFNULL(NEW.`entity_table`,'') OR IFNULL(OLD.`entity_id`,'') <> IFNULL(NEW.`entity_id`,'') OR IFNULL(OLD.`premiums_active`,'') <> IFNULL(NEW.`premiums_active`,'') OR IFNULL(OLD.`premiums_intro_title`,'') <> IFNULL(NEW.`premiums_intro_title`,'') OR IFNULL(OLD.`premiums_intro_text`,'') <> IFNULL(NEW.`premiums_intro_text`,'') OR IFNULL(OLD.`premiums_contact_email`,'') <> IFNULL(NEW.`premiums_contact_email`,'') OR IFNULL(OLD.`premiums_contact_phone`,'') <> IFNULL(NEW.`premiums_contact_phone`,'') OR IFNULL(OLD.`premiums_display_min_contribution`,'') <> IFNULL(NEW.`premiums_display_min_contribution`,'') OR IFNULL(OLD.`premiums_nothankyou_position`,'') <> IFNULL(NEW.`premiums_nothankyou_position`,'') OR IFNULL(OLD.`premiums_nothankyou_label`,'') <> IFNULL(NEW.`premiums_nothankyou_label`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_premiums (`id`, `entity_table`, `entity_id`, `premiums_active`, `premiums_intro_title`, `premiums_intro_text`, `premiums_contact_email`, `premiums_contact_phone`, `premiums_display_min_contribution`, `premiums_nothankyou_position`, `premiums_nothankyou_label`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`entity_table`, NEW.`entity_id`, NEW.`premiums_active`, NEW.`premiums_intro_title`, NEW.`premiums_intro_text`, NEW.`premiums_contact_email`, NEW.`premiums_contact_phone`, NEW.`premiums_display_min_contribution`, NEW.`premiums_nothankyou_position`, NEW.`premiums_nothankyou_label`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_premiums_after_delete after delete ON civicrm_premiums FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_premiums (`id`, `entity_table`, `entity_id`, `premiums_active`, `premiums_intro_title`, `premiums_intro_text`, `premiums_contact_email`, `premiums_contact_phone`, `premiums_display_min_contribution`, `premiums_nothankyou_position`, `premiums_nothankyou_label`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`entity_table`, OLD.`entity_id`, OLD.`premiums_active`, OLD.`premiums_intro_title`, OLD.`premiums_intro_text`, OLD.`premiums_contact_email`, OLD.`premiums_contact_phone`, OLD.`premiums_display_min_contribution`, OLD.`premiums_nothankyou_position`, OLD.`premiums_nothankyou_label`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_premiums_product_after_insert after insert ON civicrm_premiums_product FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_premiums_product (`id`, `premiums_id`, `product_id`, `weight`, `financial_type_id`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`premiums_id`, NEW.`product_id`, NEW.`weight`, NEW.`financial_type_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_premiums_product_after_update after update ON civicrm_premiums_product FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`premiums_id`,'') <> IFNULL(NEW.`premiums_id`,'') OR IFNULL(OLD.`product_id`,'') <> IFNULL(NEW.`product_id`,'') OR IFNULL(OLD.`weight`,'') <> IFNULL(NEW.`weight`,'') OR IFNULL(OLD.`financial_type_id`,'') <> IFNULL(NEW.`financial_type_id`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_premiums_product (`id`, `premiums_id`, `product_id`, `weight`, `financial_type_id`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`premiums_id`, NEW.`product_id`, NEW.`weight`, NEW.`financial_type_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_premiums_product_after_delete after delete ON civicrm_premiums_product FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_premiums_product (`id`, `premiums_id`, `product_id`, `weight`, `financial_type_id`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`premiums_id`, OLD.`product_id`, OLD.`weight`, OLD.`financial_type_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_price_field_after_insert after insert ON civicrm_price_field FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_price_field (`id`, `price_set_id`, `name`, `label`, `html_type`, `is_enter_qty`, `help_pre`, `help_post`, `weight`, `is_display_amounts`, `options_per_line`, `is_active`, `is_required`, `active_on`, `expire_on`, `javascript`, `visibility_id`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`price_set_id`, NEW.`name`, NEW.`label`, NEW.`html_type`, NEW.`is_enter_qty`, NEW.`help_pre`, NEW.`help_post`, NEW.`weight`, NEW.`is_display_amounts`, NEW.`options_per_line`, NEW.`is_active`, NEW.`is_required`, NEW.`active_on`, NEW.`expire_on`, NEW.`javascript`, NEW.`visibility_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_price_field_after_update after update ON civicrm_price_field FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`price_set_id`,'') <> IFNULL(NEW.`price_set_id`,'') OR IFNULL(OLD.`name`,'') <> IFNULL(NEW.`name`,'') OR IFNULL(OLD.`label`,'') <> IFNULL(NEW.`label`,'') OR IFNULL(OLD.`html_type`,'') <> IFNULL(NEW.`html_type`,'') OR IFNULL(OLD.`is_enter_qty`,'') <> IFNULL(NEW.`is_enter_qty`,'') OR IFNULL(OLD.`help_pre`,'') <> IFNULL(NEW.`help_pre`,'') OR IFNULL(OLD.`help_post`,'') <> IFNULL(NEW.`help_post`,'') OR IFNULL(OLD.`weight`,'') <> IFNULL(NEW.`weight`,'') OR IFNULL(OLD.`is_display_amounts`,'') <> IFNULL(NEW.`is_display_amounts`,'') OR IFNULL(OLD.`options_per_line`,'') <> IFNULL(NEW.`options_per_line`,'') OR IFNULL(OLD.`is_active`,'') <> IFNULL(NEW.`is_active`,'') OR IFNULL(OLD.`is_required`,'') <> IFNULL(NEW.`is_required`,'') OR IFNULL(OLD.`active_on`,'') <> IFNULL(NEW.`active_on`,'') OR IFNULL(OLD.`expire_on`,'') <> IFNULL(NEW.`expire_on`,'') OR IFNULL(OLD.`javascript`,'') <> IFNULL(NEW.`javascript`,'') OR IFNULL(OLD.`visibility_id`,'') <> IFNULL(NEW.`visibility_id`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_price_field (`id`, `price_set_id`, `name`, `label`, `html_type`, `is_enter_qty`, `help_pre`, `help_post`, `weight`, `is_display_amounts`, `options_per_line`, `is_active`, `is_required`, `active_on`, `expire_on`, `javascript`, `visibility_id`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`price_set_id`, NEW.`name`, NEW.`label`, NEW.`html_type`, NEW.`is_enter_qty`, NEW.`help_pre`, NEW.`help_post`, NEW.`weight`, NEW.`is_display_amounts`, NEW.`options_per_line`, NEW.`is_active`, NEW.`is_required`, NEW.`active_on`, NEW.`expire_on`, NEW.`javascript`, NEW.`visibility_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_price_field_after_delete after delete ON civicrm_price_field FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_price_field (`id`, `price_set_id`, `name`, `label`, `html_type`, `is_enter_qty`, `help_pre`, `help_post`, `weight`, `is_display_amounts`, `options_per_line`, `is_active`, `is_required`, `active_on`, `expire_on`, `javascript`, `visibility_id`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`price_set_id`, OLD.`name`, OLD.`label`, OLD.`html_type`, OLD.`is_enter_qty`, OLD.`help_pre`, OLD.`help_post`, OLD.`weight`, OLD.`is_display_amounts`, OLD.`options_per_line`, OLD.`is_active`, OLD.`is_required`, OLD.`active_on`, OLD.`expire_on`, OLD.`javascript`, OLD.`visibility_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_price_field_value_after_insert after insert ON civicrm_price_field_value FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_price_field_value (`id`, `price_field_id`, `name`, `label`, `description`, `amount`, `count`, `max_value`, `weight`, `is_default`, `is_active`, `membership_type_id`, `membership_num_terms`, `non_deductible_amount`, `financial_type_id`, `help_pre`, `help_post`, `visibility_id`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`price_field_id`, NEW.`name`, NEW.`label`, NEW.`description`, NEW.`amount`, NEW.`count`, NEW.`max_value`, NEW.`weight`, NEW.`is_default`, NEW.`is_active`, NEW.`membership_type_id`, NEW.`membership_num_terms`, NEW.`non_deductible_amount`, NEW.`financial_type_id`, NEW.`help_pre`, NEW.`help_post`, NEW.`visibility_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_price_field_value_after_update after update ON civicrm_price_field_value FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`price_field_id`,'') <> IFNULL(NEW.`price_field_id`,'') OR IFNULL(OLD.`name`,'') <> IFNULL(NEW.`name`,'') OR IFNULL(OLD.`label`,'') <> IFNULL(NEW.`label`,'') OR IFNULL(OLD.`description`,'') <> IFNULL(NEW.`description`,'') OR IFNULL(OLD.`amount`,'') <> IFNULL(NEW.`amount`,'') OR IFNULL(OLD.`count`,'') <> IFNULL(NEW.`count`,'') OR IFNULL(OLD.`max_value`,'') <> IFNULL(NEW.`max_value`,'') OR IFNULL(OLD.`weight`,'') <> IFNULL(NEW.`weight`,'') OR IFNULL(OLD.`is_default`,'') <> IFNULL(NEW.`is_default`,'') OR IFNULL(OLD.`is_active`,'') <> IFNULL(NEW.`is_active`,'') OR IFNULL(OLD.`membership_type_id`,'') <> IFNULL(NEW.`membership_type_id`,'') OR IFNULL(OLD.`membership_num_terms`,'') <> IFNULL(NEW.`membership_num_terms`,'') OR IFNULL(OLD.`non_deductible_amount`,'') <> IFNULL(NEW.`non_deductible_amount`,'') OR IFNULL(OLD.`financial_type_id`,'') <> IFNULL(NEW.`financial_type_id`,'') OR IFNULL(OLD.`help_pre`,'') <> IFNULL(NEW.`help_pre`,'') OR IFNULL(OLD.`help_post`,'') <> IFNULL(NEW.`help_post`,'') OR IFNULL(OLD.`visibility_id`,'') <> IFNULL(NEW.`visibility_id`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_price_field_value (`id`, `price_field_id`, `name`, `label`, `description`, `amount`, `count`, `max_value`, `weight`, `is_default`, `is_active`, `membership_type_id`, `membership_num_terms`, `non_deductible_amount`, `financial_type_id`, `help_pre`, `help_post`, `visibility_id`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`price_field_id`, NEW.`name`, NEW.`label`, NEW.`description`, NEW.`amount`, NEW.`count`, NEW.`max_value`, NEW.`weight`, NEW.`is_default`, NEW.`is_active`, NEW.`membership_type_id`, NEW.`membership_num_terms`, NEW.`non_deductible_amount`, NEW.`financial_type_id`, NEW.`help_pre`, NEW.`help_post`, NEW.`visibility_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_price_field_value_after_delete after delete ON civicrm_price_field_value FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_price_field_value (`id`, `price_field_id`, `name`, `label`, `description`, `amount`, `count`, `max_value`, `weight`, `is_default`, `is_active`, `membership_type_id`, `membership_num_terms`, `non_deductible_amount`, `financial_type_id`, `help_pre`, `help_post`, `visibility_id`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`price_field_id`, OLD.`name`, OLD.`label`, OLD.`description`, OLD.`amount`, OLD.`count`, OLD.`max_value`, OLD.`weight`, OLD.`is_default`, OLD.`is_active`, OLD.`membership_type_id`, OLD.`membership_num_terms`, OLD.`non_deductible_amount`, OLD.`financial_type_id`, OLD.`help_pre`, OLD.`help_post`, OLD.`visibility_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_price_set_after_insert after insert ON civicrm_price_set FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_price_set (`id`, `domain_id`, `name`, `title`, `is_active`, `help_pre`, `help_post`, `javascript`, `extends`, `financial_type_id`, `is_quick_config`, `is_reserved`, `min_amount`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`domain_id`, NEW.`name`, NEW.`title`, NEW.`is_active`, NEW.`help_pre`, NEW.`help_post`, NEW.`javascript`, NEW.`extends`, NEW.`financial_type_id`, NEW.`is_quick_config`, NEW.`is_reserved`, NEW.`min_amount`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_price_set_after_update after update ON civicrm_price_set FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`domain_id`,'') <> IFNULL(NEW.`domain_id`,'') OR IFNULL(OLD.`name`,'') <> IFNULL(NEW.`name`,'') OR IFNULL(OLD.`title`,'') <> IFNULL(NEW.`title`,'') OR IFNULL(OLD.`is_active`,'') <> IFNULL(NEW.`is_active`,'') OR IFNULL(OLD.`help_pre`,'') <> IFNULL(NEW.`help_pre`,'') OR IFNULL(OLD.`help_post`,'') <> IFNULL(NEW.`help_post`,'') OR IFNULL(OLD.`javascript`,'') <> IFNULL(NEW.`javascript`,'') OR IFNULL(OLD.`extends`,'') <> IFNULL(NEW.`extends`,'') OR IFNULL(OLD.`financial_type_id`,'') <> IFNULL(NEW.`financial_type_id`,'') OR IFNULL(OLD.`is_quick_config`,'') <> IFNULL(NEW.`is_quick_config`,'') OR IFNULL(OLD.`is_reserved`,'') <> IFNULL(NEW.`is_reserved`,'') OR IFNULL(OLD.`min_amount`,'') <> IFNULL(NEW.`min_amount`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_price_set (`id`, `domain_id`, `name`, `title`, `is_active`, `help_pre`, `help_post`, `javascript`, `extends`, `financial_type_id`, `is_quick_config`, `is_reserved`, `min_amount`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`domain_id`, NEW.`name`, NEW.`title`, NEW.`is_active`, NEW.`help_pre`, NEW.`help_post`, NEW.`javascript`, NEW.`extends`, NEW.`financial_type_id`, NEW.`is_quick_config`, NEW.`is_reserved`, NEW.`min_amount`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_price_set_after_delete after delete ON civicrm_price_set FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_price_set (`id`, `domain_id`, `name`, `title`, `is_active`, `help_pre`, `help_post`, `javascript`, `extends`, `financial_type_id`, `is_quick_config`, `is_reserved`, `min_amount`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`domain_id`, OLD.`name`, OLD.`title`, OLD.`is_active`, OLD.`help_pre`, OLD.`help_post`, OLD.`javascript`, OLD.`extends`, OLD.`financial_type_id`, OLD.`is_quick_config`, OLD.`is_reserved`, OLD.`min_amount`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_price_set_entity_after_insert after insert ON civicrm_price_set_entity FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_price_set_entity (`id`, `entity_table`, `entity_id`, `price_set_id`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`entity_table`, NEW.`entity_id`, NEW.`price_set_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_price_set_entity_after_update after update ON civicrm_price_set_entity FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`entity_table`,'') <> IFNULL(NEW.`entity_table`,'') OR IFNULL(OLD.`entity_id`,'') <> IFNULL(NEW.`entity_id`,'') OR IFNULL(OLD.`price_set_id`,'') <> IFNULL(NEW.`price_set_id`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_price_set_entity (`id`, `entity_table`, `entity_id`, `price_set_id`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`entity_table`, NEW.`entity_id`, NEW.`price_set_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_price_set_entity_after_delete after delete ON civicrm_price_set_entity FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_price_set_entity (`id`, `entity_table`, `entity_id`, `price_set_id`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`entity_table`, OLD.`entity_id`, OLD.`price_set_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_print_label_after_insert after insert ON civicrm_print_label FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_print_label (`id`, `title`, `name`, `description`, `label_format_name`, `label_type_id`, `data`, `is_default`, `is_active`, `is_reserved`, `created_id`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`title`, NEW.`name`, NEW.`description`, NEW.`label_format_name`, NEW.`label_type_id`, NEW.`data`, NEW.`is_default`, NEW.`is_active`, NEW.`is_reserved`, NEW.`created_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_print_label_after_update after update ON civicrm_print_label FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`title`,'') <> IFNULL(NEW.`title`,'') OR IFNULL(OLD.`name`,'') <> IFNULL(NEW.`name`,'') OR IFNULL(OLD.`description`,'') <> IFNULL(NEW.`description`,'') OR IFNULL(OLD.`label_format_name`,'') <> IFNULL(NEW.`label_format_name`,'') OR IFNULL(OLD.`label_type_id`,'') <> IFNULL(NEW.`label_type_id`,'') OR IFNULL(OLD.`data`,'') <> IFNULL(NEW.`data`,'') OR IFNULL(OLD.`is_default`,'') <> IFNULL(NEW.`is_default`,'') OR IFNULL(OLD.`is_active`,'') <> IFNULL(NEW.`is_active`,'') OR IFNULL(OLD.`is_reserved`,'') <> IFNULL(NEW.`is_reserved`,'') OR IFNULL(OLD.`created_id`,'') <> IFNULL(NEW.`created_id`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_print_label (`id`, `title`, `name`, `description`, `label_format_name`, `label_type_id`, `data`, `is_default`, `is_active`, `is_reserved`, `created_id`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`title`, NEW.`name`, NEW.`description`, NEW.`label_format_name`, NEW.`label_type_id`, NEW.`data`, NEW.`is_default`, NEW.`is_active`, NEW.`is_reserved`, NEW.`created_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_print_label_after_delete after delete ON civicrm_print_label FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_print_label (`id`, `title`, `name`, `description`, `label_format_name`, `label_type_id`, `data`, `is_default`, `is_active`, `is_reserved`, `created_id`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`title`, OLD.`name`, OLD.`description`, OLD.`label_format_name`, OLD.`label_type_id`, OLD.`data`, OLD.`is_default`, OLD.`is_active`, OLD.`is_reserved`, OLD.`created_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_product_after_insert after insert ON civicrm_product FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_product (`id`, `name`, `description`, `sku`, `options`, `image`, `thumbnail`, `price`, `min_contribution`, `cost`, `is_active`, `period_type`, `fixed_period_start_day`, `duration_unit`, `duration_interval`, `frequency_unit`, `frequency_interval`, `currency`, `financial_type_id`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`name`, NEW.`description`, NEW.`sku`, NEW.`options`, NEW.`image`, NEW.`thumbnail`, NEW.`price`, NEW.`min_contribution`, NEW.`cost`, NEW.`is_active`, NEW.`period_type`, NEW.`fixed_period_start_day`, NEW.`duration_unit`, NEW.`duration_interval`, NEW.`frequency_unit`, NEW.`frequency_interval`, NEW.`currency`, NEW.`financial_type_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_product_after_update after update ON civicrm_product FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`name`,'') <> IFNULL(NEW.`name`,'') OR IFNULL(OLD.`description`,'') <> IFNULL(NEW.`description`,'') OR IFNULL(OLD.`sku`,'') <> IFNULL(NEW.`sku`,'') OR IFNULL(OLD.`options`,'') <> IFNULL(NEW.`options`,'') OR IFNULL(OLD.`image`,'') <> IFNULL(NEW.`image`,'') OR IFNULL(OLD.`thumbnail`,'') <> IFNULL(NEW.`thumbnail`,'') OR IFNULL(OLD.`price`,'') <> IFNULL(NEW.`price`,'') OR IFNULL(OLD.`min_contribution`,'') <> IFNULL(NEW.`min_contribution`,'') OR IFNULL(OLD.`cost`,'') <> IFNULL(NEW.`cost`,'') OR IFNULL(OLD.`is_active`,'') <> IFNULL(NEW.`is_active`,'') OR IFNULL(OLD.`period_type`,'') <> IFNULL(NEW.`period_type`,'') OR IFNULL(OLD.`fixed_period_start_day`,'') <> IFNULL(NEW.`fixed_period_start_day`,'') OR IFNULL(OLD.`duration_unit`,'') <> IFNULL(NEW.`duration_unit`,'') OR IFNULL(OLD.`duration_interval`,'') <> IFNULL(NEW.`duration_interval`,'') OR IFNULL(OLD.`frequency_unit`,'') <> IFNULL(NEW.`frequency_unit`,'') OR IFNULL(OLD.`frequency_interval`,'') <> IFNULL(NEW.`frequency_interval`,'') OR IFNULL(OLD.`currency`,'') <> IFNULL(NEW.`currency`,'') OR IFNULL(OLD.`financial_type_id`,'') <> IFNULL(NEW.`financial_type_id`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_product (`id`, `name`, `description`, `sku`, `options`, `image`, `thumbnail`, `price`, `min_contribution`, `cost`, `is_active`, `period_type`, `fixed_period_start_day`, `duration_unit`, `duration_interval`, `frequency_unit`, `frequency_interval`, `currency`, `financial_type_id`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`name`, NEW.`description`, NEW.`sku`, NEW.`options`, NEW.`image`, NEW.`thumbnail`, NEW.`price`, NEW.`min_contribution`, NEW.`cost`, NEW.`is_active`, NEW.`period_type`, NEW.`fixed_period_start_day`, NEW.`duration_unit`, NEW.`duration_interval`, NEW.`frequency_unit`, NEW.`frequency_interval`, NEW.`currency`, NEW.`financial_type_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_product_after_delete after delete ON civicrm_product FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_product (`id`, `name`, `description`, `sku`, `options`, `image`, `thumbnail`, `price`, `min_contribution`, `cost`, `is_active`, `period_type`, `fixed_period_start_day`, `duration_unit`, `duration_interval`, `frequency_unit`, `frequency_interval`, `currency`, `financial_type_id`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`name`, OLD.`description`, OLD.`sku`, OLD.`options`, OLD.`image`, OLD.`thumbnail`, OLD.`price`, OLD.`min_contribution`, OLD.`cost`, OLD.`is_active`, OLD.`period_type`, OLD.`fixed_period_start_day`, OLD.`duration_unit`, OLD.`duration_interval`, OLD.`frequency_unit`, OLD.`frequency_interval`, OLD.`currency`, OLD.`financial_type_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_queue_after_insert after insert ON civicrm_queue FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_queue (`id`, `name`, `type`, `runner`, `batch_limit`, `lease_time`, `retry_limit`, `retry_interval`, `status`, `error`, `is_template`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`name`, NEW.`type`, NEW.`runner`, NEW.`batch_limit`, NEW.`lease_time`, NEW.`retry_limit`, NEW.`retry_interval`, NEW.`status`, NEW.`error`, NEW.`is_template`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_queue_after_update after update ON civicrm_queue FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`name`,'') <> IFNULL(NEW.`name`,'') OR IFNULL(OLD.`type`,'') <> IFNULL(NEW.`type`,'') OR IFNULL(OLD.`runner`,'') <> IFNULL(NEW.`runner`,'') OR IFNULL(OLD.`batch_limit`,'') <> IFNULL(NEW.`batch_limit`,'') OR IFNULL(OLD.`lease_time`,'') <> IFNULL(NEW.`lease_time`,'') OR IFNULL(OLD.`retry_limit`,'') <> IFNULL(NEW.`retry_limit`,'') OR IFNULL(OLD.`retry_interval`,'') <> IFNULL(NEW.`retry_interval`,'') OR IFNULL(OLD.`status`,'') <> IFNULL(NEW.`status`,'') OR IFNULL(OLD.`error`,'') <> IFNULL(NEW.`error`,'') OR IFNULL(OLD.`is_template`,'') <> IFNULL(NEW.`is_template`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_queue (`id`, `name`, `type`, `runner`, `batch_limit`, `lease_time`, `retry_limit`, `retry_interval`, `status`, `error`, `is_template`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`name`, NEW.`type`, NEW.`runner`, NEW.`batch_limit`, NEW.`lease_time`, NEW.`retry_limit`, NEW.`retry_interval`, NEW.`status`, NEW.`error`, NEW.`is_template`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_queue_after_delete after delete ON civicrm_queue FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_queue (`id`, `name`, `type`, `runner`, `batch_limit`, `lease_time`, `retry_limit`, `retry_interval`, `status`, `error`, `is_template`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`name`, OLD.`type`, OLD.`runner`, OLD.`batch_limit`, OLD.`lease_time`, OLD.`retry_limit`, OLD.`retry_interval`, OLD.`status`, OLD.`error`, OLD.`is_template`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_recurring_entity_after_insert after insert ON civicrm_recurring_entity FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_recurring_entity (`id`, `parent_id`, `entity_id`, `entity_table`, `mode`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`parent_id`, NEW.`entity_id`, NEW.`entity_table`, NEW.`mode`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_recurring_entity_after_update after update ON civicrm_recurring_entity FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`parent_id`,'') <> IFNULL(NEW.`parent_id`,'') OR IFNULL(OLD.`entity_id`,'') <> IFNULL(NEW.`entity_id`,'') OR IFNULL(OLD.`entity_table`,'') <> IFNULL(NEW.`entity_table`,'') OR IFNULL(OLD.`mode`,'') <> IFNULL(NEW.`mode`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_recurring_entity (`id`, `parent_id`, `entity_id`, `entity_table`, `mode`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`parent_id`, NEW.`entity_id`, NEW.`entity_table`, NEW.`mode`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_recurring_entity_after_delete after delete ON civicrm_recurring_entity FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_recurring_entity (`id`, `parent_id`, `entity_id`, `entity_table`, `mode`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`parent_id`, OLD.`entity_id`, OLD.`entity_table`, OLD.`mode`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_relationship_after_insert after insert ON civicrm_relationship FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_relationship (`id`, `contact_id_a`, `contact_id_b`, `relationship_type_id`, `start_date`, `end_date`, `is_active`, `description`, `is_permission_a_b`, `is_permission_b_a`, `case_id`, `created_date`, `modified_date`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`contact_id_a`, NEW.`contact_id_b`, NEW.`relationship_type_id`, NEW.`start_date`, NEW.`end_date`, NEW.`is_active`, NEW.`description`, NEW.`is_permission_a_b`, NEW.`is_permission_b_a`, NEW.`case_id`, NEW.`created_date`, NEW.`modified_date`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF;
INSERT INTO civicrm_relationship_cache (relationship_id, relationship_type_id, orientation, near_contact_id, near_relation, far_contact_id, far_relation, start_date, end_date, is_active, case_id)
SELECT rel.id, rel.relationship_type_id, "a_b", rel.contact_id_a, reltype.name_a_b, rel.contact_id_b, reltype.name_b_a, rel.start_date, rel.end_date, rel.is_active, rel.case_id
FROM civicrm_relationship rel
INNER JOIN civicrm_relationship_type reltype ON rel.relationship_type_id = reltype.id
WHERE (rel.id = NEW.id)
 ON DUPLICATE KEY UPDATE relationship_type_id = rel.relationship_type_id, near_contact_id = rel.contact_id_a, near_relation = reltype.name_a_b, far_contact_id = rel.contact_id_b, far_relation = reltype.name_b_a, start_date = rel.start_date, end_date = rel.end_date, is_active = rel.is_active, case_id = rel.case_id
;

INSERT INTO civicrm_relationship_cache (relationship_id, relationship_type_id, orientation, near_contact_id, near_relation, far_contact_id, far_relation, start_date, end_date, is_active, case_id)
SELECT rel.id, rel.relationship_type_id, "b_a", rel.contact_id_b, reltype.name_b_a, rel.contact_id_a, reltype.name_a_b, rel.start_date, rel.end_date, rel.is_active, rel.case_id
FROM civicrm_relationship rel
INNER JOIN civicrm_relationship_type reltype ON rel.relationship_type_id = reltype.id
WHERE (rel.id = NEW.id)
 ON DUPLICATE KEY UPDATE relationship_type_id = rel.relationship_type_id, near_contact_id = rel.contact_id_b, near_relation = reltype.name_b_a, far_contact_id = rel.contact_id_a, far_relation = reltype.name_a_b, start_date = rel.start_date, end_date = rel.end_date, is_active = rel.is_active, case_id = rel.case_id
;
 END //

CREATE TRIGGER civicrm_relationship_after_update after update ON civicrm_relationship FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`contact_id_a`,'') <> IFNULL(NEW.`contact_id_a`,'') OR IFNULL(OLD.`contact_id_b`,'') <> IFNULL(NEW.`contact_id_b`,'') OR IFNULL(OLD.`relationship_type_id`,'') <> IFNULL(NEW.`relationship_type_id`,'') OR IFNULL(OLD.`start_date`,'') <> IFNULL(NEW.`start_date`,'') OR IFNULL(OLD.`end_date`,'') <> IFNULL(NEW.`end_date`,'') OR IFNULL(OLD.`is_active`,'') <> IFNULL(NEW.`is_active`,'') OR IFNULL(OLD.`description`,'') <> IFNULL(NEW.`description`,'') OR IFNULL(OLD.`is_permission_a_b`,'') <> IFNULL(NEW.`is_permission_a_b`,'') OR IFNULL(OLD.`is_permission_b_a`,'') <> IFNULL(NEW.`is_permission_b_a`,'') OR IFNULL(OLD.`case_id`,'') <> IFNULL(NEW.`case_id`,'') OR IFNULL(OLD.`created_date`,'') <> IFNULL(NEW.`created_date`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_relationship (`id`, `contact_id_a`, `contact_id_b`, `relationship_type_id`, `start_date`, `end_date`, `is_active`, `description`, `is_permission_a_b`, `is_permission_b_a`, `case_id`, `created_date`, `modified_date`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`contact_id_a`, NEW.`contact_id_b`, NEW.`relationship_type_id`, NEW.`start_date`, NEW.`end_date`, NEW.`is_active`, NEW.`description`, NEW.`is_permission_a_b`, NEW.`is_permission_b_a`, NEW.`case_id`, NEW.`created_date`, NEW.`modified_date`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF;
INSERT INTO civicrm_relationship_cache (relationship_id, relationship_type_id, orientation, near_contact_id, near_relation, far_contact_id, far_relation, start_date, end_date, is_active, case_id)
SELECT rel.id, rel.relationship_type_id, "a_b", rel.contact_id_a, reltype.name_a_b, rel.contact_id_b, reltype.name_b_a, rel.start_date, rel.end_date, rel.is_active, rel.case_id
FROM civicrm_relationship rel
INNER JOIN civicrm_relationship_type reltype ON rel.relationship_type_id = reltype.id
WHERE (rel.id = NEW.id)
 ON DUPLICATE KEY UPDATE relationship_type_id = rel.relationship_type_id, near_contact_id = rel.contact_id_a, near_relation = reltype.name_a_b, far_contact_id = rel.contact_id_b, far_relation = reltype.name_b_a, start_date = rel.start_date, end_date = rel.end_date, is_active = rel.is_active, case_id = rel.case_id
;

INSERT INTO civicrm_relationship_cache (relationship_id, relationship_type_id, orientation, near_contact_id, near_relation, far_contact_id, far_relation, start_date, end_date, is_active, case_id)
SELECT rel.id, rel.relationship_type_id, "b_a", rel.contact_id_b, reltype.name_b_a, rel.contact_id_a, reltype.name_a_b, rel.start_date, rel.end_date, rel.is_active, rel.case_id
FROM civicrm_relationship rel
INNER JOIN civicrm_relationship_type reltype ON rel.relationship_type_id = reltype.id
WHERE (rel.id = NEW.id)
 ON DUPLICATE KEY UPDATE relationship_type_id = rel.relationship_type_id, near_contact_id = rel.contact_id_b, near_relation = reltype.name_b_a, far_contact_id = rel.contact_id_a, far_relation = reltype.name_a_b, start_date = rel.start_date, end_date = rel.end_date, is_active = rel.is_active, case_id = rel.case_id
;
 END //

CREATE TRIGGER civicrm_relationship_after_delete after delete ON civicrm_relationship FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_relationship (`id`, `contact_id_a`, `contact_id_b`, `relationship_type_id`, `start_date`, `end_date`, `is_active`, `description`, `is_permission_a_b`, `is_permission_b_a`, `case_id`, `created_date`, `modified_date`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`contact_id_a`, OLD.`contact_id_b`, OLD.`relationship_type_id`, OLD.`start_date`, OLD.`end_date`, OLD.`is_active`, OLD.`description`, OLD.`is_permission_a_b`, OLD.`is_permission_b_a`, OLD.`case_id`, OLD.`created_date`, OLD.`modified_date`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_relationship_donor_advised_after_insert after insert ON civicrm_relationship_donor_advised FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_relationship_donor_advised (`id`, `entity_id`, `owns_donor_advised_for`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`entity_id`, NEW.`owns_donor_advised_for`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_relationship_donor_advised_after_update after update ON civicrm_relationship_donor_advised FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`entity_id`,'') <> IFNULL(NEW.`entity_id`,'') OR IFNULL(OLD.`owns_donor_advised_for`,'') <> IFNULL(NEW.`owns_donor_advised_for`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_relationship_donor_advised (`id`, `entity_id`, `owns_donor_advised_for`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`entity_id`, NEW.`owns_donor_advised_for`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_relationship_donor_advised_after_delete after delete ON civicrm_relationship_donor_advised FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_relationship_donor_advised (`id`, `entity_id`, `owns_donor_advised_for`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`entity_id`, OLD.`owns_donor_advised_for`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_relationship_type_after_insert after insert ON civicrm_relationship_type FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_relationship_type (`id`, `name_a_b`, `label_a_b`, `name_b_a`, `label_b_a`, `description`, `contact_type_a`, `contact_type_b`, `contact_sub_type_a`, `contact_sub_type_b`, `is_reserved`, `is_active`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`name_a_b`, NEW.`label_a_b`, NEW.`name_b_a`, NEW.`label_b_a`, NEW.`description`, NEW.`contact_type_a`, NEW.`contact_type_b`, NEW.`contact_sub_type_a`, NEW.`contact_sub_type_b`, NEW.`is_reserved`, NEW.`is_active`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_relationship_type_after_update after update ON civicrm_relationship_type FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`name_a_b`,'') <> IFNULL(NEW.`name_a_b`,'') OR IFNULL(OLD.`label_a_b`,'') <> IFNULL(NEW.`label_a_b`,'') OR IFNULL(OLD.`name_b_a`,'') <> IFNULL(NEW.`name_b_a`,'') OR IFNULL(OLD.`label_b_a`,'') <> IFNULL(NEW.`label_b_a`,'') OR IFNULL(OLD.`description`,'') <> IFNULL(NEW.`description`,'') OR IFNULL(OLD.`contact_type_a`,'') <> IFNULL(NEW.`contact_type_a`,'') OR IFNULL(OLD.`contact_type_b`,'') <> IFNULL(NEW.`contact_type_b`,'') OR IFNULL(OLD.`contact_sub_type_a`,'') <> IFNULL(NEW.`contact_sub_type_a`,'') OR IFNULL(OLD.`contact_sub_type_b`,'') <> IFNULL(NEW.`contact_sub_type_b`,'') OR IFNULL(OLD.`is_reserved`,'') <> IFNULL(NEW.`is_reserved`,'') OR IFNULL(OLD.`is_active`,'') <> IFNULL(NEW.`is_active`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_relationship_type (`id`, `name_a_b`, `label_a_b`, `name_b_a`, `label_b_a`, `description`, `contact_type_a`, `contact_type_b`, `contact_sub_type_a`, `contact_sub_type_b`, `is_reserved`, `is_active`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`name_a_b`, NEW.`label_a_b`, NEW.`name_b_a`, NEW.`label_b_a`, NEW.`description`, NEW.`contact_type_a`, NEW.`contact_type_b`, NEW.`contact_sub_type_a`, NEW.`contact_sub_type_b`, NEW.`is_reserved`, NEW.`is_active`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF;

IF ((OLD.name_a_b != NEW.name_a_b COLLATE utf8mb4_bin) OR (OLD.name_b_a != NEW.name_b_a COLLATE utf8mb4_bin)) THEN
 INSERT INTO civicrm_relationship_cache (relationship_id, relationship_type_id, orientation, near_contact_id, near_relation, far_contact_id, far_relation, start_date, end_date, is_active, case_id)
SELECT rel.id, rel.relationship_type_id, "a_b", rel.contact_id_a, reltype.name_a_b, rel.contact_id_b, reltype.name_b_a, rel.start_date, rel.end_date, rel.is_active, rel.case_id
FROM civicrm_relationship rel
INNER JOIN civicrm_relationship_type reltype ON rel.relationship_type_id = reltype.id
WHERE (rel.relationship_type_id = NEW.id)
 ON DUPLICATE KEY UPDATE relationship_type_id = rel.relationship_type_id, near_contact_id = rel.contact_id_a, near_relation = reltype.name_a_b, far_contact_id = rel.contact_id_b, far_relation = reltype.name_b_a, start_date = rel.start_date, end_date = rel.end_date, is_active = rel.is_active, case_id = rel.case_id
;
 END IF;


IF ((OLD.name_a_b != NEW.name_a_b COLLATE utf8mb4_bin) OR (OLD.name_b_a != NEW.name_b_a COLLATE utf8mb4_bin)) THEN
 INSERT INTO civicrm_relationship_cache (relationship_id, relationship_type_id, orientation, near_contact_id, near_relation, far_contact_id, far_relation, start_date, end_date, is_active, case_id)
SELECT rel.id, rel.relationship_type_id, "b_a", rel.contact_id_b, reltype.name_b_a, rel.contact_id_a, reltype.name_a_b, rel.start_date, rel.end_date, rel.is_active, rel.case_id
FROM civicrm_relationship rel
INNER JOIN civicrm_relationship_type reltype ON rel.relationship_type_id = reltype.id
WHERE (rel.relationship_type_id = NEW.id)
 ON DUPLICATE KEY UPDATE relationship_type_id = rel.relationship_type_id, near_contact_id = rel.contact_id_b, near_relation = reltype.name_b_a, far_contact_id = rel.contact_id_a, far_relation = reltype.name_a_b, start_date = rel.start_date, end_date = rel.end_date, is_active = rel.is_active, case_id = rel.case_id
;
 END IF;
 END //

CREATE TRIGGER civicrm_relationship_type_after_delete after delete ON civicrm_relationship_type FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_relationship_type (`id`, `name_a_b`, `label_a_b`, `name_b_a`, `label_b_a`, `description`, `contact_type_a`, `contact_type_b`, `contact_sub_type_a`, `contact_sub_type_b`, `is_reserved`, `is_active`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`name_a_b`, OLD.`label_a_b`, OLD.`name_b_a`, OLD.`label_b_a`, OLD.`description`, OLD.`contact_type_a`, OLD.`contact_type_b`, OLD.`contact_sub_type_a`, OLD.`contact_sub_type_b`, OLD.`is_reserved`, OLD.`is_active`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_report_instance_after_insert after insert ON civicrm_report_instance FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_report_instance (`id`, `domain_id`, `title`, `report_id`, `description`, `permission`, `grouprole`, `form_values`, `is_active`, `email_subject`, `email_to`, `email_cc`, `header`, `footer`, `navigation_id`, `is_reserved`, `drilldown_id`, `name`, `args`, `created_id`, `owner_id`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`domain_id`, NEW.`title`, NEW.`report_id`, NEW.`description`, NEW.`permission`, NEW.`grouprole`, NEW.`form_values`, NEW.`is_active`, NEW.`email_subject`, NEW.`email_to`, NEW.`email_cc`, NEW.`header`, NEW.`footer`, NEW.`navigation_id`, NEW.`is_reserved`, NEW.`drilldown_id`, NEW.`name`, NEW.`args`, NEW.`created_id`, NEW.`owner_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_report_instance_after_update after update ON civicrm_report_instance FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`domain_id`,'') <> IFNULL(NEW.`domain_id`,'') OR IFNULL(OLD.`title`,'') <> IFNULL(NEW.`title`,'') OR IFNULL(OLD.`report_id`,'') <> IFNULL(NEW.`report_id`,'') OR IFNULL(OLD.`description`,'') <> IFNULL(NEW.`description`,'') OR IFNULL(OLD.`permission`,'') <> IFNULL(NEW.`permission`,'') OR IFNULL(OLD.`grouprole`,'') <> IFNULL(NEW.`grouprole`,'') OR IFNULL(OLD.`form_values`,'') <> IFNULL(NEW.`form_values`,'') OR IFNULL(OLD.`is_active`,'') <> IFNULL(NEW.`is_active`,'') OR IFNULL(OLD.`email_subject`,'') <> IFNULL(NEW.`email_subject`,'') OR IFNULL(OLD.`email_to`,'') <> IFNULL(NEW.`email_to`,'') OR IFNULL(OLD.`email_cc`,'') <> IFNULL(NEW.`email_cc`,'') OR IFNULL(OLD.`header`,'') <> IFNULL(NEW.`header`,'') OR IFNULL(OLD.`footer`,'') <> IFNULL(NEW.`footer`,'') OR IFNULL(OLD.`navigation_id`,'') <> IFNULL(NEW.`navigation_id`,'') OR IFNULL(OLD.`is_reserved`,'') <> IFNULL(NEW.`is_reserved`,'') OR IFNULL(OLD.`drilldown_id`,'') <> IFNULL(NEW.`drilldown_id`,'') OR IFNULL(OLD.`name`,'') <> IFNULL(NEW.`name`,'') OR IFNULL(OLD.`args`,'') <> IFNULL(NEW.`args`,'') OR IFNULL(OLD.`created_id`,'') <> IFNULL(NEW.`created_id`,'') OR IFNULL(OLD.`owner_id`,'') <> IFNULL(NEW.`owner_id`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_report_instance (`id`, `domain_id`, `title`, `report_id`, `description`, `permission`, `grouprole`, `form_values`, `is_active`, `email_subject`, `email_to`, `email_cc`, `header`, `footer`, `navigation_id`, `is_reserved`, `drilldown_id`, `name`, `args`, `created_id`, `owner_id`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`domain_id`, NEW.`title`, NEW.`report_id`, NEW.`description`, NEW.`permission`, NEW.`grouprole`, NEW.`form_values`, NEW.`is_active`, NEW.`email_subject`, NEW.`email_to`, NEW.`email_cc`, NEW.`header`, NEW.`footer`, NEW.`navigation_id`, NEW.`is_reserved`, NEW.`drilldown_id`, NEW.`name`, NEW.`args`, NEW.`created_id`, NEW.`owner_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_report_instance_after_delete after delete ON civicrm_report_instance FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_report_instance (`id`, `domain_id`, `title`, `report_id`, `description`, `permission`, `grouprole`, `form_values`, `is_active`, `email_subject`, `email_to`, `email_cc`, `header`, `footer`, `navigation_id`, `is_reserved`, `drilldown_id`, `name`, `args`, `created_id`, `owner_id`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`domain_id`, OLD.`title`, OLD.`report_id`, OLD.`description`, OLD.`permission`, OLD.`grouprole`, OLD.`form_values`, OLD.`is_active`, OLD.`email_subject`, OLD.`email_to`, OLD.`email_cc`, OLD.`header`, OLD.`footer`, OLD.`navigation_id`, OLD.`is_reserved`, OLD.`drilldown_id`, OLD.`name`, OLD.`args`, OLD.`created_id`, OLD.`owner_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_saved_search_after_insert after insert ON civicrm_saved_search FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_saved_search (`id`, `form_values`, `mapping_id`, `search_custom_id`, `api_entity`, `api_params`, `name`, `label`, `created_id`, `modified_id`, `expires_date`, `created_date`, `modified_date`, `description`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`form_values`, NEW.`mapping_id`, NEW.`search_custom_id`, NEW.`api_entity`, NEW.`api_params`, NEW.`name`, NEW.`label`, NEW.`created_id`, NEW.`modified_id`, NEW.`expires_date`, NEW.`created_date`, NEW.`modified_date`, NEW.`description`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_saved_search_after_update after update ON civicrm_saved_search FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`form_values`,'') <> IFNULL(NEW.`form_values`,'') OR IFNULL(OLD.`mapping_id`,'') <> IFNULL(NEW.`mapping_id`,'') OR IFNULL(OLD.`search_custom_id`,'') <> IFNULL(NEW.`search_custom_id`,'') OR IFNULL(OLD.`api_entity`,'') <> IFNULL(NEW.`api_entity`,'') OR IFNULL(OLD.`api_params`,'') <> IFNULL(NEW.`api_params`,'') OR IFNULL(OLD.`name`,'') <> IFNULL(NEW.`name`,'') OR IFNULL(OLD.`label`,'') <> IFNULL(NEW.`label`,'') OR IFNULL(OLD.`created_id`,'') <> IFNULL(NEW.`created_id`,'') OR IFNULL(OLD.`modified_id`,'') <> IFNULL(NEW.`modified_id`,'') OR IFNULL(OLD.`expires_date`,'') <> IFNULL(NEW.`expires_date`,'') OR IFNULL(OLD.`created_date`,'') <> IFNULL(NEW.`created_date`,'') OR IFNULL(OLD.`description`,'') <> IFNULL(NEW.`description`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_saved_search (`id`, `form_values`, `mapping_id`, `search_custom_id`, `api_entity`, `api_params`, `name`, `label`, `created_id`, `modified_id`, `expires_date`, `created_date`, `modified_date`, `description`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`form_values`, NEW.`mapping_id`, NEW.`search_custom_id`, NEW.`api_entity`, NEW.`api_params`, NEW.`name`, NEW.`label`, NEW.`created_id`, NEW.`modified_id`, NEW.`expires_date`, NEW.`created_date`, NEW.`modified_date`, NEW.`description`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_saved_search_after_delete after delete ON civicrm_saved_search FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_saved_search (`id`, `form_values`, `mapping_id`, `search_custom_id`, `api_entity`, `api_params`, `name`, `label`, `created_id`, `modified_id`, `expires_date`, `created_date`, `modified_date`, `description`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`form_values`, OLD.`mapping_id`, OLD.`search_custom_id`, OLD.`api_entity`, OLD.`api_params`, OLD.`name`, OLD.`label`, OLD.`created_id`, OLD.`modified_id`, OLD.`expires_date`, OLD.`created_date`, OLD.`modified_date`, OLD.`description`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_search_display_after_insert after insert ON civicrm_search_display FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_search_display (`id`, `name`, `label`, `saved_search_id`, `type`, `settings`, `acl_bypass`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`name`, NEW.`label`, NEW.`saved_search_id`, NEW.`type`, NEW.`settings`, NEW.`acl_bypass`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_search_display_after_update after update ON civicrm_search_display FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`name`,'') <> IFNULL(NEW.`name`,'') OR IFNULL(OLD.`label`,'') <> IFNULL(NEW.`label`,'') OR IFNULL(OLD.`saved_search_id`,'') <> IFNULL(NEW.`saved_search_id`,'') OR IFNULL(OLD.`type`,'') <> IFNULL(NEW.`type`,'') OR IFNULL(OLD.`settings`,'') <> IFNULL(NEW.`settings`,'') OR IFNULL(OLD.`acl_bypass`,'') <> IFNULL(NEW.`acl_bypass`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_search_display (`id`, `name`, `label`, `saved_search_id`, `type`, `settings`, `acl_bypass`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`name`, NEW.`label`, NEW.`saved_search_id`, NEW.`type`, NEW.`settings`, NEW.`acl_bypass`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_search_display_after_delete after delete ON civicrm_search_display FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_search_display (`id`, `name`, `label`, `saved_search_id`, `type`, `settings`, `acl_bypass`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`name`, OLD.`label`, OLD.`saved_search_id`, OLD.`type`, OLD.`settings`, OLD.`acl_bypass`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_search_segment_after_insert after insert ON civicrm_search_segment FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_search_segment (`id`, `name`, `label`, `description`, `entity_name`, `items`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`name`, NEW.`label`, NEW.`description`, NEW.`entity_name`, NEW.`items`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_search_segment_after_update after update ON civicrm_search_segment FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`name`,'') <> IFNULL(NEW.`name`,'') OR IFNULL(OLD.`label`,'') <> IFNULL(NEW.`label`,'') OR IFNULL(OLD.`description`,'') <> IFNULL(NEW.`description`,'') OR IFNULL(OLD.`entity_name`,'') <> IFNULL(NEW.`entity_name`,'') OR IFNULL(OLD.`items`,'') <> IFNULL(NEW.`items`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_search_segment (`id`, `name`, `label`, `description`, `entity_name`, `items`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`name`, NEW.`label`, NEW.`description`, NEW.`entity_name`, NEW.`items`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_search_segment_after_delete after delete ON civicrm_search_segment FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_search_segment (`id`, `name`, `label`, `description`, `entity_name`, `items`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`name`, OLD.`label`, OLD.`description`, OLD.`entity_name`, OLD.`items`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_setting_after_insert after insert ON civicrm_setting FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_setting (`id`, `name`, `value`, `domain_id`, `contact_id`, `is_domain`, `component_id`, `created_date`, `created_id`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`name`, NEW.`value`, NEW.`domain_id`, NEW.`contact_id`, NEW.`is_domain`, NEW.`component_id`, NEW.`created_date`, NEW.`created_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_setting_after_update after update ON civicrm_setting FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`name`,'') <> IFNULL(NEW.`name`,'') OR IFNULL(OLD.`value`,'') <> IFNULL(NEW.`value`,'') OR IFNULL(OLD.`domain_id`,'') <> IFNULL(NEW.`domain_id`,'') OR IFNULL(OLD.`contact_id`,'') <> IFNULL(NEW.`contact_id`,'') OR IFNULL(OLD.`is_domain`,'') <> IFNULL(NEW.`is_domain`,'') OR IFNULL(OLD.`component_id`,'') <> IFNULL(NEW.`component_id`,'') OR IFNULL(OLD.`created_date`,'') <> IFNULL(NEW.`created_date`,'') OR IFNULL(OLD.`created_id`,'') <> IFNULL(NEW.`created_id`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_setting (`id`, `name`, `value`, `domain_id`, `contact_id`, `is_domain`, `component_id`, `created_date`, `created_id`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`name`, NEW.`value`, NEW.`domain_id`, NEW.`contact_id`, NEW.`is_domain`, NEW.`component_id`, NEW.`created_date`, NEW.`created_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_setting_after_delete after delete ON civicrm_setting FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_setting (`id`, `name`, `value`, `domain_id`, `contact_id`, `is_domain`, `component_id`, `created_date`, `created_id`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`name`, OLD.`value`, OLD.`domain_id`, OLD.`contact_id`, OLD.`is_domain`, OLD.`component_id`, OLD.`created_date`, OLD.`created_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_site_token_after_insert after insert ON civicrm_site_token FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_site_token (`id`, `domain_id`, `name`, `label`, `body_html`, `body_text`, `is_active`, `is_reserved`, `created_id`, `modified_id`, `modified_date`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`domain_id`, NEW.`name`, NEW.`label`, NEW.`body_html`, NEW.`body_text`, NEW.`is_active`, NEW.`is_reserved`, NEW.`created_id`, NEW.`modified_id`, NEW.`modified_date`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_site_token_after_update after update ON civicrm_site_token FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`domain_id`,'') <> IFNULL(NEW.`domain_id`,'') OR IFNULL(OLD.`name`,'') <> IFNULL(NEW.`name`,'') OR IFNULL(OLD.`label`,'') <> IFNULL(NEW.`label`,'') OR IFNULL(OLD.`body_html`,'') <> IFNULL(NEW.`body_html`,'') OR IFNULL(OLD.`body_text`,'') <> IFNULL(NEW.`body_text`,'') OR IFNULL(OLD.`is_active`,'') <> IFNULL(NEW.`is_active`,'') OR IFNULL(OLD.`is_reserved`,'') <> IFNULL(NEW.`is_reserved`,'') OR IFNULL(OLD.`created_id`,'') <> IFNULL(NEW.`created_id`,'') OR IFNULL(OLD.`modified_id`,'') <> IFNULL(NEW.`modified_id`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_site_token (`id`, `domain_id`, `name`, `label`, `body_html`, `body_text`, `is_active`, `is_reserved`, `created_id`, `modified_id`, `modified_date`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`domain_id`, NEW.`name`, NEW.`label`, NEW.`body_html`, NEW.`body_text`, NEW.`is_active`, NEW.`is_reserved`, NEW.`created_id`, NEW.`modified_id`, NEW.`modified_date`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_site_token_after_delete after delete ON civicrm_site_token FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_site_token (`id`, `domain_id`, `name`, `label`, `body_html`, `body_text`, `is_active`, `is_reserved`, `created_id`, `modified_id`, `modified_date`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`domain_id`, OLD.`name`, OLD.`label`, OLD.`body_html`, OLD.`body_text`, OLD.`is_active`, OLD.`is_reserved`, OLD.`created_id`, OLD.`modified_id`, OLD.`modified_date`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_sms_provider_after_insert after insert ON civicrm_sms_provider FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_sms_provider (`id`, `name`, `title`, `username`, `password`, `api_type`, `api_url`, `api_params`, `is_default`, `is_active`, `domain_id`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`name`, NEW.`title`, NEW.`username`, NEW.`password`, NEW.`api_type`, NEW.`api_url`, NEW.`api_params`, NEW.`is_default`, NEW.`is_active`, NEW.`domain_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_sms_provider_after_update after update ON civicrm_sms_provider FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`name`,'') <> IFNULL(NEW.`name`,'') OR IFNULL(OLD.`title`,'') <> IFNULL(NEW.`title`,'') OR IFNULL(OLD.`username`,'') <> IFNULL(NEW.`username`,'') OR IFNULL(OLD.`password`,'') <> IFNULL(NEW.`password`,'') OR IFNULL(OLD.`api_type`,'') <> IFNULL(NEW.`api_type`,'') OR IFNULL(OLD.`api_url`,'') <> IFNULL(NEW.`api_url`,'') OR IFNULL(OLD.`api_params`,'') <> IFNULL(NEW.`api_params`,'') OR IFNULL(OLD.`is_default`,'') <> IFNULL(NEW.`is_default`,'') OR IFNULL(OLD.`is_active`,'') <> IFNULL(NEW.`is_active`,'') OR IFNULL(OLD.`domain_id`,'') <> IFNULL(NEW.`domain_id`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_sms_provider (`id`, `name`, `title`, `username`, `password`, `api_type`, `api_url`, `api_params`, `is_default`, `is_active`, `domain_id`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`name`, NEW.`title`, NEW.`username`, NEW.`password`, NEW.`api_type`, NEW.`api_url`, NEW.`api_params`, NEW.`is_default`, NEW.`is_active`, NEW.`domain_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_sms_provider_after_delete after delete ON civicrm_sms_provider FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_sms_provider (`id`, `name`, `title`, `username`, `password`, `api_type`, `api_url`, `api_params`, `is_default`, `is_active`, `domain_id`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`name`, OLD.`title`, OLD.`username`, OLD.`password`, OLD.`api_type`, OLD.`api_url`, OLD.`api_params`, OLD.`is_default`, OLD.`is_active`, OLD.`domain_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_state_province_after_insert after insert ON civicrm_state_province FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_state_province (`id`, `name`, `abbreviation`, `country_id`, `is_active`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`name`, NEW.`abbreviation`, NEW.`country_id`, NEW.`is_active`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_state_province_after_update after update ON civicrm_state_province FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`name`,'') <> IFNULL(NEW.`name`,'') OR IFNULL(OLD.`abbreviation`,'') <> IFNULL(NEW.`abbreviation`,'') OR IFNULL(OLD.`country_id`,'') <> IFNULL(NEW.`country_id`,'') OR IFNULL(OLD.`is_active`,'') <> IFNULL(NEW.`is_active`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_state_province (`id`, `name`, `abbreviation`, `country_id`, `is_active`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`name`, NEW.`abbreviation`, NEW.`country_id`, NEW.`is_active`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_state_province_after_delete after delete ON civicrm_state_province FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_state_province (`id`, `name`, `abbreviation`, `country_id`, `is_active`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`name`, OLD.`abbreviation`, OLD.`country_id`, OLD.`is_active`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_status_pref_after_insert after insert ON civicrm_status_pref FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_status_pref (`id`, `domain_id`, `name`, `hush_until`, `ignore_severity`, `prefs`, `check_info`, `is_active`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`domain_id`, NEW.`name`, NEW.`hush_until`, NEW.`ignore_severity`, NEW.`prefs`, NEW.`check_info`, NEW.`is_active`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_status_pref_after_update after update ON civicrm_status_pref FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`domain_id`,'') <> IFNULL(NEW.`domain_id`,'') OR IFNULL(OLD.`name`,'') <> IFNULL(NEW.`name`,'') OR IFNULL(OLD.`hush_until`,'') <> IFNULL(NEW.`hush_until`,'') OR IFNULL(OLD.`ignore_severity`,'') <> IFNULL(NEW.`ignore_severity`,'') OR IFNULL(OLD.`prefs`,'') <> IFNULL(NEW.`prefs`,'') OR IFNULL(OLD.`check_info`,'') <> IFNULL(NEW.`check_info`,'') OR IFNULL(OLD.`is_active`,'') <> IFNULL(NEW.`is_active`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_status_pref (`id`, `domain_id`, `name`, `hush_until`, `ignore_severity`, `prefs`, `check_info`, `is_active`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`domain_id`, NEW.`name`, NEW.`hush_until`, NEW.`ignore_severity`, NEW.`prefs`, NEW.`check_info`, NEW.`is_active`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_status_pref_after_delete after delete ON civicrm_status_pref FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_status_pref (`id`, `domain_id`, `name`, `hush_until`, `ignore_severity`, `prefs`, `check_info`, `is_active`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`domain_id`, OLD.`name`, OLD.`hush_until`, OLD.`ignore_severity`, OLD.`prefs`, OLD.`check_info`, OLD.`is_active`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_survey_after_insert after insert ON civicrm_survey FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_survey (`id`, `title`, `campaign_id`, `activity_type_id`, `instructions`, `release_frequency`, `max_number_of_contacts`, `default_number_of_contacts`, `is_active`, `is_default`, `created_id`, `created_date`, `last_modified_id`, `last_modified_date`, `result_id`, `thankyou_title`, `thankyou_text`, `bypass_confirm`, `is_share`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`title`, NEW.`campaign_id`, NEW.`activity_type_id`, NEW.`instructions`, NEW.`release_frequency`, NEW.`max_number_of_contacts`, NEW.`default_number_of_contacts`, NEW.`is_active`, NEW.`is_default`, NEW.`created_id`, NEW.`created_date`, NEW.`last_modified_id`, NEW.`last_modified_date`, NEW.`result_id`, NEW.`thankyou_title`, NEW.`thankyou_text`, NEW.`bypass_confirm`, NEW.`is_share`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_survey_after_update after update ON civicrm_survey FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`title`,'') <> IFNULL(NEW.`title`,'') OR IFNULL(OLD.`campaign_id`,'') <> IFNULL(NEW.`campaign_id`,'') OR IFNULL(OLD.`activity_type_id`,'') <> IFNULL(NEW.`activity_type_id`,'') OR IFNULL(OLD.`instructions`,'') <> IFNULL(NEW.`instructions`,'') OR IFNULL(OLD.`release_frequency`,'') <> IFNULL(NEW.`release_frequency`,'') OR IFNULL(OLD.`max_number_of_contacts`,'') <> IFNULL(NEW.`max_number_of_contacts`,'') OR IFNULL(OLD.`default_number_of_contacts`,'') <> IFNULL(NEW.`default_number_of_contacts`,'') OR IFNULL(OLD.`is_active`,'') <> IFNULL(NEW.`is_active`,'') OR IFNULL(OLD.`is_default`,'') <> IFNULL(NEW.`is_default`,'') OR IFNULL(OLD.`created_id`,'') <> IFNULL(NEW.`created_id`,'') OR IFNULL(OLD.`created_date`,'') <> IFNULL(NEW.`created_date`,'') OR IFNULL(OLD.`last_modified_id`,'') <> IFNULL(NEW.`last_modified_id`,'') OR IFNULL(OLD.`last_modified_date`,'') <> IFNULL(NEW.`last_modified_date`,'') OR IFNULL(OLD.`result_id`,'') <> IFNULL(NEW.`result_id`,'') OR IFNULL(OLD.`thankyou_title`,'') <> IFNULL(NEW.`thankyou_title`,'') OR IFNULL(OLD.`thankyou_text`,'') <> IFNULL(NEW.`thankyou_text`,'') OR IFNULL(OLD.`bypass_confirm`,'') <> IFNULL(NEW.`bypass_confirm`,'') OR IFNULL(OLD.`is_share`,'') <> IFNULL(NEW.`is_share`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_survey (`id`, `title`, `campaign_id`, `activity_type_id`, `instructions`, `release_frequency`, `max_number_of_contacts`, `default_number_of_contacts`, `is_active`, `is_default`, `created_id`, `created_date`, `last_modified_id`, `last_modified_date`, `result_id`, `thankyou_title`, `thankyou_text`, `bypass_confirm`, `is_share`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`title`, NEW.`campaign_id`, NEW.`activity_type_id`, NEW.`instructions`, NEW.`release_frequency`, NEW.`max_number_of_contacts`, NEW.`default_number_of_contacts`, NEW.`is_active`, NEW.`is_default`, NEW.`created_id`, NEW.`created_date`, NEW.`last_modified_id`, NEW.`last_modified_date`, NEW.`result_id`, NEW.`thankyou_title`, NEW.`thankyou_text`, NEW.`bypass_confirm`, NEW.`is_share`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_survey_after_delete after delete ON civicrm_survey FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_survey (`id`, `title`, `campaign_id`, `activity_type_id`, `instructions`, `release_frequency`, `max_number_of_contacts`, `default_number_of_contacts`, `is_active`, `is_default`, `created_id`, `created_date`, `last_modified_id`, `last_modified_date`, `result_id`, `thankyou_title`, `thankyou_text`, `bypass_confirm`, `is_share`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`title`, OLD.`campaign_id`, OLD.`activity_type_id`, OLD.`instructions`, OLD.`release_frequency`, OLD.`max_number_of_contacts`, OLD.`default_number_of_contacts`, OLD.`is_active`, OLD.`is_default`, OLD.`created_id`, OLD.`created_date`, OLD.`last_modified_id`, OLD.`last_modified_date`, OLD.`result_id`, OLD.`thankyou_title`, OLD.`thankyou_text`, OLD.`bypass_confirm`, OLD.`is_share`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_tag_after_insert after insert ON civicrm_tag FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_tag (`id`, `name`, `label`, `description`, `parent_id`, `is_selectable`, `is_reserved`, `is_tagset`, `used_for`, `created_date`, `created_id`, `color`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`name`, NEW.`label`, NEW.`description`, NEW.`parent_id`, NEW.`is_selectable`, NEW.`is_reserved`, NEW.`is_tagset`, NEW.`used_for`, NEW.`created_date`, NEW.`created_id`, NEW.`color`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_tag_after_update after update ON civicrm_tag FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`name`,'') <> IFNULL(NEW.`name`,'') OR IFNULL(OLD.`label`,'') <> IFNULL(NEW.`label`,'') OR IFNULL(OLD.`description`,'') <> IFNULL(NEW.`description`,'') OR IFNULL(OLD.`parent_id`,'') <> IFNULL(NEW.`parent_id`,'') OR IFNULL(OLD.`is_selectable`,'') <> IFNULL(NEW.`is_selectable`,'') OR IFNULL(OLD.`is_reserved`,'') <> IFNULL(NEW.`is_reserved`,'') OR IFNULL(OLD.`is_tagset`,'') <> IFNULL(NEW.`is_tagset`,'') OR IFNULL(OLD.`used_for`,'') <> IFNULL(NEW.`used_for`,'') OR IFNULL(OLD.`created_date`,'') <> IFNULL(NEW.`created_date`,'') OR IFNULL(OLD.`created_id`,'') <> IFNULL(NEW.`created_id`,'') OR IFNULL(OLD.`color`,'') <> IFNULL(NEW.`color`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_tag (`id`, `name`, `label`, `description`, `parent_id`, `is_selectable`, `is_reserved`, `is_tagset`, `used_for`, `created_date`, `created_id`, `color`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`name`, NEW.`label`, NEW.`description`, NEW.`parent_id`, NEW.`is_selectable`, NEW.`is_reserved`, NEW.`is_tagset`, NEW.`used_for`, NEW.`created_date`, NEW.`created_id`, NEW.`color`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_tag_after_delete after delete ON civicrm_tag FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_tag (`id`, `name`, `label`, `description`, `parent_id`, `is_selectable`, `is_reserved`, `is_tagset`, `used_for`, `created_date`, `created_id`, `color`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`name`, OLD.`label`, OLD.`description`, OLD.`parent_id`, OLD.`is_selectable`, OLD.`is_reserved`, OLD.`is_tagset`, OLD.`used_for`, OLD.`created_date`, OLD.`created_id`, OLD.`color`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_tell_friend_after_insert after insert ON civicrm_tell_friend FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_tell_friend (`id`, `entity_table`, `entity_id`, `title`, `intro`, `suggested_message`, `general_link`, `thankyou_title`, `thankyou_text`, `is_active`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`entity_table`, NEW.`entity_id`, NEW.`title`, NEW.`intro`, NEW.`suggested_message`, NEW.`general_link`, NEW.`thankyou_title`, NEW.`thankyou_text`, NEW.`is_active`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_tell_friend_after_update after update ON civicrm_tell_friend FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`entity_table`,'') <> IFNULL(NEW.`entity_table`,'') OR IFNULL(OLD.`entity_id`,'') <> IFNULL(NEW.`entity_id`,'') OR IFNULL(OLD.`title`,'') <> IFNULL(NEW.`title`,'') OR IFNULL(OLD.`intro`,'') <> IFNULL(NEW.`intro`,'') OR IFNULL(OLD.`suggested_message`,'') <> IFNULL(NEW.`suggested_message`,'') OR IFNULL(OLD.`general_link`,'') <> IFNULL(NEW.`general_link`,'') OR IFNULL(OLD.`thankyou_title`,'') <> IFNULL(NEW.`thankyou_title`,'') OR IFNULL(OLD.`thankyou_text`,'') <> IFNULL(NEW.`thankyou_text`,'') OR IFNULL(OLD.`is_active`,'') <> IFNULL(NEW.`is_active`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_tell_friend (`id`, `entity_table`, `entity_id`, `title`, `intro`, `suggested_message`, `general_link`, `thankyou_title`, `thankyou_text`, `is_active`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`entity_table`, NEW.`entity_id`, NEW.`title`, NEW.`intro`, NEW.`suggested_message`, NEW.`general_link`, NEW.`thankyou_title`, NEW.`thankyou_text`, NEW.`is_active`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_tell_friend_after_delete after delete ON civicrm_tell_friend FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_tell_friend (`id`, `entity_table`, `entity_id`, `title`, `intro`, `suggested_message`, `general_link`, `thankyou_title`, `thankyou_text`, `is_active`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`entity_table`, OLD.`entity_id`, OLD.`title`, OLD.`intro`, OLD.`suggested_message`, OLD.`general_link`, OLD.`thankyou_title`, OLD.`thankyou_text`, OLD.`is_active`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_timezone_after_insert after insert ON civicrm_timezone FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_timezone (`id`, `name`, `abbreviation`, `gmt`, `offset`, `country_id`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`name`, NEW.`abbreviation`, NEW.`gmt`, NEW.`offset`, NEW.`country_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_timezone_after_update after update ON civicrm_timezone FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`name`,'') <> IFNULL(NEW.`name`,'') OR IFNULL(OLD.`abbreviation`,'') <> IFNULL(NEW.`abbreviation`,'') OR IFNULL(OLD.`gmt`,'') <> IFNULL(NEW.`gmt`,'') OR IFNULL(OLD.`offset`,'') <> IFNULL(NEW.`offset`,'') OR IFNULL(OLD.`country_id`,'') <> IFNULL(NEW.`country_id`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_timezone (`id`, `name`, `abbreviation`, `gmt`, `offset`, `country_id`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`name`, NEW.`abbreviation`, NEW.`gmt`, NEW.`offset`, NEW.`country_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_timezone_after_delete after delete ON civicrm_timezone FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_timezone (`id`, `name`, `abbreviation`, `gmt`, `offset`, `country_id`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`name`, OLD.`abbreviation`, OLD.`gmt`, OLD.`offset`, OLD.`country_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_translation_after_insert after insert ON civicrm_translation FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_translation (`id`, `entity_table`, `entity_field`, `entity_id`, `language`, `status_id`, `string`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`entity_table`, NEW.`entity_field`, NEW.`entity_id`, NEW.`language`, NEW.`status_id`, NEW.`string`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_translation_after_update after update ON civicrm_translation FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`entity_table`,'') <> IFNULL(NEW.`entity_table`,'') OR IFNULL(OLD.`entity_field`,'') <> IFNULL(NEW.`entity_field`,'') OR IFNULL(OLD.`entity_id`,'') <> IFNULL(NEW.`entity_id`,'') OR IFNULL(OLD.`language`,'') <> IFNULL(NEW.`language`,'') OR IFNULL(OLD.`status_id`,'') <> IFNULL(NEW.`status_id`,'') OR IFNULL(OLD.`string`,'') <> IFNULL(NEW.`string`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_translation (`id`, `entity_table`, `entity_field`, `entity_id`, `language`, `status_id`, `string`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`entity_table`, NEW.`entity_field`, NEW.`entity_id`, NEW.`language`, NEW.`status_id`, NEW.`string`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_translation_after_delete after delete ON civicrm_translation FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_translation (`id`, `entity_table`, `entity_field`, `entity_id`, `language`, `status_id`, `string`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`entity_table`, OLD.`entity_field`, OLD.`entity_id`, OLD.`language`, OLD.`status_id`, OLD.`string`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_uf_field_after_insert after insert ON civicrm_uf_field FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_uf_field (`id`, `uf_group_id`, `field_name`, `is_active`, `is_view`, `is_required`, `weight`, `help_post`, `visibility`, `in_selector`, `is_searchable`, `location_type_id`, `phone_type_id`, `website_type_id`, `label`, `field_type`, `is_reserved`, `help_pre`, `is_multi_summary`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`uf_group_id`, NEW.`field_name`, NEW.`is_active`, NEW.`is_view`, NEW.`is_required`, NEW.`weight`, NEW.`help_post`, NEW.`visibility`, NEW.`in_selector`, NEW.`is_searchable`, NEW.`location_type_id`, NEW.`phone_type_id`, NEW.`website_type_id`, NEW.`label`, NEW.`field_type`, NEW.`is_reserved`, NEW.`help_pre`, NEW.`is_multi_summary`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_uf_field_after_update after update ON civicrm_uf_field FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`uf_group_id`,'') <> IFNULL(NEW.`uf_group_id`,'') OR IFNULL(OLD.`field_name`,'') <> IFNULL(NEW.`field_name`,'') OR IFNULL(OLD.`is_active`,'') <> IFNULL(NEW.`is_active`,'') OR IFNULL(OLD.`is_view`,'') <> IFNULL(NEW.`is_view`,'') OR IFNULL(OLD.`is_required`,'') <> IFNULL(NEW.`is_required`,'') OR IFNULL(OLD.`weight`,'') <> IFNULL(NEW.`weight`,'') OR IFNULL(OLD.`help_post`,'') <> IFNULL(NEW.`help_post`,'') OR IFNULL(OLD.`visibility`,'') <> IFNULL(NEW.`visibility`,'') OR IFNULL(OLD.`in_selector`,'') <> IFNULL(NEW.`in_selector`,'') OR IFNULL(OLD.`is_searchable`,'') <> IFNULL(NEW.`is_searchable`,'') OR IFNULL(OLD.`location_type_id`,'') <> IFNULL(NEW.`location_type_id`,'') OR IFNULL(OLD.`phone_type_id`,'') <> IFNULL(NEW.`phone_type_id`,'') OR IFNULL(OLD.`website_type_id`,'') <> IFNULL(NEW.`website_type_id`,'') OR IFNULL(OLD.`label`,'') <> IFNULL(NEW.`label`,'') OR IFNULL(OLD.`field_type`,'') <> IFNULL(NEW.`field_type`,'') OR IFNULL(OLD.`is_reserved`,'') <> IFNULL(NEW.`is_reserved`,'') OR IFNULL(OLD.`help_pre`,'') <> IFNULL(NEW.`help_pre`,'') OR IFNULL(OLD.`is_multi_summary`,'') <> IFNULL(NEW.`is_multi_summary`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_uf_field (`id`, `uf_group_id`, `field_name`, `is_active`, `is_view`, `is_required`, `weight`, `help_post`, `visibility`, `in_selector`, `is_searchable`, `location_type_id`, `phone_type_id`, `website_type_id`, `label`, `field_type`, `is_reserved`, `help_pre`, `is_multi_summary`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`uf_group_id`, NEW.`field_name`, NEW.`is_active`, NEW.`is_view`, NEW.`is_required`, NEW.`weight`, NEW.`help_post`, NEW.`visibility`, NEW.`in_selector`, NEW.`is_searchable`, NEW.`location_type_id`, NEW.`phone_type_id`, NEW.`website_type_id`, NEW.`label`, NEW.`field_type`, NEW.`is_reserved`, NEW.`help_pre`, NEW.`is_multi_summary`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_uf_field_after_delete after delete ON civicrm_uf_field FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_uf_field (`id`, `uf_group_id`, `field_name`, `is_active`, `is_view`, `is_required`, `weight`, `help_post`, `visibility`, `in_selector`, `is_searchable`, `location_type_id`, `phone_type_id`, `website_type_id`, `label`, `field_type`, `is_reserved`, `help_pre`, `is_multi_summary`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`uf_group_id`, OLD.`field_name`, OLD.`is_active`, OLD.`is_view`, OLD.`is_required`, OLD.`weight`, OLD.`help_post`, OLD.`visibility`, OLD.`in_selector`, OLD.`is_searchable`, OLD.`location_type_id`, OLD.`phone_type_id`, OLD.`website_type_id`, OLD.`label`, OLD.`field_type`, OLD.`is_reserved`, OLD.`help_pre`, OLD.`is_multi_summary`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_uf_group_after_insert after insert ON civicrm_uf_group FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_uf_group (`id`, `is_active`, `group_type`, `title`, `description`, `help_pre`, `help_post`, `limit_listings_group_id`, `post_url`, `add_to_group_id`, `add_captcha`, `is_map`, `is_edit_link`, `is_uf_link`, `is_update_dupe`, `cancel_url`, `is_cms_user`, `notify`, `is_reserved`, `name`, `created_id`, `created_date`, `is_proximity_search`, `cancel_button_text`, `submit_button_text`, `frontend_title`, `add_cancel_button`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`is_active`, NEW.`group_type`, NEW.`title`, NEW.`description`, NEW.`help_pre`, NEW.`help_post`, NEW.`limit_listings_group_id`, NEW.`post_url`, NEW.`add_to_group_id`, NEW.`add_captcha`, NEW.`is_map`, NEW.`is_edit_link`, NEW.`is_uf_link`, NEW.`is_update_dupe`, NEW.`cancel_url`, NEW.`is_cms_user`, NEW.`notify`, NEW.`is_reserved`, NEW.`name`, NEW.`created_id`, NEW.`created_date`, NEW.`is_proximity_search`, NEW.`cancel_button_text`, NEW.`submit_button_text`, NEW.`frontend_title`, NEW.`add_cancel_button`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_uf_group_after_update after update ON civicrm_uf_group FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`is_active`,'') <> IFNULL(NEW.`is_active`,'') OR IFNULL(OLD.`group_type`,'') <> IFNULL(NEW.`group_type`,'') OR IFNULL(OLD.`title`,'') <> IFNULL(NEW.`title`,'') OR IFNULL(OLD.`description`,'') <> IFNULL(NEW.`description`,'') OR IFNULL(OLD.`help_pre`,'') <> IFNULL(NEW.`help_pre`,'') OR IFNULL(OLD.`help_post`,'') <> IFNULL(NEW.`help_post`,'') OR IFNULL(OLD.`limit_listings_group_id`,'') <> IFNULL(NEW.`limit_listings_group_id`,'') OR IFNULL(OLD.`post_url`,'') <> IFNULL(NEW.`post_url`,'') OR IFNULL(OLD.`add_to_group_id`,'') <> IFNULL(NEW.`add_to_group_id`,'') OR IFNULL(OLD.`add_captcha`,'') <> IFNULL(NEW.`add_captcha`,'') OR IFNULL(OLD.`is_map`,'') <> IFNULL(NEW.`is_map`,'') OR IFNULL(OLD.`is_edit_link`,'') <> IFNULL(NEW.`is_edit_link`,'') OR IFNULL(OLD.`is_uf_link`,'') <> IFNULL(NEW.`is_uf_link`,'') OR IFNULL(OLD.`is_update_dupe`,'') <> IFNULL(NEW.`is_update_dupe`,'') OR IFNULL(OLD.`cancel_url`,'') <> IFNULL(NEW.`cancel_url`,'') OR IFNULL(OLD.`is_cms_user`,'') <> IFNULL(NEW.`is_cms_user`,'') OR IFNULL(OLD.`notify`,'') <> IFNULL(NEW.`notify`,'') OR IFNULL(OLD.`is_reserved`,'') <> IFNULL(NEW.`is_reserved`,'') OR IFNULL(OLD.`name`,'') <> IFNULL(NEW.`name`,'') OR IFNULL(OLD.`created_id`,'') <> IFNULL(NEW.`created_id`,'') OR IFNULL(OLD.`created_date`,'') <> IFNULL(NEW.`created_date`,'') OR IFNULL(OLD.`is_proximity_search`,'') <> IFNULL(NEW.`is_proximity_search`,'') OR IFNULL(OLD.`cancel_button_text`,'') <> IFNULL(NEW.`cancel_button_text`,'') OR IFNULL(OLD.`submit_button_text`,'') <> IFNULL(NEW.`submit_button_text`,'') OR IFNULL(OLD.`frontend_title`,'') <> IFNULL(NEW.`frontend_title`,'') OR IFNULL(OLD.`add_cancel_button`,'') <> IFNULL(NEW.`add_cancel_button`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_uf_group (`id`, `is_active`, `group_type`, `title`, `description`, `help_pre`, `help_post`, `limit_listings_group_id`, `post_url`, `add_to_group_id`, `add_captcha`, `is_map`, `is_edit_link`, `is_uf_link`, `is_update_dupe`, `cancel_url`, `is_cms_user`, `notify`, `is_reserved`, `name`, `created_id`, `created_date`, `is_proximity_search`, `cancel_button_text`, `submit_button_text`, `frontend_title`, `add_cancel_button`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`is_active`, NEW.`group_type`, NEW.`title`, NEW.`description`, NEW.`help_pre`, NEW.`help_post`, NEW.`limit_listings_group_id`, NEW.`post_url`, NEW.`add_to_group_id`, NEW.`add_captcha`, NEW.`is_map`, NEW.`is_edit_link`, NEW.`is_uf_link`, NEW.`is_update_dupe`, NEW.`cancel_url`, NEW.`is_cms_user`, NEW.`notify`, NEW.`is_reserved`, NEW.`name`, NEW.`created_id`, NEW.`created_date`, NEW.`is_proximity_search`, NEW.`cancel_button_text`, NEW.`submit_button_text`, NEW.`frontend_title`, NEW.`add_cancel_button`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_uf_group_after_delete after delete ON civicrm_uf_group FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_uf_group (`id`, `is_active`, `group_type`, `title`, `description`, `help_pre`, `help_post`, `limit_listings_group_id`, `post_url`, `add_to_group_id`, `add_captcha`, `is_map`, `is_edit_link`, `is_uf_link`, `is_update_dupe`, `cancel_url`, `is_cms_user`, `notify`, `is_reserved`, `name`, `created_id`, `created_date`, `is_proximity_search`, `cancel_button_text`, `submit_button_text`, `frontend_title`, `add_cancel_button`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`is_active`, OLD.`group_type`, OLD.`title`, OLD.`description`, OLD.`help_pre`, OLD.`help_post`, OLD.`limit_listings_group_id`, OLD.`post_url`, OLD.`add_to_group_id`, OLD.`add_captcha`, OLD.`is_map`, OLD.`is_edit_link`, OLD.`is_uf_link`, OLD.`is_update_dupe`, OLD.`cancel_url`, OLD.`is_cms_user`, OLD.`notify`, OLD.`is_reserved`, OLD.`name`, OLD.`created_id`, OLD.`created_date`, OLD.`is_proximity_search`, OLD.`cancel_button_text`, OLD.`submit_button_text`, OLD.`frontend_title`, OLD.`add_cancel_button`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_uf_join_after_insert after insert ON civicrm_uf_join FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_uf_join (`id`, `is_active`, `module`, `entity_table`, `entity_id`, `weight`, `uf_group_id`, `module_data`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`is_active`, NEW.`module`, NEW.`entity_table`, NEW.`entity_id`, NEW.`weight`, NEW.`uf_group_id`, NEW.`module_data`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_uf_join_after_update after update ON civicrm_uf_join FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`is_active`,'') <> IFNULL(NEW.`is_active`,'') OR IFNULL(OLD.`module`,'') <> IFNULL(NEW.`module`,'') OR IFNULL(OLD.`entity_table`,'') <> IFNULL(NEW.`entity_table`,'') OR IFNULL(OLD.`entity_id`,'') <> IFNULL(NEW.`entity_id`,'') OR IFNULL(OLD.`weight`,'') <> IFNULL(NEW.`weight`,'') OR IFNULL(OLD.`uf_group_id`,'') <> IFNULL(NEW.`uf_group_id`,'') OR IFNULL(OLD.`module_data`,'') <> IFNULL(NEW.`module_data`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_uf_join (`id`, `is_active`, `module`, `entity_table`, `entity_id`, `weight`, `uf_group_id`, `module_data`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`is_active`, NEW.`module`, NEW.`entity_table`, NEW.`entity_id`, NEW.`weight`, NEW.`uf_group_id`, NEW.`module_data`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_uf_join_after_delete after delete ON civicrm_uf_join FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_uf_join (`id`, `is_active`, `module`, `entity_table`, `entity_id`, `weight`, `uf_group_id`, `module_data`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`is_active`, OLD.`module`, OLD.`entity_table`, OLD.`entity_id`, OLD.`weight`, OLD.`uf_group_id`, OLD.`module_data`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_uf_match_after_insert after insert ON civicrm_uf_match FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_uf_match (`id`, `domain_id`, `uf_id`, `uf_name`, `contact_id`, `language`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`domain_id`, NEW.`uf_id`, NEW.`uf_name`, NEW.`contact_id`, NEW.`language`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_uf_match_after_update after update ON civicrm_uf_match FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`domain_id`,'') <> IFNULL(NEW.`domain_id`,'') OR IFNULL(OLD.`uf_id`,'') <> IFNULL(NEW.`uf_id`,'') OR IFNULL(OLD.`uf_name`,'') <> IFNULL(NEW.`uf_name`,'') OR IFNULL(OLD.`contact_id`,'') <> IFNULL(NEW.`contact_id`,'') OR IFNULL(OLD.`language`,'') <> IFNULL(NEW.`language`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_uf_match (`id`, `domain_id`, `uf_id`, `uf_name`, `contact_id`, `language`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`domain_id`, NEW.`uf_id`, NEW.`uf_name`, NEW.`contact_id`, NEW.`language`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_uf_match_after_delete after delete ON civicrm_uf_match FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_uf_match (`id`, `domain_id`, `uf_id`, `uf_name`, `contact_id`, `language`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`domain_id`, OLD.`uf_id`, OLD.`uf_name`, OLD.`contact_id`, OLD.`language`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_user_job_after_insert after insert ON civicrm_user_job FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_user_job (`id`, `name`, `created_id`, `created_date`, `start_date`, `end_date`, `expires_date`, `status_id`, `queue_id`, `metadata`, `is_template`, `job_type`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`name`, NEW.`created_id`, NEW.`created_date`, NEW.`start_date`, NEW.`end_date`, NEW.`expires_date`, NEW.`status_id`, NEW.`queue_id`, NEW.`metadata`, NEW.`is_template`, NEW.`job_type`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_user_job_after_update after update ON civicrm_user_job FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`name`,'') <> IFNULL(NEW.`name`,'') OR IFNULL(OLD.`created_id`,'') <> IFNULL(NEW.`created_id`,'') OR IFNULL(OLD.`created_date`,'') <> IFNULL(NEW.`created_date`,'') OR IFNULL(OLD.`start_date`,'') <> IFNULL(NEW.`start_date`,'') OR IFNULL(OLD.`end_date`,'') <> IFNULL(NEW.`end_date`,'') OR IFNULL(OLD.`expires_date`,'') <> IFNULL(NEW.`expires_date`,'') OR IFNULL(OLD.`status_id`,'') <> IFNULL(NEW.`status_id`,'') OR IFNULL(OLD.`queue_id`,'') <> IFNULL(NEW.`queue_id`,'') OR IFNULL(OLD.`metadata`,'') <> IFNULL(NEW.`metadata`,'') OR IFNULL(OLD.`is_template`,'') <> IFNULL(NEW.`is_template`,'') OR IFNULL(OLD.`job_type`,'') <> IFNULL(NEW.`job_type`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_user_job (`id`, `name`, `created_id`, `created_date`, `start_date`, `end_date`, `expires_date`, `status_id`, `queue_id`, `metadata`, `is_template`, `job_type`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`name`, NEW.`created_id`, NEW.`created_date`, NEW.`start_date`, NEW.`end_date`, NEW.`expires_date`, NEW.`status_id`, NEW.`queue_id`, NEW.`metadata`, NEW.`is_template`, NEW.`job_type`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_user_job_after_delete after delete ON civicrm_user_job FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_user_job (`id`, `name`, `created_id`, `created_date`, `start_date`, `end_date`, `expires_date`, `status_id`, `queue_id`, `metadata`, `is_template`, `job_type`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`name`, OLD.`created_id`, OLD.`created_date`, OLD.`start_date`, OLD.`end_date`, OLD.`expires_date`, OLD.`status_id`, OLD.`queue_id`, OLD.`metadata`, OLD.`is_template`, OLD.`job_type`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_value_1_check_number_9_after_insert after insert ON civicrm_value_1_check_number_9 FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_value_1_check_number_9 (`id`, `entity_id`, `check_number`, `currency_type`, `original_amount`, `cateway_type_52`, `import_batch_number`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`entity_id`, NEW.`check_number`, NEW.`currency_type`, NEW.`original_amount`, NEW.`cateway_type_52`, NEW.`import_batch_number`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_value_1_check_number_9_after_update after update ON civicrm_value_1_check_number_9 FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`entity_id`,'') <> IFNULL(NEW.`entity_id`,'') OR IFNULL(OLD.`check_number`,'') <> IFNULL(NEW.`check_number`,'') OR IFNULL(OLD.`currency_type`,'') <> IFNULL(NEW.`currency_type`,'') OR IFNULL(OLD.`original_amount`,'') <> IFNULL(NEW.`original_amount`,'') OR IFNULL(OLD.`cateway_type_52`,'') <> IFNULL(NEW.`cateway_type_52`,'') OR IFNULL(OLD.`import_batch_number`,'') <> IFNULL(NEW.`import_batch_number`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_value_1_check_number_9 (`id`, `entity_id`, `check_number`, `currency_type`, `original_amount`, `cateway_type_52`, `import_batch_number`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`entity_id`, NEW.`check_number`, NEW.`currency_type`, NEW.`original_amount`, NEW.`cateway_type_52`, NEW.`import_batch_number`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_value_1_check_number_9_after_delete after delete ON civicrm_value_1_check_number_9 FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_value_1_check_number_9 (`id`, `entity_id`, `check_number`, `currency_type`, `original_amount`, `cateway_type_52`, `import_batch_number`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`entity_id`, OLD.`check_number`, OLD.`currency_type`, OLD.`original_amount`, OLD.`cateway_type_52`, OLD.`import_batch_number`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_value_1_communication_4_after_insert after insert ON civicrm_value_1_communication_4 FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_value_1_communication_4 (`id`, `entity_id`, `invalid_mailing_address`, `invalid_e_mail_address`, `survey_group_73`, `do_not_solicit`, `opt_in`, `known_fraudster_172`, `employer_name_176`, `opt_in_source_179`, `opt_in_medium_180`, `opt_in_campaign_181`, `endowment_opt_out_222`, `pg_opt_out_223`, `first_name_phonetic`, `last_name_phonetic`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`entity_id`, NEW.`invalid_mailing_address`, NEW.`invalid_e_mail_address`, NEW.`survey_group_73`, NEW.`do_not_solicit`, NEW.`opt_in`, NEW.`known_fraudster_172`, NEW.`employer_name_176`, NEW.`opt_in_source_179`, NEW.`opt_in_medium_180`, NEW.`opt_in_campaign_181`, NEW.`endowment_opt_out_222`, NEW.`pg_opt_out_223`, NEW.`first_name_phonetic`, NEW.`last_name_phonetic`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF;
UPDATE civicrm_contact SET modified_date = CURRENT_TIMESTAMP WHERE id = NEW.entity_id; END //

CREATE TRIGGER civicrm_value_1_communication_4_after_update after update ON civicrm_value_1_communication_4 FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`entity_id`,'') <> IFNULL(NEW.`entity_id`,'') OR IFNULL(OLD.`invalid_mailing_address`,'') <> IFNULL(NEW.`invalid_mailing_address`,'') OR IFNULL(OLD.`invalid_e_mail_address`,'') <> IFNULL(NEW.`invalid_e_mail_address`,'') OR IFNULL(OLD.`survey_group_73`,'') <> IFNULL(NEW.`survey_group_73`,'') OR IFNULL(OLD.`do_not_solicit`,'') <> IFNULL(NEW.`do_not_solicit`,'') OR IFNULL(OLD.`opt_in`,'') <> IFNULL(NEW.`opt_in`,'') OR IFNULL(OLD.`known_fraudster_172`,'') <> IFNULL(NEW.`known_fraudster_172`,'') OR IFNULL(OLD.`employer_name_176`,'') <> IFNULL(NEW.`employer_name_176`,'') OR IFNULL(OLD.`opt_in_source_179`,'') <> IFNULL(NEW.`opt_in_source_179`,'') OR IFNULL(OLD.`opt_in_medium_180`,'') <> IFNULL(NEW.`opt_in_medium_180`,'') OR IFNULL(OLD.`opt_in_campaign_181`,'') <> IFNULL(NEW.`opt_in_campaign_181`,'') OR IFNULL(OLD.`endowment_opt_out_222`,'') <> IFNULL(NEW.`endowment_opt_out_222`,'') OR IFNULL(OLD.`pg_opt_out_223`,'') <> IFNULL(NEW.`pg_opt_out_223`,'') OR IFNULL(OLD.`first_name_phonetic`,'') <> IFNULL(NEW.`first_name_phonetic`,'') OR IFNULL(OLD.`last_name_phonetic`,'') <> IFNULL(NEW.`last_name_phonetic`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_value_1_communication_4 (`id`, `entity_id`, `invalid_mailing_address`, `invalid_e_mail_address`, `survey_group_73`, `do_not_solicit`, `opt_in`, `known_fraudster_172`, `employer_name_176`, `opt_in_source_179`, `opt_in_medium_180`, `opt_in_campaign_181`, `endowment_opt_out_222`, `pg_opt_out_223`, `first_name_phonetic`, `last_name_phonetic`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`entity_id`, NEW.`invalid_mailing_address`, NEW.`invalid_e_mail_address`, NEW.`survey_group_73`, NEW.`do_not_solicit`, NEW.`opt_in`, NEW.`known_fraudster_172`, NEW.`employer_name_176`, NEW.`opt_in_source_179`, NEW.`opt_in_medium_180`, NEW.`opt_in_campaign_181`, NEW.`endowment_opt_out_222`, NEW.`pg_opt_out_223`, NEW.`first_name_phonetic`, NEW.`last_name_phonetic`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF;
UPDATE civicrm_contact SET modified_date = CURRENT_TIMESTAMP WHERE id = NEW.entity_id; END //

CREATE TRIGGER civicrm_value_1_communication_4_after_delete after delete ON civicrm_value_1_communication_4 FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_value_1_communication_4 (`id`, `entity_id`, `invalid_mailing_address`, `invalid_e_mail_address`, `survey_group_73`, `do_not_solicit`, `opt_in`, `known_fraudster_172`, `employer_name_176`, `opt_in_source_179`, `opt_in_medium_180`, `opt_in_campaign_181`, `endowment_opt_out_222`, `pg_opt_out_223`, `first_name_phonetic`, `last_name_phonetic`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`entity_id`, OLD.`invalid_mailing_address`, OLD.`invalid_e_mail_address`, OLD.`survey_group_73`, OLD.`do_not_solicit`, OLD.`opt_in`, OLD.`known_fraudster_172`, OLD.`employer_name_176`, OLD.`opt_in_source_179`, OLD.`opt_in_medium_180`, OLD.`opt_in_campaign_181`, OLD.`endowment_opt_out_222`, OLD.`pg_opt_out_223`, OLD.`first_name_phonetic`, OLD.`last_name_phonetic`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF;
UPDATE civicrm_contact SET modified_date = CURRENT_TIMESTAMP WHERE id = OLD.entity_id; END //

CREATE TRIGGER civicrm_value_1_currency_3_after_insert after insert ON civicrm_value_1_currency_3 FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_value_1_currency_3 (`id`, `entity_id`, `note`, `thank_you_method`, `thank_you_remarks`, `benefactor_page_updated`, `thank_you_status_48`, `archived_69`, `reply_from_donor`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`entity_id`, NEW.`note`, NEW.`thank_you_method`, NEW.`thank_you_remarks`, NEW.`benefactor_page_updated`, NEW.`thank_you_status_48`, NEW.`archived_69`, NEW.`reply_from_donor`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_value_1_currency_3_after_update after update ON civicrm_value_1_currency_3 FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`entity_id`,'') <> IFNULL(NEW.`entity_id`,'') OR IFNULL(OLD.`note`,'') <> IFNULL(NEW.`note`,'') OR IFNULL(OLD.`thank_you_method`,'') <> IFNULL(NEW.`thank_you_method`,'') OR IFNULL(OLD.`thank_you_remarks`,'') <> IFNULL(NEW.`thank_you_remarks`,'') OR IFNULL(OLD.`benefactor_page_updated`,'') <> IFNULL(NEW.`benefactor_page_updated`,'') OR IFNULL(OLD.`thank_you_status_48`,'') <> IFNULL(NEW.`thank_you_status_48`,'') OR IFNULL(OLD.`archived_69`,'') <> IFNULL(NEW.`archived_69`,'') OR IFNULL(OLD.`reply_from_donor`,'') <> IFNULL(NEW.`reply_from_donor`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_value_1_currency_3 (`id`, `entity_id`, `note`, `thank_you_method`, `thank_you_remarks`, `benefactor_page_updated`, `thank_you_status_48`, `archived_69`, `reply_from_donor`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`entity_id`, NEW.`note`, NEW.`thank_you_method`, NEW.`thank_you_remarks`, NEW.`benefactor_page_updated`, NEW.`thank_you_status_48`, NEW.`archived_69`, NEW.`reply_from_donor`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_value_1_currency_3_after_delete after delete ON civicrm_value_1_currency_3 FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_value_1_currency_3 (`id`, `entity_id`, `note`, `thank_you_method`, `thank_you_remarks`, `benefactor_page_updated`, `thank_you_status_48`, `archived_69`, `reply_from_donor`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`entity_id`, OLD.`note`, OLD.`thank_you_method`, OLD.`thank_you_remarks`, OLD.`benefactor_page_updated`, OLD.`thank_you_status_48`, OLD.`archived_69`, OLD.`reply_from_donor`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_value_1_gift_data_7_after_insert after insert ON civicrm_value_1_gift_data_7 FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_value_1_gift_data_7 (`id`, `entity_id`, `fund`, `campaign`, `appeal`, `letter_code`, `thank__you_stage_53`, `donor_specified_340`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`entity_id`, NEW.`fund`, NEW.`campaign`, NEW.`appeal`, NEW.`letter_code`, NEW.`thank__you_stage_53`, NEW.`donor_specified_340`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_value_1_gift_data_7_after_update after update ON civicrm_value_1_gift_data_7 FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`entity_id`,'') <> IFNULL(NEW.`entity_id`,'') OR IFNULL(OLD.`fund`,'') <> IFNULL(NEW.`fund`,'') OR IFNULL(OLD.`campaign`,'') <> IFNULL(NEW.`campaign`,'') OR IFNULL(OLD.`appeal`,'') <> IFNULL(NEW.`appeal`,'') OR IFNULL(OLD.`letter_code`,'') <> IFNULL(NEW.`letter_code`,'') OR IFNULL(OLD.`thank__you_stage_53`,'') <> IFNULL(NEW.`thank__you_stage_53`,'') OR IFNULL(OLD.`donor_specified_340`,'') <> IFNULL(NEW.`donor_specified_340`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_value_1_gift_data_7 (`id`, `entity_id`, `fund`, `campaign`, `appeal`, `letter_code`, `thank__you_stage_53`, `donor_specified_340`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`entity_id`, NEW.`fund`, NEW.`campaign`, NEW.`appeal`, NEW.`letter_code`, NEW.`thank__you_stage_53`, NEW.`donor_specified_340`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_value_1_gift_data_7_after_delete after delete ON civicrm_value_1_gift_data_7 FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_value_1_gift_data_7 (`id`, `entity_id`, `fund`, `campaign`, `appeal`, `letter_code`, `thank__you_stage_53`, `donor_specified_340`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`entity_id`, OLD.`fund`, OLD.`campaign`, OLD.`appeal`, OLD.`letter_code`, OLD.`thank__you_stage_53`, OLD.`donor_specified_340`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_value_1_primary_contact_name_9_after_insert after insert ON civicrm_value_1_primary_contact_name_9 FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_value_1_primary_contact_name_9 (`id`, `domain_id`, `entity_id`, `name`, `email`, `phone`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`domain_id`, NEW.`entity_id`, NEW.`name`, NEW.`email`, NEW.`phone`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_value_1_primary_contact_name_9_after_update after update ON civicrm_value_1_primary_contact_name_9 FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`domain_id`,'') <> IFNULL(NEW.`domain_id`,'') OR IFNULL(OLD.`entity_id`,'') <> IFNULL(NEW.`entity_id`,'') OR IFNULL(OLD.`name`,'') <> IFNULL(NEW.`name`,'') OR IFNULL(OLD.`email`,'') <> IFNULL(NEW.`email`,'') OR IFNULL(OLD.`phone`,'') <> IFNULL(NEW.`phone`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_value_1_primary_contact_name_9 (`id`, `domain_id`, `entity_id`, `name`, `email`, `phone`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`domain_id`, NEW.`entity_id`, NEW.`name`, NEW.`email`, NEW.`phone`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_value_1_primary_contact_name_9_after_delete after delete ON civicrm_value_1_primary_contact_name_9 FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_value_1_primary_contact_name_9 (`id`, `domain_id`, `entity_id`, `name`, `email`, `phone`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`domain_id`, OLD.`entity_id`, OLD.`name`, OLD.`email`, OLD.`phone`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_value_1_prospect_5_after_insert after insert ON civicrm_value_1_prospect_5 FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_value_1_prospect_5 (`id`, `entity_id`, `reviewed`, `stage`, `type`, `capacity`, `readiness`, `stewardship`, `solicitor`, `inclination`, `philanthropic`, `philanthropic_history_51`, `biography_66`, `interests_67`, `origin_68`, `on_hold_72`, `income_range`, `charitable_contributions_decile`, `disc_income_decile`, `subject_area_interest`, `university_affiliation`, `ask_amount_136`, `expected_amount_137`, `likelihood__138`, `expected_close_date_139`, `close_date_140`, `next_step_141`, `estimated_net_worth_144`, `notes_147`, `board_affiliations_148`, `endowment_stage_169`, `net_worth_170`, `family_composition_173`, `occupation_175`, `pg_stage_177`, `survey_responses_178`, `ira_and_401k_decile_239`, `do_not_invite_240`, `prospect_insight_280`, `estimated_capacity_281`, `planned_giving_score_282`, `planned_giving_segment_283`, `relationship_manager_284`, `related_account_335`, `data_axle_net_worth`, `data_axle_expendable_income`, `data_axle_donation_interest`, `data_axle_is_single`, `data_axle_is_grandparent`, `data_axle_is_parent`, `data_axle_number_children`, `data_axle_security_investor_likelihood`, `data_axle_stock_investor_likelihood`, `data_axle_is_likely_homeowner`, `data_axle_marital_status`, `wend_364`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`entity_id`, NEW.`reviewed`, NEW.`stage`, NEW.`type`, NEW.`capacity`, NEW.`readiness`, NEW.`stewardship`, NEW.`solicitor`, NEW.`inclination`, NEW.`philanthropic`, NEW.`philanthropic_history_51`, NEW.`biography_66`, NEW.`interests_67`, NEW.`origin_68`, NEW.`on_hold_72`, NEW.`income_range`, NEW.`charitable_contributions_decile`, NEW.`disc_income_decile`, NEW.`subject_area_interest`, NEW.`university_affiliation`, NEW.`ask_amount_136`, NEW.`expected_amount_137`, NEW.`likelihood__138`, NEW.`expected_close_date_139`, NEW.`close_date_140`, NEW.`next_step_141`, NEW.`estimated_net_worth_144`, NEW.`notes_147`, NEW.`board_affiliations_148`, NEW.`endowment_stage_169`, NEW.`net_worth_170`, NEW.`family_composition_173`, NEW.`occupation_175`, NEW.`pg_stage_177`, NEW.`survey_responses_178`, NEW.`ira_and_401k_decile_239`, NEW.`do_not_invite_240`, NEW.`prospect_insight_280`, NEW.`estimated_capacity_281`, NEW.`planned_giving_score_282`, NEW.`planned_giving_segment_283`, NEW.`relationship_manager_284`, NEW.`related_account_335`, NEW.`data_axle_net_worth`, NEW.`data_axle_expendable_income`, NEW.`data_axle_donation_interest`, NEW.`data_axle_is_single`, NEW.`data_axle_is_grandparent`, NEW.`data_axle_is_parent`, NEW.`data_axle_number_children`, NEW.`data_axle_security_investor_likelihood`, NEW.`data_axle_stock_investor_likelihood`, NEW.`data_axle_is_likely_homeowner`, NEW.`data_axle_marital_status`, NEW.`wend_364`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF;
UPDATE civicrm_contact SET modified_date = CURRENT_TIMESTAMP WHERE id = NEW.entity_id; END //

CREATE TRIGGER civicrm_value_1_prospect_5_after_update after update ON civicrm_value_1_prospect_5 FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`entity_id`,'') <> IFNULL(NEW.`entity_id`,'') OR IFNULL(OLD.`reviewed`,'') <> IFNULL(NEW.`reviewed`,'') OR IFNULL(OLD.`stage`,'') <> IFNULL(NEW.`stage`,'') OR IFNULL(OLD.`type`,'') <> IFNULL(NEW.`type`,'') OR IFNULL(OLD.`capacity`,'') <> IFNULL(NEW.`capacity`,'') OR IFNULL(OLD.`readiness`,'') <> IFNULL(NEW.`readiness`,'') OR IFNULL(OLD.`stewardship`,'') <> IFNULL(NEW.`stewardship`,'') OR IFNULL(OLD.`solicitor`,'') <> IFNULL(NEW.`solicitor`,'') OR IFNULL(OLD.`inclination`,'') <> IFNULL(NEW.`inclination`,'') OR IFNULL(OLD.`philanthropic`,'') <> IFNULL(NEW.`philanthropic`,'') OR IFNULL(OLD.`philanthropic_history_51`,'') <> IFNULL(NEW.`philanthropic_history_51`,'') OR IFNULL(OLD.`biography_66`,'') <> IFNULL(NEW.`biography_66`,'') OR IFNULL(OLD.`interests_67`,'') <> IFNULL(NEW.`interests_67`,'') OR IFNULL(OLD.`origin_68`,'') <> IFNULL(NEW.`origin_68`,'') OR IFNULL(OLD.`on_hold_72`,'') <> IFNULL(NEW.`on_hold_72`,'') OR IFNULL(OLD.`income_range`,'') <> IFNULL(NEW.`income_range`,'') OR IFNULL(OLD.`charitable_contributions_decile`,'') <> IFNULL(NEW.`charitable_contributions_decile`,'') OR IFNULL(OLD.`disc_income_decile`,'') <> IFNULL(NEW.`disc_income_decile`,'') OR IFNULL(OLD.`subject_area_interest`,'') <> IFNULL(NEW.`subject_area_interest`,'') OR IFNULL(OLD.`university_affiliation`,'') <> IFNULL(NEW.`university_affiliation`,'') OR IFNULL(OLD.`ask_amount_136`,'') <> IFNULL(NEW.`ask_amount_136`,'') OR IFNULL(OLD.`expected_amount_137`,'') <> IFNULL(NEW.`expected_amount_137`,'') OR IFNULL(OLD.`likelihood__138`,'') <> IFNULL(NEW.`likelihood__138`,'') OR IFNULL(OLD.`expected_close_date_139`,'') <> IFNULL(NEW.`expected_close_date_139`,'') OR IFNULL(OLD.`close_date_140`,'') <> IFNULL(NEW.`close_date_140`,'') OR IFNULL(OLD.`next_step_141`,'') <> IFNULL(NEW.`next_step_141`,'') OR IFNULL(OLD.`estimated_net_worth_144`,'') <> IFNULL(NEW.`estimated_net_worth_144`,'') OR IFNULL(OLD.`notes_147`,'') <> IFNULL(NEW.`notes_147`,'') OR IFNULL(OLD.`board_affiliations_148`,'') <> IFNULL(NEW.`board_affiliations_148`,'') OR IFNULL(OLD.`endowment_stage_169`,'') <> IFNULL(NEW.`endowment_stage_169`,'') OR IFNULL(OLD.`net_worth_170`,'') <> IFNULL(NEW.`net_worth_170`,'') OR IFNULL(OLD.`family_composition_173`,'') <> IFNULL(NEW.`family_composition_173`,'') OR IFNULL(OLD.`occupation_175`,'') <> IFNULL(NEW.`occupation_175`,'') OR IFNULL(OLD.`pg_stage_177`,'') <> IFNULL(NEW.`pg_stage_177`,'') OR IFNULL(OLD.`survey_responses_178`,'') <> IFNULL(NEW.`survey_responses_178`,'') OR IFNULL(OLD.`ira_and_401k_decile_239`,'') <> IFNULL(NEW.`ira_and_401k_decile_239`,'') OR IFNULL(OLD.`do_not_invite_240`,'') <> IFNULL(NEW.`do_not_invite_240`,'') OR IFNULL(OLD.`prospect_insight_280`,'') <> IFNULL(NEW.`prospect_insight_280`,'') OR IFNULL(OLD.`estimated_capacity_281`,'') <> IFNULL(NEW.`estimated_capacity_281`,'') OR IFNULL(OLD.`planned_giving_score_282`,'') <> IFNULL(NEW.`planned_giving_score_282`,'') OR IFNULL(OLD.`planned_giving_segment_283`,'') <> IFNULL(NEW.`planned_giving_segment_283`,'') OR IFNULL(OLD.`relationship_manager_284`,'') <> IFNULL(NEW.`relationship_manager_284`,'') OR IFNULL(OLD.`related_account_335`,'') <> IFNULL(NEW.`related_account_335`,'') OR IFNULL(OLD.`data_axle_net_worth`,'') <> IFNULL(NEW.`data_axle_net_worth`,'') OR IFNULL(OLD.`data_axle_expendable_income`,'') <> IFNULL(NEW.`data_axle_expendable_income`,'') OR IFNULL(OLD.`data_axle_donation_interest`,'') <> IFNULL(NEW.`data_axle_donation_interest`,'') OR IFNULL(OLD.`data_axle_is_single`,'') <> IFNULL(NEW.`data_axle_is_single`,'') OR IFNULL(OLD.`data_axle_is_grandparent`,'') <> IFNULL(NEW.`data_axle_is_grandparent`,'') OR IFNULL(OLD.`data_axle_is_parent`,'') <> IFNULL(NEW.`data_axle_is_parent`,'') OR IFNULL(OLD.`data_axle_number_children`,'') <> IFNULL(NEW.`data_axle_number_children`,'') OR IFNULL(OLD.`data_axle_security_investor_likelihood`,'') <> IFNULL(NEW.`data_axle_security_investor_likelihood`,'') OR IFNULL(OLD.`data_axle_stock_investor_likelihood`,'') <> IFNULL(NEW.`data_axle_stock_investor_likelihood`,'') OR IFNULL(OLD.`data_axle_is_likely_homeowner`,'') <> IFNULL(NEW.`data_axle_is_likely_homeowner`,'') OR IFNULL(OLD.`data_axle_marital_status`,'') <> IFNULL(NEW.`data_axle_marital_status`,'') OR IFNULL(OLD.`wend_364`,'') <> IFNULL(NEW.`wend_364`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_value_1_prospect_5 (`id`, `entity_id`, `reviewed`, `stage`, `type`, `capacity`, `readiness`, `stewardship`, `solicitor`, `inclination`, `philanthropic`, `philanthropic_history_51`, `biography_66`, `interests_67`, `origin_68`, `on_hold_72`, `income_range`, `charitable_contributions_decile`, `disc_income_decile`, `subject_area_interest`, `university_affiliation`, `ask_amount_136`, `expected_amount_137`, `likelihood__138`, `expected_close_date_139`, `close_date_140`, `next_step_141`, `estimated_net_worth_144`, `notes_147`, `board_affiliations_148`, `endowment_stage_169`, `net_worth_170`, `family_composition_173`, `occupation_175`, `pg_stage_177`, `survey_responses_178`, `ira_and_401k_decile_239`, `do_not_invite_240`, `prospect_insight_280`, `estimated_capacity_281`, `planned_giving_score_282`, `planned_giving_segment_283`, `relationship_manager_284`, `related_account_335`, `data_axle_net_worth`, `data_axle_expendable_income`, `data_axle_donation_interest`, `data_axle_is_single`, `data_axle_is_grandparent`, `data_axle_is_parent`, `data_axle_number_children`, `data_axle_security_investor_likelihood`, `data_axle_stock_investor_likelihood`, `data_axle_is_likely_homeowner`, `data_axle_marital_status`, `wend_364`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`entity_id`, NEW.`reviewed`, NEW.`stage`, NEW.`type`, NEW.`capacity`, NEW.`readiness`, NEW.`stewardship`, NEW.`solicitor`, NEW.`inclination`, NEW.`philanthropic`, NEW.`philanthropic_history_51`, NEW.`biography_66`, NEW.`interests_67`, NEW.`origin_68`, NEW.`on_hold_72`, NEW.`income_range`, NEW.`charitable_contributions_decile`, NEW.`disc_income_decile`, NEW.`subject_area_interest`, NEW.`university_affiliation`, NEW.`ask_amount_136`, NEW.`expected_amount_137`, NEW.`likelihood__138`, NEW.`expected_close_date_139`, NEW.`close_date_140`, NEW.`next_step_141`, NEW.`estimated_net_worth_144`, NEW.`notes_147`, NEW.`board_affiliations_148`, NEW.`endowment_stage_169`, NEW.`net_worth_170`, NEW.`family_composition_173`, NEW.`occupation_175`, NEW.`pg_stage_177`, NEW.`survey_responses_178`, NEW.`ira_and_401k_decile_239`, NEW.`do_not_invite_240`, NEW.`prospect_insight_280`, NEW.`estimated_capacity_281`, NEW.`planned_giving_score_282`, NEW.`planned_giving_segment_283`, NEW.`relationship_manager_284`, NEW.`related_account_335`, NEW.`data_axle_net_worth`, NEW.`data_axle_expendable_income`, NEW.`data_axle_donation_interest`, NEW.`data_axle_is_single`, NEW.`data_axle_is_grandparent`, NEW.`data_axle_is_parent`, NEW.`data_axle_number_children`, NEW.`data_axle_security_investor_likelihood`, NEW.`data_axle_stock_investor_likelihood`, NEW.`data_axle_is_likely_homeowner`, NEW.`data_axle_marital_status`, NEW.`wend_364`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF;
UPDATE civicrm_contact SET modified_date = CURRENT_TIMESTAMP WHERE id = NEW.entity_id; END //

CREATE TRIGGER civicrm_value_1_prospect_5_after_delete after delete ON civicrm_value_1_prospect_5 FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_value_1_prospect_5 (`id`, `entity_id`, `reviewed`, `stage`, `type`, `capacity`, `readiness`, `stewardship`, `solicitor`, `inclination`, `philanthropic`, `philanthropic_history_51`, `biography_66`, `interests_67`, `origin_68`, `on_hold_72`, `income_range`, `charitable_contributions_decile`, `disc_income_decile`, `subject_area_interest`, `university_affiliation`, `ask_amount_136`, `expected_amount_137`, `likelihood__138`, `expected_close_date_139`, `close_date_140`, `next_step_141`, `estimated_net_worth_144`, `notes_147`, `board_affiliations_148`, `endowment_stage_169`, `net_worth_170`, `family_composition_173`, `occupation_175`, `pg_stage_177`, `survey_responses_178`, `ira_and_401k_decile_239`, `do_not_invite_240`, `prospect_insight_280`, `estimated_capacity_281`, `planned_giving_score_282`, `planned_giving_segment_283`, `relationship_manager_284`, `related_account_335`, `data_axle_net_worth`, `data_axle_expendable_income`, `data_axle_donation_interest`, `data_axle_is_single`, `data_axle_is_grandparent`, `data_axle_is_parent`, `data_axle_number_children`, `data_axle_security_investor_likelihood`, `data_axle_stock_investor_likelihood`, `data_axle_is_likely_homeowner`, `data_axle_marital_status`, `wend_364`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`entity_id`, OLD.`reviewed`, OLD.`stage`, OLD.`type`, OLD.`capacity`, OLD.`readiness`, OLD.`stewardship`, OLD.`solicitor`, OLD.`inclination`, OLD.`philanthropic`, OLD.`philanthropic_history_51`, OLD.`biography_66`, OLD.`interests_67`, OLD.`origin_68`, OLD.`on_hold_72`, OLD.`income_range`, OLD.`charitable_contributions_decile`, OLD.`disc_income_decile`, OLD.`subject_area_interest`, OLD.`university_affiliation`, OLD.`ask_amount_136`, OLD.`expected_amount_137`, OLD.`likelihood__138`, OLD.`expected_close_date_139`, OLD.`close_date_140`, OLD.`next_step_141`, OLD.`estimated_net_worth_144`, OLD.`notes_147`, OLD.`board_affiliations_148`, OLD.`endowment_stage_169`, OLD.`net_worth_170`, OLD.`family_composition_173`, OLD.`occupation_175`, OLD.`pg_stage_177`, OLD.`survey_responses_178`, OLD.`ira_and_401k_decile_239`, OLD.`do_not_invite_240`, OLD.`prospect_insight_280`, OLD.`estimated_capacity_281`, OLD.`planned_giving_score_282`, OLD.`planned_giving_segment_283`, OLD.`relationship_manager_284`, OLD.`related_account_335`, OLD.`data_axle_net_worth`, OLD.`data_axle_expendable_income`, OLD.`data_axle_donation_interest`, OLD.`data_axle_is_single`, OLD.`data_axle_is_grandparent`, OLD.`data_axle_is_parent`, OLD.`data_axle_number_children`, OLD.`data_axle_security_investor_likelihood`, OLD.`data_axle_stock_investor_likelihood`, OLD.`data_axle_is_likely_homeowner`, OLD.`data_axle_marital_status`, OLD.`wend_364`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF;
UPDATE civicrm_contact SET modified_date = CURRENT_TIMESTAMP WHERE id = OLD.entity_id; END //

CREATE TRIGGER civicrm_value_1_soft_credit_data_8_after_insert after insert ON civicrm_value_1_soft_credit_data_8 FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_value_1_soft_credit_data_8 (`id`, `entity_id`, `sc_donor_name`, `sc_gift_date`, `sc_gift_amount`, `notes`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`entity_id`, NEW.`sc_donor_name`, NEW.`sc_gift_date`, NEW.`sc_gift_amount`, NEW.`notes`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_value_1_soft_credit_data_8_after_update after update ON civicrm_value_1_soft_credit_data_8 FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`entity_id`,'') <> IFNULL(NEW.`entity_id`,'') OR IFNULL(OLD.`sc_donor_name`,'') <> IFNULL(NEW.`sc_donor_name`,'') OR IFNULL(OLD.`sc_gift_date`,'') <> IFNULL(NEW.`sc_gift_date`,'') OR IFNULL(OLD.`sc_gift_amount`,'') <> IFNULL(NEW.`sc_gift_amount`,'') OR IFNULL(OLD.`notes`,'') <> IFNULL(NEW.`notes`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_value_1_soft_credit_data_8 (`id`, `entity_id`, `sc_donor_name`, `sc_gift_date`, `sc_gift_amount`, `notes`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`entity_id`, NEW.`sc_donor_name`, NEW.`sc_gift_date`, NEW.`sc_gift_amount`, NEW.`notes`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_value_1_soft_credit_data_8_after_delete after delete ON civicrm_value_1_soft_credit_data_8 FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_value_1_soft_credit_data_8 (`id`, `entity_id`, `sc_donor_name`, `sc_gift_date`, `sc_gift_amount`, `notes`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`entity_id`, OLD.`sc_donor_name`, OLD.`sc_gift_date`, OLD.`sc_gift_amount`, OLD.`notes`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_value_1_solicitation_6_after_insert after insert ON civicrm_value_1_solicitation_6 FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_value_1_solicitation_6 (`id`, `entity_id`, `solicitor_level`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`entity_id`, NEW.`solicitor_level`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_value_1_solicitation_6_after_update after update ON civicrm_value_1_solicitation_6 FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`entity_id`,'') <> IFNULL(NEW.`entity_id`,'') OR IFNULL(OLD.`solicitor_level`,'') <> IFNULL(NEW.`solicitor_level`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_value_1_solicitation_6 (`id`, `entity_id`, `solicitor_level`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`entity_id`, NEW.`solicitor_level`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_value_1_solicitation_6_after_delete after delete ON civicrm_value_1_solicitation_6 FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_value_1_solicitation_6 (`id`, `entity_id`, `solicitor_level`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`entity_id`, OLD.`solicitor_level`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_value_1_stock_information_10_after_insert after insert ON civicrm_value_1_stock_information_10 FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_value_1_stock_information_10 (`id`, `entity_id`, `description_of_stock`, `stock_value`, `stock_qty`, `stock_ticker`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`entity_id`, NEW.`description_of_stock`, NEW.`stock_value`, NEW.`stock_qty`, NEW.`stock_ticker`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_value_1_stock_information_10_after_update after update ON civicrm_value_1_stock_information_10 FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`entity_id`,'') <> IFNULL(NEW.`entity_id`,'') OR IFNULL(OLD.`description_of_stock`,'') <> IFNULL(NEW.`description_of_stock`,'') OR IFNULL(OLD.`stock_value`,'') <> IFNULL(NEW.`stock_value`,'') OR IFNULL(OLD.`stock_qty`,'') <> IFNULL(NEW.`stock_qty`,'') OR IFNULL(OLD.`stock_ticker`,'') <> IFNULL(NEW.`stock_ticker`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_value_1_stock_information_10 (`id`, `entity_id`, `description_of_stock`, `stock_value`, `stock_qty`, `stock_ticker`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`entity_id`, NEW.`description_of_stock`, NEW.`stock_value`, NEW.`stock_qty`, NEW.`stock_ticker`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_value_1_stock_information_10_after_delete after delete ON civicrm_value_1_stock_information_10 FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_value_1_stock_information_10 (`id`, `entity_id`, `description_of_stock`, `stock_value`, `stock_qty`, `stock_ticker`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`entity_id`, OLD.`description_of_stock`, OLD.`stock_value`, OLD.`stock_qty`, OLD.`stock_ticker`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_value_address_data_after_insert after insert ON civicrm_value_address_data FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_value_address_data (`id`, `entity_id`, `source`, `update_date`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`entity_id`, NEW.`source`, NEW.`update_date`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_value_address_data_after_update after update ON civicrm_value_address_data FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`entity_id`,'') <> IFNULL(NEW.`entity_id`,'') OR IFNULL(OLD.`source`,'') <> IFNULL(NEW.`source`,'') OR IFNULL(OLD.`update_date`,'') <> IFNULL(NEW.`update_date`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_value_address_data (`id`, `entity_id`, `source`, `update_date`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`entity_id`, NEW.`source`, NEW.`update_date`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_value_address_data_after_delete after delete ON civicrm_value_address_data FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_value_address_data (`id`, `entity_id`, `source`, `update_date`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`entity_id`, OLD.`source`, OLD.`update_date`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_value_adjustment_31_after_insert after insert ON civicrm_value_adjustment_31 FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_value_adjustment_31 (`id`, `entity_id`, `date_336`, `reason_337`, `notes_339`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`entity_id`, NEW.`date_336`, NEW.`reason_337`, NEW.`notes_339`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_value_adjustment_31_after_update after update ON civicrm_value_adjustment_31 FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`entity_id`,'') <> IFNULL(NEW.`entity_id`,'') OR IFNULL(OLD.`date_336`,'') <> IFNULL(NEW.`date_336`,'') OR IFNULL(OLD.`reason_337`,'') <> IFNULL(NEW.`reason_337`,'') OR IFNULL(OLD.`notes_339`,'') <> IFNULL(NEW.`notes_339`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_value_adjustment_31 (`id`, `entity_id`, `date_336`, `reason_337`, `notes_339`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`entity_id`, NEW.`date_336`, NEW.`reason_337`, NEW.`notes_339`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_value_adjustment_31_after_delete after delete ON civicrm_value_adjustment_31 FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_value_adjustment_31 (`id`, `entity_id`, `date_336`, `reason_337`, `notes_339`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`entity_id`, OLD.`date_336`, OLD.`reason_337`, OLD.`notes_339`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_value_anonymous__after_insert after insert ON civicrm_value_anonymous_ FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_value_anonymous_ (`id`, `entity_id`, `listed_as_anonymous`, `listed_on_benefactor_page_as_142`, `benefactor_order_as_168`, `endowment_site_listed_as_218`, `wls_listed_as_219`, `benefactor_page_last_updated_238`, `wls_listing_last_updated`, `endowment_listing_last_updated`, `benefactor_level_279`, `endowment_level_286`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`entity_id`, NEW.`listed_as_anonymous`, NEW.`listed_on_benefactor_page_as_142`, NEW.`benefactor_order_as_168`, NEW.`endowment_site_listed_as_218`, NEW.`wls_listed_as_219`, NEW.`benefactor_page_last_updated_238`, NEW.`wls_listing_last_updated`, NEW.`endowment_listing_last_updated`, NEW.`benefactor_level_279`, NEW.`endowment_level_286`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF;
UPDATE civicrm_contact SET modified_date = CURRENT_TIMESTAMP WHERE id = NEW.entity_id; END //

CREATE TRIGGER civicrm_value_anonymous__after_update after update ON civicrm_value_anonymous_ FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`entity_id`,'') <> IFNULL(NEW.`entity_id`,'') OR IFNULL(OLD.`listed_as_anonymous`,'') <> IFNULL(NEW.`listed_as_anonymous`,'') OR IFNULL(OLD.`listed_on_benefactor_page_as_142`,'') <> IFNULL(NEW.`listed_on_benefactor_page_as_142`,'') OR IFNULL(OLD.`benefactor_order_as_168`,'') <> IFNULL(NEW.`benefactor_order_as_168`,'') OR IFNULL(OLD.`endowment_site_listed_as_218`,'') <> IFNULL(NEW.`endowment_site_listed_as_218`,'') OR IFNULL(OLD.`wls_listed_as_219`,'') <> IFNULL(NEW.`wls_listed_as_219`,'') OR IFNULL(OLD.`benefactor_page_last_updated_238`,'') <> IFNULL(NEW.`benefactor_page_last_updated_238`,'') OR IFNULL(OLD.`wls_listing_last_updated`,'') <> IFNULL(NEW.`wls_listing_last_updated`,'') OR IFNULL(OLD.`endowment_listing_last_updated`,'') <> IFNULL(NEW.`endowment_listing_last_updated`,'') OR IFNULL(OLD.`benefactor_level_279`,'') <> IFNULL(NEW.`benefactor_level_279`,'') OR IFNULL(OLD.`endowment_level_286`,'') <> IFNULL(NEW.`endowment_level_286`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_value_anonymous_ (`id`, `entity_id`, `listed_as_anonymous`, `listed_on_benefactor_page_as_142`, `benefactor_order_as_168`, `endowment_site_listed_as_218`, `wls_listed_as_219`, `benefactor_page_last_updated_238`, `wls_listing_last_updated`, `endowment_listing_last_updated`, `benefactor_level_279`, `endowment_level_286`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`entity_id`, NEW.`listed_as_anonymous`, NEW.`listed_on_benefactor_page_as_142`, NEW.`benefactor_order_as_168`, NEW.`endowment_site_listed_as_218`, NEW.`wls_listed_as_219`, NEW.`benefactor_page_last_updated_238`, NEW.`wls_listing_last_updated`, NEW.`endowment_listing_last_updated`, NEW.`benefactor_level_279`, NEW.`endowment_level_286`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF;
UPDATE civicrm_contact SET modified_date = CURRENT_TIMESTAMP WHERE id = NEW.entity_id; END //

CREATE TRIGGER civicrm_value_anonymous__after_delete after delete ON civicrm_value_anonymous_ FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_value_anonymous_ (`id`, `entity_id`, `listed_as_anonymous`, `listed_on_benefactor_page_as_142`, `benefactor_order_as_168`, `endowment_site_listed_as_218`, `wls_listed_as_219`, `benefactor_page_last_updated_238`, `wls_listing_last_updated`, `endowment_listing_last_updated`, `benefactor_level_279`, `endowment_level_286`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`entity_id`, OLD.`listed_as_anonymous`, OLD.`listed_on_benefactor_page_as_142`, OLD.`benefactor_order_as_168`, OLD.`endowment_site_listed_as_218`, OLD.`wls_listed_as_219`, OLD.`benefactor_page_last_updated_238`, OLD.`wls_listing_last_updated`, OLD.`endowment_listing_last_updated`, OLD.`benefactor_level_279`, OLD.`endowment_level_286`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF;
UPDATE civicrm_contact SET modified_date = CURRENT_TIMESTAMP WHERE id = OLD.entity_id; END //

CREATE TRIGGER civicrm_value_assistant_15_after_insert after insert ON civicrm_value_assistant_15 FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_value_assistant_15 (`id`, `entity_id`, `assitant_name_70`, `email_71`, `assistant_phone_number_135`, `assistant_email_287`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`entity_id`, NEW.`assitant_name_70`, NEW.`email_71`, NEW.`assistant_phone_number_135`, NEW.`assistant_email_287`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF;
UPDATE civicrm_contact SET modified_date = CURRENT_TIMESTAMP WHERE id = NEW.entity_id; END //

CREATE TRIGGER civicrm_value_assistant_15_after_update after update ON civicrm_value_assistant_15 FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`entity_id`,'') <> IFNULL(NEW.`entity_id`,'') OR IFNULL(OLD.`assitant_name_70`,'') <> IFNULL(NEW.`assitant_name_70`,'') OR IFNULL(OLD.`email_71`,'') <> IFNULL(NEW.`email_71`,'') OR IFNULL(OLD.`assistant_phone_number_135`,'') <> IFNULL(NEW.`assistant_phone_number_135`,'') OR IFNULL(OLD.`assistant_email_287`,'') <> IFNULL(NEW.`assistant_email_287`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_value_assistant_15 (`id`, `entity_id`, `assitant_name_70`, `email_71`, `assistant_phone_number_135`, `assistant_email_287`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`entity_id`, NEW.`assitant_name_70`, NEW.`email_71`, NEW.`assistant_phone_number_135`, NEW.`assistant_email_287`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF;
UPDATE civicrm_contact SET modified_date = CURRENT_TIMESTAMP WHERE id = NEW.entity_id; END //

CREATE TRIGGER civicrm_value_assistant_15_after_delete after delete ON civicrm_value_assistant_15 FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_value_assistant_15 (`id`, `entity_id`, `assitant_name_70`, `email_71`, `assistant_phone_number_135`, `assistant_email_287`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`entity_id`, OLD.`assitant_name_70`, OLD.`email_71`, OLD.`assistant_phone_number_135`, OLD.`assistant_email_287`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF;
UPDATE civicrm_contact SET modified_date = CURRENT_TIMESTAMP WHERE id = OLD.entity_id; END //

CREATE TRIGGER civicrm_value_email_after_insert after insert ON civicrm_value_email FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_value_email (`id`, `entity_id`, `snooze_date`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`entity_id`, NEW.`snooze_date`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_value_email_after_update after update ON civicrm_value_email FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`entity_id`,'') <> IFNULL(NEW.`entity_id`,'') OR IFNULL(OLD.`snooze_date`,'') <> IFNULL(NEW.`snooze_date`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_value_email (`id`, `entity_id`, `snooze_date`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`entity_id`, NEW.`snooze_date`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_value_email_after_delete after delete ON civicrm_value_email FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_value_email (`id`, `entity_id`, `snooze_date`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`entity_id`, OLD.`snooze_date`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_value_endowment_yea_28_after_insert after insert ON civicrm_value_endowment_yea_28 FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_value_endowment_yea_28 (`id`, `entity_id`, `appeal_ask_amount_304`, `solicitor_306`, `appeal_type_307`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`entity_id`, NEW.`appeal_ask_amount_304`, NEW.`solicitor_306`, NEW.`appeal_type_307`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF;
UPDATE civicrm_activity SET modified_date = CURRENT_TIMESTAMP WHERE id = NEW.entity_id; END //

CREATE TRIGGER civicrm_value_endowment_yea_28_after_update after update ON civicrm_value_endowment_yea_28 FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`entity_id`,'') <> IFNULL(NEW.`entity_id`,'') OR IFNULL(OLD.`appeal_ask_amount_304`,'') <> IFNULL(NEW.`appeal_ask_amount_304`,'') OR IFNULL(OLD.`solicitor_306`,'') <> IFNULL(NEW.`solicitor_306`,'') OR IFNULL(OLD.`appeal_type_307`,'') <> IFNULL(NEW.`appeal_type_307`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_value_endowment_yea_28 (`id`, `entity_id`, `appeal_ask_amount_304`, `solicitor_306`, `appeal_type_307`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`entity_id`, NEW.`appeal_ask_amount_304`, NEW.`solicitor_306`, NEW.`appeal_type_307`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF;
UPDATE civicrm_activity SET modified_date = CURRENT_TIMESTAMP WHERE id = NEW.entity_id; END //

CREATE TRIGGER civicrm_value_endowment_yea_28_after_delete after delete ON civicrm_value_endowment_yea_28 FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_value_endowment_yea_28 (`id`, `entity_id`, `appeal_ask_amount_304`, `solicitor_306`, `appeal_type_307`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`entity_id`, OLD.`appeal_ask_amount_304`, OLD.`solicitor_306`, OLD.`appeal_type_307`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF;
UPDATE civicrm_activity SET modified_date = CURRENT_TIMESTAMP WHERE id = OLD.entity_id; END //

CREATE TRIGGER civicrm_value_group_metadata_after_insert after insert ON civicrm_value_group_metadata FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_value_group_metadata (`id`, `entity_id`, `remote_group_identifier`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`entity_id`, NEW.`remote_group_identifier`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_value_group_metadata_after_update after update ON civicrm_value_group_metadata FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`entity_id`,'') <> IFNULL(NEW.`entity_id`,'') OR IFNULL(OLD.`remote_group_identifier`,'') <> IFNULL(NEW.`remote_group_identifier`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_value_group_metadata (`id`, `entity_id`, `remote_group_identifier`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`entity_id`, NEW.`remote_group_identifier`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_value_group_metadata_after_delete after delete ON civicrm_value_group_metadata FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_value_group_metadata (`id`, `entity_id`, `remote_group_identifier`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`entity_id`, OLD.`remote_group_identifier`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_value_mailing_data_21_after_insert after insert ON civicrm_value_mailing_data_21 FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_value_mailing_data_21 (`id`, `entity_id`, `query_criteria_220`, `query_string`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`entity_id`, NEW.`query_criteria_220`, NEW.`query_string`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_value_mailing_data_21_after_update after update ON civicrm_value_mailing_data_21 FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`entity_id`,'') <> IFNULL(NEW.`entity_id`,'') OR IFNULL(OLD.`query_criteria_220`,'') <> IFNULL(NEW.`query_criteria_220`,'') OR IFNULL(OLD.`query_string`,'') <> IFNULL(NEW.`query_string`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_value_mailing_data_21 (`id`, `entity_id`, `query_criteria_220`, `query_string`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`entity_id`, NEW.`query_criteria_220`, NEW.`query_string`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_value_mailing_data_21_after_delete after delete ON civicrm_value_mailing_data_21 FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_value_mailing_data_21 (`id`, `entity_id`, `query_criteria_220`, `query_string`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`entity_id`, OLD.`query_criteria_220`, OLD.`query_string`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_value_major_gifts_y_27_after_insert after insert ON civicrm_value_major_gifts_y_27 FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_value_major_gifts_y_27 (`id`, `entity_id`, `appeal_ask_amount_303`, `solicitor_305`, `appeal_type_309`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`entity_id`, NEW.`appeal_ask_amount_303`, NEW.`solicitor_305`, NEW.`appeal_type_309`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF;
UPDATE civicrm_activity SET modified_date = CURRENT_TIMESTAMP WHERE id = NEW.entity_id; END //

CREATE TRIGGER civicrm_value_major_gifts_y_27_after_update after update ON civicrm_value_major_gifts_y_27 FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`entity_id`,'') <> IFNULL(NEW.`entity_id`,'') OR IFNULL(OLD.`appeal_ask_amount_303`,'') <> IFNULL(NEW.`appeal_ask_amount_303`,'') OR IFNULL(OLD.`solicitor_305`,'') <> IFNULL(NEW.`solicitor_305`,'') OR IFNULL(OLD.`appeal_type_309`,'') <> IFNULL(NEW.`appeal_type_309`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_value_major_gifts_y_27 (`id`, `entity_id`, `appeal_ask_amount_303`, `solicitor_305`, `appeal_type_309`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`entity_id`, NEW.`appeal_ask_amount_303`, NEW.`solicitor_305`, NEW.`appeal_type_309`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF;
UPDATE civicrm_activity SET modified_date = CURRENT_TIMESTAMP WHERE id = NEW.entity_id; END //

CREATE TRIGGER civicrm_value_major_gifts_y_27_after_delete after delete ON civicrm_value_major_gifts_y_27 FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_value_major_gifts_y_27 (`id`, `entity_id`, `appeal_ask_amount_303`, `solicitor_305`, `appeal_type_309`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`entity_id`, OLD.`appeal_ask_amount_303`, OLD.`solicitor_305`, OLD.`appeal_type_309`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF;
UPDATE civicrm_activity SET modified_date = CURRENT_TIMESTAMP WHERE id = OLD.entity_id; END //

CREATE TRIGGER civicrm_value_matching_gift_after_insert after insert ON civicrm_value_matching_gift FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_value_matching_gift (`id`, `entity_id`, `matching_gifts_provider_id`, `matching_gifts_provider_info_url`, `name_from_matching_gift_db`, `guide_url`, `online_form_url`, `minimum_gift_matched_usd`, `match_policy_last_updated`, `suppress_from_employer_field`, `subsidiaries`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`entity_id`, NEW.`matching_gifts_provider_id`, NEW.`matching_gifts_provider_info_url`, NEW.`name_from_matching_gift_db`, NEW.`guide_url`, NEW.`online_form_url`, NEW.`minimum_gift_matched_usd`, NEW.`match_policy_last_updated`, NEW.`suppress_from_employer_field`, NEW.`subsidiaries`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF;
UPDATE civicrm_contact SET modified_date = CURRENT_TIMESTAMP WHERE id = NEW.entity_id; END //

CREATE TRIGGER civicrm_value_matching_gift_after_update after update ON civicrm_value_matching_gift FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`entity_id`,'') <> IFNULL(NEW.`entity_id`,'') OR IFNULL(OLD.`matching_gifts_provider_id`,'') <> IFNULL(NEW.`matching_gifts_provider_id`,'') OR IFNULL(OLD.`matching_gifts_provider_info_url`,'') <> IFNULL(NEW.`matching_gifts_provider_info_url`,'') OR IFNULL(OLD.`name_from_matching_gift_db`,'') <> IFNULL(NEW.`name_from_matching_gift_db`,'') OR IFNULL(OLD.`guide_url`,'') <> IFNULL(NEW.`guide_url`,'') OR IFNULL(OLD.`online_form_url`,'') <> IFNULL(NEW.`online_form_url`,'') OR IFNULL(OLD.`minimum_gift_matched_usd`,'') <> IFNULL(NEW.`minimum_gift_matched_usd`,'') OR IFNULL(OLD.`match_policy_last_updated`,'') <> IFNULL(NEW.`match_policy_last_updated`,'') OR IFNULL(OLD.`suppress_from_employer_field`,'') <> IFNULL(NEW.`suppress_from_employer_field`,'') OR IFNULL(OLD.`subsidiaries`,'') <> IFNULL(NEW.`subsidiaries`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_value_matching_gift (`id`, `entity_id`, `matching_gifts_provider_id`, `matching_gifts_provider_info_url`, `name_from_matching_gift_db`, `guide_url`, `online_form_url`, `minimum_gift_matched_usd`, `match_policy_last_updated`, `suppress_from_employer_field`, `subsidiaries`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`entity_id`, NEW.`matching_gifts_provider_id`, NEW.`matching_gifts_provider_info_url`, NEW.`name_from_matching_gift_db`, NEW.`guide_url`, NEW.`online_form_url`, NEW.`minimum_gift_matched_usd`, NEW.`match_policy_last_updated`, NEW.`suppress_from_employer_field`, NEW.`subsidiaries`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF;
UPDATE civicrm_contact SET modified_date = CURRENT_TIMESTAMP WHERE id = NEW.entity_id; END //

CREATE TRIGGER civicrm_value_matching_gift_after_delete after delete ON civicrm_value_matching_gift FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_value_matching_gift (`id`, `entity_id`, `matching_gifts_provider_id`, `matching_gifts_provider_info_url`, `name_from_matching_gift_db`, `guide_url`, `online_form_url`, `minimum_gift_matched_usd`, `match_policy_last_updated`, `suppress_from_employer_field`, `subsidiaries`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`entity_id`, OLD.`matching_gifts_provider_id`, OLD.`matching_gifts_provider_info_url`, OLD.`name_from_matching_gift_db`, OLD.`guide_url`, OLD.`online_form_url`, OLD.`minimum_gift_matched_usd`, OLD.`match_policy_last_updated`, OLD.`suppress_from_employer_field`, OLD.`subsidiaries`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF;
UPDATE civicrm_contact SET modified_date = CURRENT_TIMESTAMP WHERE id = OLD.entity_id; END //

CREATE TRIGGER civicrm_value_matching_gift_29_after_insert after insert ON civicrm_value_matching_gift_29 FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_value_matching_gift_29 (`id`, `entity_id`, `date_verified_312`, `match_amount_313`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`entity_id`, NEW.`date_verified_312`, NEW.`match_amount_313`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_value_matching_gift_29_after_update after update ON civicrm_value_matching_gift_29 FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`entity_id`,'') <> IFNULL(NEW.`entity_id`,'') OR IFNULL(OLD.`date_verified_312`,'') <> IFNULL(NEW.`date_verified_312`,'') OR IFNULL(OLD.`match_amount_313`,'') <> IFNULL(NEW.`match_amount_313`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_value_matching_gift_29 (`id`, `entity_id`, `date_verified_312`, `match_amount_313`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`entity_id`, NEW.`date_verified_312`, NEW.`match_amount_313`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_value_matching_gift_29_after_delete after delete ON civicrm_value_matching_gift_29 FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_value_matching_gift_29 (`id`, `entity_id`, `date_verified_312`, `match_amount_313`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`entity_id`, OLD.`date_verified_312`, OLD.`match_amount_313`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_value_organization_contact_14_after_insert after insert ON civicrm_value_organization_contact_14 FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_value_organization_contact_14 (`id`, `entity_id`, `name_56`, `contact_information_57`, `title_58`, `street_address_59`, `supplimental_street_address_60`, `city_61`, `zip_code_62`, `state_63`, `country_64`, `phone_65`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`entity_id`, NEW.`name_56`, NEW.`contact_information_57`, NEW.`title_58`, NEW.`street_address_59`, NEW.`supplimental_street_address_60`, NEW.`city_61`, NEW.`zip_code_62`, NEW.`state_63`, NEW.`country_64`, NEW.`phone_65`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF;
UPDATE civicrm_contact SET modified_date = CURRENT_TIMESTAMP WHERE id = NEW.entity_id; END //

CREATE TRIGGER civicrm_value_organization_contact_14_after_update after update ON civicrm_value_organization_contact_14 FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`entity_id`,'') <> IFNULL(NEW.`entity_id`,'') OR IFNULL(OLD.`name_56`,'') <> IFNULL(NEW.`name_56`,'') OR IFNULL(OLD.`contact_information_57`,'') <> IFNULL(NEW.`contact_information_57`,'') OR IFNULL(OLD.`title_58`,'') <> IFNULL(NEW.`title_58`,'') OR IFNULL(OLD.`street_address_59`,'') <> IFNULL(NEW.`street_address_59`,'') OR IFNULL(OLD.`supplimental_street_address_60`,'') <> IFNULL(NEW.`supplimental_street_address_60`,'') OR IFNULL(OLD.`city_61`,'') <> IFNULL(NEW.`city_61`,'') OR IFNULL(OLD.`zip_code_62`,'') <> IFNULL(NEW.`zip_code_62`,'') OR IFNULL(OLD.`state_63`,'') <> IFNULL(NEW.`state_63`,'') OR IFNULL(OLD.`country_64`,'') <> IFNULL(NEW.`country_64`,'') OR IFNULL(OLD.`phone_65`,'') <> IFNULL(NEW.`phone_65`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_value_organization_contact_14 (`id`, `entity_id`, `name_56`, `contact_information_57`, `title_58`, `street_address_59`, `supplimental_street_address_60`, `city_61`, `zip_code_62`, `state_63`, `country_64`, `phone_65`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`entity_id`, NEW.`name_56`, NEW.`contact_information_57`, NEW.`title_58`, NEW.`street_address_59`, NEW.`supplimental_street_address_60`, NEW.`city_61`, NEW.`zip_code_62`, NEW.`state_63`, NEW.`country_64`, NEW.`phone_65`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF;
UPDATE civicrm_contact SET modified_date = CURRENT_TIMESTAMP WHERE id = NEW.entity_id; END //

CREATE TRIGGER civicrm_value_organization_contact_14_after_delete after delete ON civicrm_value_organization_contact_14 FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_value_organization_contact_14 (`id`, `entity_id`, `name_56`, `contact_information_57`, `title_58`, `street_address_59`, `supplimental_street_address_60`, `city_61`, `zip_code_62`, `state_63`, `country_64`, `phone_65`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`entity_id`, OLD.`name_56`, OLD.`contact_information_57`, OLD.`title_58`, OLD.`street_address_59`, OLD.`supplimental_street_address_60`, OLD.`city_61`, OLD.`zip_code_62`, OLD.`state_63`, OLD.`country_64`, OLD.`phone_65`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF;
UPDATE civicrm_contact SET modified_date = CURRENT_TIMESTAMP WHERE id = OLD.entity_id; END //

CREATE TRIGGER civicrm_value_partner_19_after_insert after insert ON civicrm_value_partner_19 FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_value_partner_19 (`id`, `entity_id`, `partner_165`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`entity_id`, NEW.`partner_165`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF;
UPDATE civicrm_contact SET modified_date = CURRENT_TIMESTAMP WHERE id = NEW.entity_id; END //

CREATE TRIGGER civicrm_value_partner_19_after_update after update ON civicrm_value_partner_19 FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`entity_id`,'') <> IFNULL(NEW.`entity_id`,'') OR IFNULL(OLD.`partner_165`,'') <> IFNULL(NEW.`partner_165`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_value_partner_19 (`id`, `entity_id`, `partner_165`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`entity_id`, NEW.`partner_165`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF;
UPDATE civicrm_contact SET modified_date = CURRENT_TIMESTAMP WHERE id = NEW.entity_id; END //

CREATE TRIGGER civicrm_value_partner_19_after_delete after delete ON civicrm_value_partner_19 FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_value_partner_19 (`id`, `entity_id`, `partner_165`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`entity_id`, OLD.`partner_165`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF;
UPDATE civicrm_contact SET modified_date = CURRENT_TIMESTAMP WHERE id = OLD.entity_id; END //

CREATE TRIGGER civicrm_value_pg_commitment_25_after_insert after insert ON civicrm_value_pg_commitment_25 FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_value_pg_commitment_25 (`id`, `entity_id`, `estimated_pledge_amount_288`, `pledge_source_289`, `type_of_commitment_291`, `commitment_date_293`, `country_of_origin1_294`, `commitment_campaign_295`, `is_the_commitment_a_contingent_b_296`, `commitment_is_a_mirrored_will__297`, `commitment_confirmed__298`, `commitment_confirmation_date_299`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`entity_id`, NEW.`estimated_pledge_amount_288`, NEW.`pledge_source_289`, NEW.`type_of_commitment_291`, NEW.`commitment_date_293`, NEW.`country_of_origin1_294`, NEW.`commitment_campaign_295`, NEW.`is_the_commitment_a_contingent_b_296`, NEW.`commitment_is_a_mirrored_will__297`, NEW.`commitment_confirmed__298`, NEW.`commitment_confirmation_date_299`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF;
UPDATE civicrm_activity SET modified_date = CURRENT_TIMESTAMP WHERE id = NEW.entity_id; END //

CREATE TRIGGER civicrm_value_pg_commitment_25_after_update after update ON civicrm_value_pg_commitment_25 FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`entity_id`,'') <> IFNULL(NEW.`entity_id`,'') OR IFNULL(OLD.`estimated_pledge_amount_288`,'') <> IFNULL(NEW.`estimated_pledge_amount_288`,'') OR IFNULL(OLD.`pledge_source_289`,'') <> IFNULL(NEW.`pledge_source_289`,'') OR IFNULL(OLD.`type_of_commitment_291`,'') <> IFNULL(NEW.`type_of_commitment_291`,'') OR IFNULL(OLD.`commitment_date_293`,'') <> IFNULL(NEW.`commitment_date_293`,'') OR IFNULL(OLD.`country_of_origin1_294`,'') <> IFNULL(NEW.`country_of_origin1_294`,'') OR IFNULL(OLD.`commitment_campaign_295`,'') <> IFNULL(NEW.`commitment_campaign_295`,'') OR IFNULL(OLD.`is_the_commitment_a_contingent_b_296`,'') <> IFNULL(NEW.`is_the_commitment_a_contingent_b_296`,'') OR IFNULL(OLD.`commitment_is_a_mirrored_will__297`,'') <> IFNULL(NEW.`commitment_is_a_mirrored_will__297`,'') OR IFNULL(OLD.`commitment_confirmed__298`,'') <> IFNULL(NEW.`commitment_confirmed__298`,'') OR IFNULL(OLD.`commitment_confirmation_date_299`,'') <> IFNULL(NEW.`commitment_confirmation_date_299`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_value_pg_commitment_25 (`id`, `entity_id`, `estimated_pledge_amount_288`, `pledge_source_289`, `type_of_commitment_291`, `commitment_date_293`, `country_of_origin1_294`, `commitment_campaign_295`, `is_the_commitment_a_contingent_b_296`, `commitment_is_a_mirrored_will__297`, `commitment_confirmed__298`, `commitment_confirmation_date_299`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`entity_id`, NEW.`estimated_pledge_amount_288`, NEW.`pledge_source_289`, NEW.`type_of_commitment_291`, NEW.`commitment_date_293`, NEW.`country_of_origin1_294`, NEW.`commitment_campaign_295`, NEW.`is_the_commitment_a_contingent_b_296`, NEW.`commitment_is_a_mirrored_will__297`, NEW.`commitment_confirmed__298`, NEW.`commitment_confirmation_date_299`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF;
UPDATE civicrm_activity SET modified_date = CURRENT_TIMESTAMP WHERE id = NEW.entity_id; END //

CREATE TRIGGER civicrm_value_pg_commitment_25_after_delete after delete ON civicrm_value_pg_commitment_25 FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_value_pg_commitment_25 (`id`, `entity_id`, `estimated_pledge_amount_288`, `pledge_source_289`, `type_of_commitment_291`, `commitment_date_293`, `country_of_origin1_294`, `commitment_campaign_295`, `is_the_commitment_a_contingent_b_296`, `commitment_is_a_mirrored_will__297`, `commitment_confirmed__298`, `commitment_confirmation_date_299`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`entity_id`, OLD.`estimated_pledge_amount_288`, OLD.`pledge_source_289`, OLD.`type_of_commitment_291`, OLD.`commitment_date_293`, OLD.`country_of_origin1_294`, OLD.`commitment_campaign_295`, OLD.`is_the_commitment_a_contingent_b_296`, OLD.`commitment_is_a_mirrored_will__297`, OLD.`commitment_confirmed__298`, OLD.`commitment_confirmation_date_299`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF;
UPDATE civicrm_activity SET modified_date = CURRENT_TIMESTAMP WHERE id = OLD.entity_id; END //

CREATE TRIGGER civicrm_value_pg_inquiry_ac_26_after_insert after insert ON civicrm_value_pg_inquiry_ac_26 FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_value_pg_inquiry_ac_26 (`id`, `entity_id`, `country_of_origin_292`, `inquiry_date_300`, `inquiry_campaign_301`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`entity_id`, NEW.`country_of_origin_292`, NEW.`inquiry_date_300`, NEW.`inquiry_campaign_301`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF;
UPDATE civicrm_activity SET modified_date = CURRENT_TIMESTAMP WHERE id = NEW.entity_id; END //

CREATE TRIGGER civicrm_value_pg_inquiry_ac_26_after_update after update ON civicrm_value_pg_inquiry_ac_26 FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`entity_id`,'') <> IFNULL(NEW.`entity_id`,'') OR IFNULL(OLD.`country_of_origin_292`,'') <> IFNULL(NEW.`country_of_origin_292`,'') OR IFNULL(OLD.`inquiry_date_300`,'') <> IFNULL(NEW.`inquiry_date_300`,'') OR IFNULL(OLD.`inquiry_campaign_301`,'') <> IFNULL(NEW.`inquiry_campaign_301`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_value_pg_inquiry_ac_26 (`id`, `entity_id`, `country_of_origin_292`, `inquiry_date_300`, `inquiry_campaign_301`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`entity_id`, NEW.`country_of_origin_292`, NEW.`inquiry_date_300`, NEW.`inquiry_campaign_301`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF;
UPDATE civicrm_activity SET modified_date = CURRENT_TIMESTAMP WHERE id = NEW.entity_id; END //

CREATE TRIGGER civicrm_value_pg_inquiry_ac_26_after_delete after delete ON civicrm_value_pg_inquiry_ac_26 FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_value_pg_inquiry_ac_26 (`id`, `entity_id`, `country_of_origin_292`, `inquiry_date_300`, `inquiry_campaign_301`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`entity_id`, OLD.`country_of_origin_292`, OLD.`inquiry_date_300`, OLD.`inquiry_campaign_301`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF;
UPDATE civicrm_activity SET modified_date = CURRENT_TIMESTAMP WHERE id = OLD.entity_id; END //

CREATE TRIGGER civicrm_value_relationship__20_after_insert after insert ON civicrm_value_relationship__20 FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_value_relationship__20 (`id`, `entity_id`, `display_block_on_contact_summary_166`, `exclude_expired_relationships_236`, `exclude_pending_relationships_237`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`entity_id`, NEW.`display_block_on_contact_summary_166`, NEW.`exclude_expired_relationships_236`, NEW.`exclude_pending_relationships_237`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_value_relationship__20_after_update after update ON civicrm_value_relationship__20 FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`entity_id`,'') <> IFNULL(NEW.`entity_id`,'') OR IFNULL(OLD.`display_block_on_contact_summary_166`,'') <> IFNULL(NEW.`display_block_on_contact_summary_166`,'') OR IFNULL(OLD.`exclude_expired_relationships_236`,'') <> IFNULL(NEW.`exclude_expired_relationships_236`,'') OR IFNULL(OLD.`exclude_pending_relationships_237`,'') <> IFNULL(NEW.`exclude_pending_relationships_237`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_value_relationship__20 (`id`, `entity_id`, `display_block_on_contact_summary_166`, `exclude_expired_relationships_236`, `exclude_pending_relationships_237`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`entity_id`, NEW.`display_block_on_contact_summary_166`, NEW.`exclude_expired_relationships_236`, NEW.`exclude_pending_relationships_237`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_value_relationship__20_after_delete after delete ON civicrm_value_relationship__20 FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_value_relationship__20 (`id`, `entity_id`, `display_block_on_contact_summary_166`, `exclude_expired_relationships_236`, `exclude_pending_relationships_237`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`entity_id`, OLD.`display_block_on_contact_summary_166`, OLD.`exclude_expired_relationships_236`, OLD.`exclude_pending_relationships_237`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_value_relationship_metadata_after_insert after insert ON civicrm_value_relationship_metadata FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_value_relationship_metadata (`id`, `entity_id`, `provided_by_donor`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`entity_id`, NEW.`provided_by_donor`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_value_relationship_metadata_after_update after update ON civicrm_value_relationship_metadata FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`entity_id`,'') <> IFNULL(NEW.`entity_id`,'') OR IFNULL(OLD.`provided_by_donor`,'') <> IFNULL(NEW.`provided_by_donor`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_value_relationship_metadata (`id`, `entity_id`, `provided_by_donor`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`entity_id`, NEW.`provided_by_donor`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_value_relationship_metadata_after_delete after delete ON civicrm_value_relationship_metadata FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_value_relationship_metadata (`id`, `entity_id`, `provided_by_donor`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`entity_id`, OLD.`provided_by_donor`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_website_after_insert after insert ON civicrm_website FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_website (`id`, `contact_id`, `url`, `website_type_id`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`contact_id`, NEW.`url`, NEW.`website_type_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF;
UPDATE civicrm_contact SET modified_date = CURRENT_TIMESTAMP WHERE id = NEW.contact_id; END //

CREATE TRIGGER civicrm_website_after_update after update ON civicrm_website FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`contact_id`,'') <> IFNULL(NEW.`contact_id`,'') OR IFNULL(OLD.`url`,'') <> IFNULL(NEW.`url`,'') OR IFNULL(OLD.`website_type_id`,'') <> IFNULL(NEW.`website_type_id`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_website (`id`, `contact_id`, `url`, `website_type_id`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`contact_id`, NEW.`url`, NEW.`website_type_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF;
UPDATE civicrm_contact SET modified_date = CURRENT_TIMESTAMP WHERE id = NEW.contact_id; END //

CREATE TRIGGER civicrm_website_after_delete after delete ON civicrm_website FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_website (`id`, `contact_id`, `url`, `website_type_id`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`contact_id`, OLD.`url`, OLD.`website_type_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF;
UPDATE civicrm_contact SET modified_date = CURRENT_TIMESTAMP WHERE id = OLD.contact_id; END //

CREATE TRIGGER civicrm_word_replacement_after_insert after insert ON civicrm_word_replacement FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_word_replacement (`id`, `find_word`, `replace_word`, `is_active`, `match_type`, `domain_id`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`find_word`, NEW.`replace_word`, NEW.`is_active`, NEW.`match_type`, NEW.`domain_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_word_replacement_after_update after update ON civicrm_word_replacement FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`find_word`,'') <> IFNULL(NEW.`find_word`,'') OR IFNULL(OLD.`replace_word`,'') <> IFNULL(NEW.`replace_word`,'') OR IFNULL(OLD.`is_active`,'') <> IFNULL(NEW.`is_active`,'') OR IFNULL(OLD.`match_type`,'') <> IFNULL(NEW.`match_type`,'') OR IFNULL(OLD.`domain_id`,'') <> IFNULL(NEW.`domain_id`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_word_replacement (`id`, `find_word`, `replace_word`, `is_active`, `match_type`, `domain_id`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`find_word`, NEW.`replace_word`, NEW.`is_active`, NEW.`match_type`, NEW.`domain_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_word_replacement_after_delete after delete ON civicrm_word_replacement FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_word_replacement (`id`, `find_word`, `replace_word`, `is_active`, `match_type`, `domain_id`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`find_word`, OLD.`replace_word`, OLD.`is_active`, OLD.`match_type`, OLD.`domain_id`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER civicrm_worldregion_after_insert after insert ON civicrm_worldregion FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_worldregion (`id`, `name`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`name`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER civicrm_worldregion_after_update after update ON civicrm_worldregion FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`name`,'') <> IFNULL(NEW.`name`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_civicrm_worldregion (`id`, `name`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`name`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER civicrm_worldregion_after_delete after delete ON civicrm_worldregion FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_civicrm_worldregion (`id`, `name`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`name`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //

CREATE TRIGGER wmf_contribution_extra_after_insert after insert ON wmf_contribution_extra FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_wmf_contribution_extra (`id`, `entity_id`, `settlement_date`, `total_usd`, `gateway_account`, `gateway`, `gateway_txn_id`, `gateway_status_raw`, `gateway_date`, `original_amount`, `original_currency`, `settlement_usd`, `settlement_currency`, `deposit_date`, `deposit_usd`, `deposit_currency`, `parent_contribution_id`, `finance_only`, `postmark_date`, `source_name`, `source_type`, `source_host`, `source_run_id`, `source_version`, `source_enqueued_time`, `no_thank_you`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`entity_id`, NEW.`settlement_date`, NEW.`total_usd`, NEW.`gateway_account`, NEW.`gateway`, NEW.`gateway_txn_id`, NEW.`gateway_status_raw`, NEW.`gateway_date`, NEW.`original_amount`, NEW.`original_currency`, NEW.`settlement_usd`, NEW.`settlement_currency`, NEW.`deposit_date`, NEW.`deposit_usd`, NEW.`deposit_currency`, NEW.`parent_contribution_id`, NEW.`finance_only`, NEW.`postmark_date`, NEW.`source_name`, NEW.`source_type`, NEW.`source_host`, NEW.`source_run_id`, NEW.`source_version`, NEW.`source_enqueued_time`, NEW.`no_thank_you`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF; END //

CREATE TRIGGER wmf_contribution_extra_after_update after update ON wmf_contribution_extra FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`entity_id`,'') <> IFNULL(NEW.`entity_id`,'') OR IFNULL(OLD.`settlement_date`,'') <> IFNULL(NEW.`settlement_date`,'') OR IFNULL(OLD.`total_usd`,'') <> IFNULL(NEW.`total_usd`,'') OR IFNULL(OLD.`gateway_account`,'') <> IFNULL(NEW.`gateway_account`,'') OR IFNULL(OLD.`gateway`,'') <> IFNULL(NEW.`gateway`,'') OR IFNULL(OLD.`gateway_txn_id`,'') <> IFNULL(NEW.`gateway_txn_id`,'') OR IFNULL(OLD.`gateway_status_raw`,'') <> IFNULL(NEW.`gateway_status_raw`,'') OR IFNULL(OLD.`gateway_date`,'') <> IFNULL(NEW.`gateway_date`,'') OR IFNULL(OLD.`original_amount`,'') <> IFNULL(NEW.`original_amount`,'') OR IFNULL(OLD.`original_currency`,'') <> IFNULL(NEW.`original_currency`,'') OR IFNULL(OLD.`settlement_usd`,'') <> IFNULL(NEW.`settlement_usd`,'') OR IFNULL(OLD.`settlement_currency`,'') <> IFNULL(NEW.`settlement_currency`,'') OR IFNULL(OLD.`deposit_date`,'') <> IFNULL(NEW.`deposit_date`,'') OR IFNULL(OLD.`deposit_usd`,'') <> IFNULL(NEW.`deposit_usd`,'') OR IFNULL(OLD.`deposit_currency`,'') <> IFNULL(NEW.`deposit_currency`,'') OR IFNULL(OLD.`parent_contribution_id`,'') <> IFNULL(NEW.`parent_contribution_id`,'') OR IFNULL(OLD.`finance_only`,'') <> IFNULL(NEW.`finance_only`,'') OR IFNULL(OLD.`postmark_date`,'') <> IFNULL(NEW.`postmark_date`,'') OR IFNULL(OLD.`source_name`,'') <> IFNULL(NEW.`source_name`,'') OR IFNULL(OLD.`source_type`,'') <> IFNULL(NEW.`source_type`,'') OR IFNULL(OLD.`source_host`,'') <> IFNULL(NEW.`source_host`,'') OR IFNULL(OLD.`source_run_id`,'') <> IFNULL(NEW.`source_run_id`,'') OR IFNULL(OLD.`source_version`,'') <> IFNULL(NEW.`source_version`,'') OR IFNULL(OLD.`source_enqueued_time`,'') <> IFNULL(NEW.`source_enqueued_time`,'') OR IFNULL(OLD.`no_thank_you`,'') <> IFNULL(NEW.`no_thank_you`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_wmf_contribution_extra (`id`, `entity_id`, `settlement_date`, `total_usd`, `gateway_account`, `gateway`, `gateway_txn_id`, `gateway_status_raw`, `gateway_date`, `original_amount`, `original_currency`, `settlement_usd`, `settlement_currency`, `deposit_date`, `deposit_usd`, `deposit_currency`, `parent_contribution_id`, `finance_only`, `postmark_date`, `source_name`, `source_type`, `source_host`, `source_run_id`, `source_version`, `source_enqueued_time`, `no_thank_you`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`entity_id`, NEW.`settlement_date`, NEW.`total_usd`, NEW.`gateway_account`, NEW.`gateway`, NEW.`gateway_txn_id`, NEW.`gateway_status_raw`, NEW.`gateway_date`, NEW.`original_amount`, NEW.`original_currency`, NEW.`settlement_usd`, NEW.`settlement_currency`, NEW.`deposit_date`, NEW.`deposit_usd`, NEW.`deposit_currency`, NEW.`parent_contribution_id`, NEW.`finance_only`, NEW.`postmark_date`, NEW.`source_name`, NEW.`source_type`, NEW.`source_host`, NEW.`source_run_id`, NEW.`source_version`, NEW.`source_enqueued_time`, NEW.`no_thank_you`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF; END //

CREATE TRIGGER wmf_contribution_extra_after_delete after delete ON wmf_contribution_extra FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_wmf_contribution_extra (`id`, `entity_id`, `settlement_date`, `total_usd`, `gateway_account`, `gateway`, `gateway_txn_id`, `gateway_status_raw`, `gateway_date`, `original_amount`, `original_currency`, `settlement_usd`, `settlement_currency`, `deposit_date`, `deposit_usd`, `deposit_currency`, `parent_contribution_id`, `finance_only`, `postmark_date`, `source_name`, `source_type`, `source_host`, `source_run_id`, `source_version`, `source_enqueued_time`, `no_thank_you`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`entity_id`, OLD.`settlement_date`, OLD.`total_usd`, OLD.`gateway_account`, OLD.`gateway`, OLD.`gateway_txn_id`, OLD.`gateway_status_raw`, OLD.`gateway_date`, OLD.`original_amount`, OLD.`original_currency`, OLD.`settlement_usd`, OLD.`settlement_currency`, OLD.`deposit_date`, OLD.`deposit_usd`, OLD.`deposit_currency`, OLD.`parent_contribution_id`, OLD.`finance_only`, OLD.`postmark_date`, OLD.`source_name`, OLD.`source_type`, OLD.`source_host`, OLD.`source_run_id`, OLD.`source_version`, OLD.`source_enqueued_time`, OLD.`no_thank_you`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF; END //
DROP TRIGGER IF EXISTS wmf_donor_after_insert //

CREATE TRIGGER wmf_donor_after_insert after insert ON wmf_donor FOR EACH ROW BEGIN  UPDATE civicrm_contact SET modified_date = CURRENT_TIMESTAMP WHERE id = NEW.entity_id; END //
DROP TRIGGER IF EXISTS wmf_donor_after_update //

CREATE TRIGGER wmf_donor_after_update after update ON wmf_donor FOR EACH ROW BEGIN  UPDATE civicrm_contact SET modified_date = CURRENT_TIMESTAMP WHERE id = NEW.entity_id; END //
DROP TRIGGER IF EXISTS wmf_donor_after_delete //

CREATE TRIGGER wmf_donor_after_delete after delete ON wmf_donor FOR EACH ROW BEGIN  UPDATE civicrm_contact SET modified_date = CURRENT_TIMESTAMP WHERE id = OLD.entity_id; END //

CREATE TRIGGER wmf_external_contact_identifiers_after_insert after insert ON wmf_external_contact_identifiers FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_wmf_external_contact_identifiers (`id`, `entity_id`, `fundraiseup_id`, `venmo_user_name`, log_conn_id, log_user_id, log_action) VALUES ( NEW.`id`, NEW.`entity_id`, NEW.`fundraiseup_id`, NEW.`venmo_user_name`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'insert'); END IF;
UPDATE civicrm_contact SET modified_date = CURRENT_TIMESTAMP WHERE id = NEW.entity_id; END //

CREATE TRIGGER wmf_external_contact_identifiers_after_update after update ON wmf_external_contact_identifiers FOR EACH ROW BEGIN  IF ( (IFNULL(OLD.`id`,'') <> IFNULL(NEW.`id`,'') OR IFNULL(OLD.`entity_id`,'') <> IFNULL(NEW.`entity_id`,'') OR IFNULL(OLD.`fundraiseup_id`,'') <> IFNULL(NEW.`fundraiseup_id`,'') OR IFNULL(OLD.`venmo_user_name`,'') <> IFNULL(NEW.`venmo_user_name`,'')) AND ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) ) THEN INSERT INTO log_wmf_external_contact_identifiers (`id`, `entity_id`, `fundraiseup_id`, `venmo_user_name`, log_conn_id, log_user_id, log_action) VALUES (NEW.`id`, NEW.`entity_id`, NEW.`fundraiseup_id`, NEW.`venmo_user_name`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'update'); END IF;
UPDATE civicrm_contact SET modified_date = CURRENT_TIMESTAMP WHERE id = NEW.entity_id; END //

CREATE TRIGGER wmf_external_contact_identifiers_after_delete after delete ON wmf_external_contact_identifiers FOR EACH ROW BEGIN  IF ( @civicrm_disable_logging IS NULL OR @civicrm_disable_logging = 0 ) THEN INSERT INTO log_wmf_external_contact_identifiers (`id`, `entity_id`, `fundraiseup_id`, `venmo_user_name`, log_conn_id, log_user_id, log_action) VALUES ( OLD.`id`, OLD.`entity_id`, OLD.`fundraiseup_id`, OLD.`venmo_user_name`, COALESCE(@uniqueID, LEFT(CONCAT('c_', unix_timestamp()/3600, CONNECTION_ID()), 17)), @civicrm_user_id, 'delete'); END IF;
UPDATE civicrm_contact SET modified_date = CURRENT_TIMESTAMP WHERE id = OLD.entity_id; END //
DELIMITER ;
